
uart_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007abc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08007d5c  08007d5c  00017d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007e40  08007e40  00017e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007e48  08007e48  00017e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007e4c  08007e4c  00017e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08007e50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c8  24000074  08007ec4  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400013c  08007ec4  0002013c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011e61  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002307  00000000  00000000  00031f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ba0  00000000  00000000  00034210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000ab8  00000000  00000000  00034db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000371fe  00000000  00000000  00035868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011afe  00000000  00000000  0006ca66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015a1db  00000000  00000000  0007e564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d873f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003698  00000000  00000000  001d8790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007d44 	.word	0x08007d44

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08007d44 	.word	0x08007d44

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <MX_GPIO_Init>:
/** Configure pins
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_GPIO_Init+0x6c>)
 800068c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000690:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <MX_GPIO_Init+0x6c>)
 8000692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000696:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_GPIO_Init+0x6c>)
 800069c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_GPIO_Init+0x6c>)
 80006aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ae:	4a10      	ldr	r2, [pc, #64]	; (80006f0 <MX_GPIO_Init+0x6c>)
 80006b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <MX_GPIO_Init+0x6c>)
 80006ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_GPIO_Init+0x6c>)
 80006c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006cc:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <MX_GPIO_Init+0x6c>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_GPIO_Init+0x6c>)
 80006d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]

}
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	58024400 	.word	0x58024400

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f000 fb68 	bl	8000dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f814 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f7ff ffc0 	bl	8000684 <MX_GPIO_Init>
  MX_UART4_Init();
 8000704:	f000 fa26 	bl	8000b54 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart4, &uart_rx_data, 1);
 8000708:	2201      	movs	r2, #1
 800070a:	4904      	ldr	r1, [pc, #16]	; (800071c <main+0x28>)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <main+0x2c>)
 800070e:	f004 f861 	bl	80047d4 <HAL_UART_Receive_IT>
  printf("start main\r\n");
 8000712:	4804      	ldr	r0, [pc, #16]	; (8000724 <main+0x30>)
 8000714:	f006 fb98 	bl	8006e48 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000718:	e7fe      	b.n	8000718 <main+0x24>
 800071a:	bf00      	nop
 800071c:	24000094 	.word	0x24000094
 8000720:	24000098 	.word	0x24000098
 8000724:	08007d5c 	.word	0x08007d5c

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b09c      	sub	sp, #112	; 0x70
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000732:	224c      	movs	r2, #76	; 0x4c
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f006 faf8 	bl	8006d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2220      	movs	r2, #32
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f006 faf2 	bl	8006d2c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000748:	2002      	movs	r0, #2
 800074a:	f001 fc01 	bl	8001f50 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800074e:	2300      	movs	r3, #0
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	4b34      	ldr	r3, [pc, #208]	; (8000824 <SystemClock_Config+0xfc>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	4a33      	ldr	r2, [pc, #204]	; (8000824 <SystemClock_Config+0xfc>)
 8000758:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800075c:	6193      	str	r3, [r2, #24]
 800075e:	4b31      	ldr	r3, [pc, #196]	; (8000824 <SystemClock_Config+0xfc>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	4b2f      	ldr	r3, [pc, #188]	; (8000828 <SystemClock_Config+0x100>)
 800076a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800076c:	4a2e      	ldr	r2, [pc, #184]	; (8000828 <SystemClock_Config+0x100>)
 800076e:	f043 0301 	orr.w	r3, r3, #1
 8000772:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000774:	4b2c      	ldr	r3, [pc, #176]	; (8000828 <SystemClock_Config+0x100>)
 8000776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000780:	bf00      	nop
 8000782:	4b28      	ldr	r3, [pc, #160]	; (8000824 <SystemClock_Config+0xfc>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800078a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800078e:	d1f8      	bne.n	8000782 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000790:	4b26      	ldr	r3, [pc, #152]	; (800082c <SystemClock_Config+0x104>)
 8000792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000794:	f023 0303 	bic.w	r3, r3, #3
 8000798:	4a24      	ldr	r2, [pc, #144]	; (800082c <SystemClock_Config+0x104>)
 800079a:	f043 0302 	orr.w	r3, r3, #2
 800079e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a0:	2301      	movs	r3, #1
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007aa:	2302      	movs	r3, #2
 80007ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ae:	2302      	movs	r3, #2
 80007b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80007b2:	2305      	movs	r3, #5
 80007b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007b6:	23c0      	movs	r3, #192	; 0xc0
 80007b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007be:	2302      	movs	r3, #2
 80007c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80007c6:	2308      	movs	r3, #8
 80007c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 fbf4 	bl	8001fc4 <HAL_RCC_OscConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80007e2:	f000 f837 	bl	8000854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e6:	233f      	movs	r3, #63	; 0x3f
 80007e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ea:	2303      	movs	r3, #3
 80007ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007f2:	2308      	movs	r3, #8
 80007f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007f6:	2340      	movs	r3, #64	; 0x40
 80007f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007fa:	2340      	movs	r3, #64	; 0x40
 80007fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000802:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000804:	2340      	movs	r3, #64	; 0x40
 8000806:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2104      	movs	r1, #4
 800080c:	4618      	mov	r0, r3
 800080e:	f002 f807 	bl	8002820 <HAL_RCC_ClockConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000818:	f000 f81c 	bl	8000854 <Error_Handler>
  }
}
 800081c:	bf00      	nop
 800081e:	3770      	adds	r7, #112	; 0x70
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	58024800 	.word	0x58024800
 8000828:	58000400 	.word	0x58000400
 800082c:	58024400 	.word	0x58024400

08000830 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit (&huart4, (uint8_t*) &ch, 1, 0xFFFF);
 8000838:	1d39      	adds	r1, r7, #4
 800083a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083e:	2201      	movs	r2, #1
 8000840:	4803      	ldr	r0, [pc, #12]	; (8000850 <__io_putchar+0x20>)
 8000842:	f003 ff31 	bl	80046a8 <HAL_UART_Transmit>
  return ch;
 8000846:	687b      	ldr	r3, [r7, #4]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	24000098 	.word	0x24000098

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <HAL_MspInit+0x30>)
 8000868:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800086c:	4a08      	ldr	r2, [pc, #32]	; (8000890 <HAL_MspInit+0x30>)
 800086e:	f043 0302 	orr.w	r3, r3, #2
 8000872:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_MspInit+0x30>)
 8000878:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800087c:	f003 0302 	and.w	r3, r3, #2
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	58024400 	.word	0x58024400

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <NMI_Handler+0x4>

0800089a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <HardFault_Handler+0x4>

080008a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <MemManage_Handler+0x4>

080008a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <BusFault_Handler+0x4>

080008ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <UsageFault_Handler+0x4>

080008b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e0:	f000 fae6 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <UART4_IRQHandler+0x10>)
 80008ee:	f003 ffc7 	bl	8004880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	24000098 	.word	0x24000098

080008fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	e00a      	b.n	8000924 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800090e:	f3af 8000 	nop.w
 8000912:	4601      	mov	r1, r0
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	1c5a      	adds	r2, r3, #1
 8000918:	60ba      	str	r2, [r7, #8]
 800091a:	b2ca      	uxtb	r2, r1
 800091c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	3301      	adds	r3, #1
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697a      	ldr	r2, [r7, #20]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	429a      	cmp	r2, r3
 800092a:	dbf0      	blt.n	800090e <_read+0x12>
	}

return len;
 800092c:	687b      	ldr	r3, [r7, #4]
}
 800092e:	4618      	mov	r0, r3
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b086      	sub	sp, #24
 800093a:	af00      	add	r7, sp, #0
 800093c:	60f8      	str	r0, [r7, #12]
 800093e:	60b9      	str	r1, [r7, #8]
 8000940:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
 8000946:	e009      	b.n	800095c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	60ba      	str	r2, [r7, #8]
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff6d 	bl	8000830 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	3301      	adds	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697a      	ldr	r2, [r7, #20]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	429a      	cmp	r2, r3
 8000962:	dbf1      	blt.n	8000948 <_write+0x12>
	}
	return len;
 8000964:	687b      	ldr	r3, [r7, #4]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <_close>:

int _close(int file)
{
 800096e:	b480      	push	{r7}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
	return -1;
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
}
 800097a:	4618      	mov	r0, r3
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000996:	605a      	str	r2, [r3, #4]
	return 0;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <_isatty>:

int _isatty(int file)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
	return 1;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
	return 0;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
	...

080009d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e0:	4a14      	ldr	r2, [pc, #80]	; (8000a34 <_sbrk+0x5c>)
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <_sbrk+0x60>)
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <_sbrk+0x64>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d102      	bne.n	80009fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <_sbrk+0x64>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <_sbrk+0x68>)
 80009f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d207      	bcs.n	8000a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a08:	f006 f966 	bl	8006cd8 <__errno>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	220c      	movs	r2, #12
 8000a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
 8000a16:	e009      	b.n	8000a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <_sbrk+0x64>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <_sbrk+0x64>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <_sbrk+0x64>)
 8000a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	24080000 	.word	0x24080000
 8000a38:	00000400 	.word	0x00000400
 8000a3c:	24000090 	.word	0x24000090
 8000a40:	24000140 	.word	0x24000140

08000a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a48:	4b37      	ldr	r3, [pc, #220]	; (8000b28 <SystemInit+0xe4>)
 8000a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4e:	4a36      	ldr	r2, [pc, #216]	; (8000b28 <SystemInit+0xe4>)
 8000a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a58:	4b34      	ldr	r3, [pc, #208]	; (8000b2c <SystemInit+0xe8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f003 030f 	and.w	r3, r3, #15
 8000a60:	2b06      	cmp	r3, #6
 8000a62:	d807      	bhi.n	8000a74 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a64:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <SystemInit+0xe8>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f023 030f 	bic.w	r3, r3, #15
 8000a6c:	4a2f      	ldr	r2, [pc, #188]	; (8000b2c <SystemInit+0xe8>)
 8000a6e:	f043 0307 	orr.w	r3, r3, #7
 8000a72:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a74:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <SystemInit+0xec>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a2d      	ldr	r2, [pc, #180]	; (8000b30 <SystemInit+0xec>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a80:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <SystemInit+0xec>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a86:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <SystemInit+0xec>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4929      	ldr	r1, [pc, #164]	; (8000b30 <SystemInit+0xec>)
 8000a8c:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <SystemInit+0xf0>)
 8000a8e:	4013      	ands	r3, r2
 8000a90:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a92:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <SystemInit+0xe8>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f003 0308 	and.w	r3, r3, #8
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d007      	beq.n	8000aae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a9e:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <SystemInit+0xe8>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f023 030f 	bic.w	r3, r3, #15
 8000aa6:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <SystemInit+0xe8>)
 8000aa8:	f043 0307 	orr.w	r3, r3, #7
 8000aac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000aae:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <SystemInit+0xec>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ab4:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <SystemInit+0xec>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aba:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <SystemInit+0xec>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <SystemInit+0xec>)
 8000ac2:	4a1d      	ldr	r2, [pc, #116]	; (8000b38 <SystemInit+0xf4>)
 8000ac4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <SystemInit+0xec>)
 8000ac8:	4a1c      	ldr	r2, [pc, #112]	; (8000b3c <SystemInit+0xf8>)
 8000aca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <SystemInit+0xec>)
 8000ace:	4a1c      	ldr	r2, [pc, #112]	; (8000b40 <SystemInit+0xfc>)
 8000ad0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <SystemInit+0xec>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <SystemInit+0xec>)
 8000ada:	4a19      	ldr	r2, [pc, #100]	; (8000b40 <SystemInit+0xfc>)
 8000adc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <SystemInit+0xec>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <SystemInit+0xec>)
 8000ae6:	4a16      	ldr	r2, [pc, #88]	; (8000b40 <SystemInit+0xfc>)
 8000ae8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <SystemInit+0xec>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <SystemInit+0xec>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <SystemInit+0xec>)
 8000af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000afa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <SystemInit+0xec>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <SystemInit+0x100>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <SystemInit+0x104>)
 8000b08:	4013      	ands	r3, r2
 8000b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b0e:	d202      	bcs.n	8000b16 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <SystemInit+0x108>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <SystemInit+0x10c>)
 8000b18:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b1c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00
 8000b2c:	52002000 	.word	0x52002000
 8000b30:	58024400 	.word	0x58024400
 8000b34:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b38:	02020200 	.word	0x02020200
 8000b3c:	01ff0000 	.word	0x01ff0000
 8000b40:	01010280 	.word	0x01010280
 8000b44:	5c001000 	.word	0x5c001000
 8000b48:	ffff0000 	.word	0xffff0000
 8000b4c:	51008108 	.word	0x51008108
 8000b50:	52004000 	.word	0x52004000

08000b54 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <MX_UART4_Init+0x90>)
 8000b5a:	4a23      	ldr	r2, [pc, #140]	; (8000be8 <MX_UART4_Init+0x94>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b5e:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <MX_UART4_Init+0x90>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <MX_UART4_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <MX_UART4_Init+0x90>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <MX_UART4_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <MX_UART4_Init+0x90>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <MX_UART4_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <MX_UART4_Init+0x90>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8a:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <MX_UART4_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <MX_UART4_Init+0x90>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <MX_UART4_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b9c:	4811      	ldr	r0, [pc, #68]	; (8000be4 <MX_UART4_Init+0x90>)
 8000b9e:	f003 fd33 	bl	8004608 <HAL_UART_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000ba8:	f7ff fe54 	bl	8000854 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bac:	2100      	movs	r1, #0
 8000bae:	480d      	ldr	r0, [pc, #52]	; (8000be4 <MX_UART4_Init+0x90>)
 8000bb0:	f005 ffc7 	bl	8006b42 <HAL_UARTEx_SetTxFifoThreshold>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000bba:	f7ff fe4b 	bl	8000854 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4808      	ldr	r0, [pc, #32]	; (8000be4 <MX_UART4_Init+0x90>)
 8000bc2:	f005 fffc 	bl	8006bbe <HAL_UARTEx_SetRxFifoThreshold>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000bcc:	f7ff fe42 	bl	8000854 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000bd0:	4804      	ldr	r0, [pc, #16]	; (8000be4 <MX_UART4_Init+0x90>)
 8000bd2:	f005 ff7d 	bl	8006ad0 <HAL_UARTEx_DisableFifoMode>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000bdc:	f7ff fe3a 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	24000098 	.word	0x24000098
 8000be8:	40004c00 	.word	0x40004c00

08000bec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b0ba      	sub	sp, #232	; 0xe8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c04:	f107 0318 	add.w	r3, r7, #24
 8000c08:	22bc      	movs	r2, #188	; 0xbc
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f006 f88d 	bl	8006d2c <memset>
  if(uartHandle->Instance==UART4)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a43      	ldr	r2, [pc, #268]	; (8000d24 <HAL_UART_MspInit+0x138>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d17e      	bne.n	8000d1a <HAL_UART_MspInit+0x12e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 8000c20:	2305      	movs	r3, #5
 8000c22:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
 8000c24:	23c0      	movs	r3, #192	; 0xc0
 8000c26:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 10;
 8000c2c:	230a      	movs	r3, #10
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c30:	2302      	movs	r3, #2
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8000c40:	2301      	movs	r3, #1
 8000c42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c46:	f107 0318 	add.w	r3, r7, #24
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 f974 	bl	8002f38 <HAL_RCCEx_PeriphCLKConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_UART_MspInit+0x6e>
    {
      Error_Handler();
 8000c56:	f7ff fdfd 	bl	8000854 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c5a:	4b33      	ldr	r3, [pc, #204]	; (8000d28 <HAL_UART_MspInit+0x13c>)
 8000c5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c60:	4a31      	ldr	r2, [pc, #196]	; (8000d28 <HAL_UART_MspInit+0x13c>)
 8000c62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c6a:	4b2f      	ldr	r3, [pc, #188]	; (8000d28 <HAL_UART_MspInit+0x13c>)
 8000c6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c78:	4b2b      	ldr	r3, [pc, #172]	; (8000d28 <HAL_UART_MspInit+0x13c>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7e:	4a2a      	ldr	r2, [pc, #168]	; (8000d28 <HAL_UART_MspInit+0x13c>)
 8000c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c88:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <HAL_UART_MspInit+0x13c>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	4b24      	ldr	r3, [pc, #144]	; (8000d28 <HAL_UART_MspInit+0x13c>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9c:	4a22      	ldr	r2, [pc, #136]	; (8000d28 <HAL_UART_MspInit+0x13c>)
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca6:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <HAL_UART_MspInit+0x13c>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PI9     ------> UART4_RX
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000cce:	2308      	movs	r3, #8
 8000cd0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cd4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4814      	ldr	r0, [pc, #80]	; (8000d2c <HAL_UART_MspInit+0x140>)
 8000cdc:	f000 ff88 	bl	8001bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d02:	4619      	mov	r1, r3
 8000d04:	480a      	ldr	r0, [pc, #40]	; (8000d30 <HAL_UART_MspInit+0x144>)
 8000d06:	f000 ff73 	bl	8001bf0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2034      	movs	r0, #52	; 0x34
 8000d10:	f000 f9d5 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000d14:	2034      	movs	r0, #52	; 0x34
 8000d16:	f000 f9ec 	bl	80010f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	37e8      	adds	r7, #232	; 0xe8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40004c00 	.word	0x40004c00
 8000d28:	58024400 	.word	0x58024400
 8000d2c:	58022000 	.word	0x58022000
 8000d30:	58020000 	.word	0x58020000

08000d34 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if(huart->Instance == UART4){
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a09      	ldr	r2, [pc, #36]	; (8000d68 <HAL_UART_RxCpltCallback+0x34>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d10b      	bne.n	8000d5e <HAL_UART_RxCpltCallback+0x2a>
    HAL_UART_Receive_IT(&huart4, &uart_rx_data, 1);
 8000d46:	2201      	movs	r2, #1
 8000d48:	4908      	ldr	r1, [pc, #32]	; (8000d6c <HAL_UART_RxCpltCallback+0x38>)
 8000d4a:	4809      	ldr	r0, [pc, #36]	; (8000d70 <HAL_UART_RxCpltCallback+0x3c>)
 8000d4c:	f003 fd42 	bl	80047d4 <HAL_UART_Receive_IT>
    printf("%c\r\n",uart_rx_data);
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_UART_RxCpltCallback+0x38>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	4619      	mov	r1, r3
 8000d58:	4806      	ldr	r0, [pc, #24]	; (8000d74 <HAL_UART_RxCpltCallback+0x40>)
 8000d5a:	f005 ffef 	bl	8006d3c <iprintf>
  }
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40004c00 	.word	0x40004c00
 8000d6c:	24000094 	.word	0x24000094
 8000d70:	24000098 	.word	0x24000098
 8000d74:	08007d68 	.word	0x08007d68

08000d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d7c:	f7ff fe62 	bl	8000a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d82:	490d      	ldr	r1, [pc, #52]	; (8000db8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d98:	4c0a      	ldr	r4, [pc, #40]	; (8000dc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da6:	f005 ff9d 	bl	8006ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000daa:	f7ff fca3 	bl	80006f4 <main>
  bx  lr
 8000dae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000db0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000db4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000db8:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000dbc:	08007e50 	.word	0x08007e50
  ldr r2, =_sbss
 8000dc0:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000dc4:	2400013c 	.word	0x2400013c

08000dc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC3_IRQHandler>
	...

08000dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd2:	2003      	movs	r0, #3
 8000dd4:	f000 f968 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000dd8:	f001 fed8 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <HAL_Init+0x68>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	0a1b      	lsrs	r3, r3, #8
 8000de4:	f003 030f 	and.w	r3, r3, #15
 8000de8:	4913      	ldr	r1, [pc, #76]	; (8000e38 <HAL_Init+0x6c>)
 8000dea:	5ccb      	ldrb	r3, [r1, r3]
 8000dec:	f003 031f 	and.w	r3, r3, #31
 8000df0:	fa22 f303 	lsr.w	r3, r2, r3
 8000df4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <HAL_Init+0x68>)
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <HAL_Init+0x6c>)
 8000e00:	5cd3      	ldrb	r3, [r2, r3]
 8000e02:	f003 031f 	and.w	r3, r3, #31
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	fa22 f303 	lsr.w	r3, r2, r3
 8000e0c:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <HAL_Init+0x70>)
 8000e0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e10:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <HAL_Init+0x74>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e16:	200f      	movs	r0, #15
 8000e18:	f000 f814 	bl	8000e44 <HAL_InitTick>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e002      	b.n	8000e2c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e26:	f7ff fd1b 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	58024400 	.word	0x58024400
 8000e38:	08007d70 	.word	0x08007d70
 8000e3c:	24000004 	.word	0x24000004
 8000e40:	24000000 	.word	0x24000000

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_InitTick+0x60>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d101      	bne.n	8000e58 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e021      	b.n	8000e9c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e58:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <HAL_InitTick+0x64>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_InitTick+0x60>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f94d 	bl	800110e <HAL_SYSTICK_Config>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00e      	b.n	8000e9c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b0f      	cmp	r3, #15
 8000e82:	d80a      	bhi.n	8000e9a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f000 f917 	bl	80010be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e90:	4a06      	ldr	r2, [pc, #24]	; (8000eac <HAL_InitTick+0x68>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2400000c 	.word	0x2400000c
 8000ea8:	24000000 	.word	0x24000000
 8000eac:	24000008 	.word	0x24000008

08000eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x20>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	2400000c 	.word	0x2400000c
 8000ed4:	24000128 	.word	0x24000128

08000ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_GetTick+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	24000128 	.word	0x24000128

08000ef0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <HAL_GetREVID+0x14>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	0c1b      	lsrs	r3, r3, #16
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	5c001000 	.word	0x5c001000

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <__NVIC_SetPriorityGrouping+0x40>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f32:	4313      	orrs	r3, r2
 8000f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f36:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <__NVIC_SetPriorityGrouping+0x40>)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	60d3      	str	r3, [r2, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00
 8000f4c:	05fa0000 	.word	0x05fa0000

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db0b      	blt.n	8000f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7e:	88fb      	ldrh	r3, [r7, #6]
 8000f80:	f003 021f 	and.w	r2, r3, #31
 8000f84:	4907      	ldr	r1, [pc, #28]	; (8000fa4 <__NVIC_EnableIRQ+0x38>)
 8000f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f7ff ff8e 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff29 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010cc:	f7ff ff40 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 80010d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff ff90 	bl	8000ffc <NVIC_EncodePriority>
 80010dc:	4602      	mov	r2, r0
 80010de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5f 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff33 	bl	8000f6c <__NVIC_EnableIRQ>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ffa4 	bl	8001064 <SysTick_Config>
 800111c:	4603      	mov	r3, r0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff fed2 	bl	8000ed8 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e2dc      	b.n	80016fa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d008      	beq.n	800115e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2280      	movs	r2, #128	; 0x80
 8001150:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e2cd      	b.n	80016fa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a76      	ldr	r2, [pc, #472]	; (800133c <HAL_DMA_Abort+0x214>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d04a      	beq.n	80011fe <HAL_DMA_Abort+0xd6>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a74      	ldr	r2, [pc, #464]	; (8001340 <HAL_DMA_Abort+0x218>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d045      	beq.n	80011fe <HAL_DMA_Abort+0xd6>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a73      	ldr	r2, [pc, #460]	; (8001344 <HAL_DMA_Abort+0x21c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d040      	beq.n	80011fe <HAL_DMA_Abort+0xd6>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a71      	ldr	r2, [pc, #452]	; (8001348 <HAL_DMA_Abort+0x220>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d03b      	beq.n	80011fe <HAL_DMA_Abort+0xd6>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a70      	ldr	r2, [pc, #448]	; (800134c <HAL_DMA_Abort+0x224>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d036      	beq.n	80011fe <HAL_DMA_Abort+0xd6>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a6e      	ldr	r2, [pc, #440]	; (8001350 <HAL_DMA_Abort+0x228>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d031      	beq.n	80011fe <HAL_DMA_Abort+0xd6>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a6d      	ldr	r2, [pc, #436]	; (8001354 <HAL_DMA_Abort+0x22c>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d02c      	beq.n	80011fe <HAL_DMA_Abort+0xd6>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a6b      	ldr	r2, [pc, #428]	; (8001358 <HAL_DMA_Abort+0x230>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d027      	beq.n	80011fe <HAL_DMA_Abort+0xd6>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a6a      	ldr	r2, [pc, #424]	; (800135c <HAL_DMA_Abort+0x234>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d022      	beq.n	80011fe <HAL_DMA_Abort+0xd6>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a68      	ldr	r2, [pc, #416]	; (8001360 <HAL_DMA_Abort+0x238>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d01d      	beq.n	80011fe <HAL_DMA_Abort+0xd6>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a67      	ldr	r2, [pc, #412]	; (8001364 <HAL_DMA_Abort+0x23c>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d018      	beq.n	80011fe <HAL_DMA_Abort+0xd6>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a65      	ldr	r2, [pc, #404]	; (8001368 <HAL_DMA_Abort+0x240>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d013      	beq.n	80011fe <HAL_DMA_Abort+0xd6>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a64      	ldr	r2, [pc, #400]	; (800136c <HAL_DMA_Abort+0x244>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d00e      	beq.n	80011fe <HAL_DMA_Abort+0xd6>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a62      	ldr	r2, [pc, #392]	; (8001370 <HAL_DMA_Abort+0x248>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d009      	beq.n	80011fe <HAL_DMA_Abort+0xd6>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a61      	ldr	r2, [pc, #388]	; (8001374 <HAL_DMA_Abort+0x24c>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d004      	beq.n	80011fe <HAL_DMA_Abort+0xd6>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a5f      	ldr	r2, [pc, #380]	; (8001378 <HAL_DMA_Abort+0x250>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d101      	bne.n	8001202 <HAL_DMA_Abort+0xda>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <HAL_DMA_Abort+0xdc>
 8001202:	2300      	movs	r3, #0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d013      	beq.n	8001230 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 021e 	bic.w	r2, r2, #30
 8001216:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	695a      	ldr	r2, [r3, #20]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001226:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	e00a      	b.n	8001246 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 020e 	bic.w	r2, r2, #14
 800123e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a3c      	ldr	r2, [pc, #240]	; (800133c <HAL_DMA_Abort+0x214>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d072      	beq.n	8001336 <HAL_DMA_Abort+0x20e>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a3a      	ldr	r2, [pc, #232]	; (8001340 <HAL_DMA_Abort+0x218>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d06d      	beq.n	8001336 <HAL_DMA_Abort+0x20e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a39      	ldr	r2, [pc, #228]	; (8001344 <HAL_DMA_Abort+0x21c>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d068      	beq.n	8001336 <HAL_DMA_Abort+0x20e>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a37      	ldr	r2, [pc, #220]	; (8001348 <HAL_DMA_Abort+0x220>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d063      	beq.n	8001336 <HAL_DMA_Abort+0x20e>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a36      	ldr	r2, [pc, #216]	; (800134c <HAL_DMA_Abort+0x224>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d05e      	beq.n	8001336 <HAL_DMA_Abort+0x20e>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a34      	ldr	r2, [pc, #208]	; (8001350 <HAL_DMA_Abort+0x228>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d059      	beq.n	8001336 <HAL_DMA_Abort+0x20e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a33      	ldr	r2, [pc, #204]	; (8001354 <HAL_DMA_Abort+0x22c>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d054      	beq.n	8001336 <HAL_DMA_Abort+0x20e>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a31      	ldr	r2, [pc, #196]	; (8001358 <HAL_DMA_Abort+0x230>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d04f      	beq.n	8001336 <HAL_DMA_Abort+0x20e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a30      	ldr	r2, [pc, #192]	; (800135c <HAL_DMA_Abort+0x234>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d04a      	beq.n	8001336 <HAL_DMA_Abort+0x20e>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a2e      	ldr	r2, [pc, #184]	; (8001360 <HAL_DMA_Abort+0x238>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d045      	beq.n	8001336 <HAL_DMA_Abort+0x20e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a2d      	ldr	r2, [pc, #180]	; (8001364 <HAL_DMA_Abort+0x23c>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d040      	beq.n	8001336 <HAL_DMA_Abort+0x20e>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a2b      	ldr	r2, [pc, #172]	; (8001368 <HAL_DMA_Abort+0x240>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d03b      	beq.n	8001336 <HAL_DMA_Abort+0x20e>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a2a      	ldr	r2, [pc, #168]	; (800136c <HAL_DMA_Abort+0x244>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d036      	beq.n	8001336 <HAL_DMA_Abort+0x20e>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a28      	ldr	r2, [pc, #160]	; (8001370 <HAL_DMA_Abort+0x248>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d031      	beq.n	8001336 <HAL_DMA_Abort+0x20e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a27      	ldr	r2, [pc, #156]	; (8001374 <HAL_DMA_Abort+0x24c>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d02c      	beq.n	8001336 <HAL_DMA_Abort+0x20e>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a25      	ldr	r2, [pc, #148]	; (8001378 <HAL_DMA_Abort+0x250>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d027      	beq.n	8001336 <HAL_DMA_Abort+0x20e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a24      	ldr	r2, [pc, #144]	; (800137c <HAL_DMA_Abort+0x254>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d022      	beq.n	8001336 <HAL_DMA_Abort+0x20e>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a22      	ldr	r2, [pc, #136]	; (8001380 <HAL_DMA_Abort+0x258>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d01d      	beq.n	8001336 <HAL_DMA_Abort+0x20e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a21      	ldr	r2, [pc, #132]	; (8001384 <HAL_DMA_Abort+0x25c>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d018      	beq.n	8001336 <HAL_DMA_Abort+0x20e>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a1f      	ldr	r2, [pc, #124]	; (8001388 <HAL_DMA_Abort+0x260>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d013      	beq.n	8001336 <HAL_DMA_Abort+0x20e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a1e      	ldr	r2, [pc, #120]	; (800138c <HAL_DMA_Abort+0x264>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d00e      	beq.n	8001336 <HAL_DMA_Abort+0x20e>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a1c      	ldr	r2, [pc, #112]	; (8001390 <HAL_DMA_Abort+0x268>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d009      	beq.n	8001336 <HAL_DMA_Abort+0x20e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <HAL_DMA_Abort+0x26c>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d004      	beq.n	8001336 <HAL_DMA_Abort+0x20e>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a19      	ldr	r2, [pc, #100]	; (8001398 <HAL_DMA_Abort+0x270>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d132      	bne.n	800139c <HAL_DMA_Abort+0x274>
 8001336:	2301      	movs	r3, #1
 8001338:	e031      	b.n	800139e <HAL_DMA_Abort+0x276>
 800133a:	bf00      	nop
 800133c:	40020010 	.word	0x40020010
 8001340:	40020028 	.word	0x40020028
 8001344:	40020040 	.word	0x40020040
 8001348:	40020058 	.word	0x40020058
 800134c:	40020070 	.word	0x40020070
 8001350:	40020088 	.word	0x40020088
 8001354:	400200a0 	.word	0x400200a0
 8001358:	400200b8 	.word	0x400200b8
 800135c:	40020410 	.word	0x40020410
 8001360:	40020428 	.word	0x40020428
 8001364:	40020440 	.word	0x40020440
 8001368:	40020458 	.word	0x40020458
 800136c:	40020470 	.word	0x40020470
 8001370:	40020488 	.word	0x40020488
 8001374:	400204a0 	.word	0x400204a0
 8001378:	400204b8 	.word	0x400204b8
 800137c:	58025408 	.word	0x58025408
 8001380:	5802541c 	.word	0x5802541c
 8001384:	58025430 	.word	0x58025430
 8001388:	58025444 	.word	0x58025444
 800138c:	58025458 	.word	0x58025458
 8001390:	5802546c 	.word	0x5802546c
 8001394:	58025480 	.word	0x58025480
 8001398:	58025494 	.word	0x58025494
 800139c:	2300      	movs	r3, #0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d007      	beq.n	80013b2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a6d      	ldr	r2, [pc, #436]	; (800156c <HAL_DMA_Abort+0x444>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d04a      	beq.n	8001452 <HAL_DMA_Abort+0x32a>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a6b      	ldr	r2, [pc, #428]	; (8001570 <HAL_DMA_Abort+0x448>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d045      	beq.n	8001452 <HAL_DMA_Abort+0x32a>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a6a      	ldr	r2, [pc, #424]	; (8001574 <HAL_DMA_Abort+0x44c>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d040      	beq.n	8001452 <HAL_DMA_Abort+0x32a>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a68      	ldr	r2, [pc, #416]	; (8001578 <HAL_DMA_Abort+0x450>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d03b      	beq.n	8001452 <HAL_DMA_Abort+0x32a>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a67      	ldr	r2, [pc, #412]	; (800157c <HAL_DMA_Abort+0x454>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d036      	beq.n	8001452 <HAL_DMA_Abort+0x32a>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a65      	ldr	r2, [pc, #404]	; (8001580 <HAL_DMA_Abort+0x458>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d031      	beq.n	8001452 <HAL_DMA_Abort+0x32a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a64      	ldr	r2, [pc, #400]	; (8001584 <HAL_DMA_Abort+0x45c>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d02c      	beq.n	8001452 <HAL_DMA_Abort+0x32a>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a62      	ldr	r2, [pc, #392]	; (8001588 <HAL_DMA_Abort+0x460>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d027      	beq.n	8001452 <HAL_DMA_Abort+0x32a>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a61      	ldr	r2, [pc, #388]	; (800158c <HAL_DMA_Abort+0x464>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d022      	beq.n	8001452 <HAL_DMA_Abort+0x32a>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a5f      	ldr	r2, [pc, #380]	; (8001590 <HAL_DMA_Abort+0x468>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d01d      	beq.n	8001452 <HAL_DMA_Abort+0x32a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a5e      	ldr	r2, [pc, #376]	; (8001594 <HAL_DMA_Abort+0x46c>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d018      	beq.n	8001452 <HAL_DMA_Abort+0x32a>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a5c      	ldr	r2, [pc, #368]	; (8001598 <HAL_DMA_Abort+0x470>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d013      	beq.n	8001452 <HAL_DMA_Abort+0x32a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a5b      	ldr	r2, [pc, #364]	; (800159c <HAL_DMA_Abort+0x474>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d00e      	beq.n	8001452 <HAL_DMA_Abort+0x32a>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a59      	ldr	r2, [pc, #356]	; (80015a0 <HAL_DMA_Abort+0x478>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d009      	beq.n	8001452 <HAL_DMA_Abort+0x32a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a58      	ldr	r2, [pc, #352]	; (80015a4 <HAL_DMA_Abort+0x47c>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d004      	beq.n	8001452 <HAL_DMA_Abort+0x32a>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a56      	ldr	r2, [pc, #344]	; (80015a8 <HAL_DMA_Abort+0x480>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d108      	bne.n	8001464 <HAL_DMA_Abort+0x33c>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0201 	bic.w	r2, r2, #1
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	e007      	b.n	8001474 <HAL_DMA_Abort+0x34c>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0201 	bic.w	r2, r2, #1
 8001472:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001474:	e013      	b.n	800149e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001476:	f7ff fd2f 	bl	8000ed8 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b05      	cmp	r3, #5
 8001482:	d90c      	bls.n	800149e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2220      	movs	r2, #32
 8001488:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2203      	movs	r2, #3
 800148e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e12d      	b.n	80016fa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1e5      	bne.n	8001476 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a2f      	ldr	r2, [pc, #188]	; (800156c <HAL_DMA_Abort+0x444>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d04a      	beq.n	800154a <HAL_DMA_Abort+0x422>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a2d      	ldr	r2, [pc, #180]	; (8001570 <HAL_DMA_Abort+0x448>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d045      	beq.n	800154a <HAL_DMA_Abort+0x422>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a2c      	ldr	r2, [pc, #176]	; (8001574 <HAL_DMA_Abort+0x44c>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d040      	beq.n	800154a <HAL_DMA_Abort+0x422>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a2a      	ldr	r2, [pc, #168]	; (8001578 <HAL_DMA_Abort+0x450>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d03b      	beq.n	800154a <HAL_DMA_Abort+0x422>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a29      	ldr	r2, [pc, #164]	; (800157c <HAL_DMA_Abort+0x454>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d036      	beq.n	800154a <HAL_DMA_Abort+0x422>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a27      	ldr	r2, [pc, #156]	; (8001580 <HAL_DMA_Abort+0x458>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d031      	beq.n	800154a <HAL_DMA_Abort+0x422>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a26      	ldr	r2, [pc, #152]	; (8001584 <HAL_DMA_Abort+0x45c>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d02c      	beq.n	800154a <HAL_DMA_Abort+0x422>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a24      	ldr	r2, [pc, #144]	; (8001588 <HAL_DMA_Abort+0x460>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d027      	beq.n	800154a <HAL_DMA_Abort+0x422>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a23      	ldr	r2, [pc, #140]	; (800158c <HAL_DMA_Abort+0x464>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d022      	beq.n	800154a <HAL_DMA_Abort+0x422>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a21      	ldr	r2, [pc, #132]	; (8001590 <HAL_DMA_Abort+0x468>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d01d      	beq.n	800154a <HAL_DMA_Abort+0x422>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a20      	ldr	r2, [pc, #128]	; (8001594 <HAL_DMA_Abort+0x46c>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d018      	beq.n	800154a <HAL_DMA_Abort+0x422>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a1e      	ldr	r2, [pc, #120]	; (8001598 <HAL_DMA_Abort+0x470>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d013      	beq.n	800154a <HAL_DMA_Abort+0x422>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a1d      	ldr	r2, [pc, #116]	; (800159c <HAL_DMA_Abort+0x474>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d00e      	beq.n	800154a <HAL_DMA_Abort+0x422>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <HAL_DMA_Abort+0x478>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d009      	beq.n	800154a <HAL_DMA_Abort+0x422>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a1a      	ldr	r2, [pc, #104]	; (80015a4 <HAL_DMA_Abort+0x47c>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d004      	beq.n	800154a <HAL_DMA_Abort+0x422>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a18      	ldr	r2, [pc, #96]	; (80015a8 <HAL_DMA_Abort+0x480>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d101      	bne.n	800154e <HAL_DMA_Abort+0x426>
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <HAL_DMA_Abort+0x428>
 800154e:	2300      	movs	r3, #0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d02b      	beq.n	80015ac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001558:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155e:	f003 031f 	and.w	r3, r3, #31
 8001562:	223f      	movs	r2, #63	; 0x3f
 8001564:	409a      	lsls	r2, r3
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	e02a      	b.n	80015c2 <HAL_DMA_Abort+0x49a>
 800156c:	40020010 	.word	0x40020010
 8001570:	40020028 	.word	0x40020028
 8001574:	40020040 	.word	0x40020040
 8001578:	40020058 	.word	0x40020058
 800157c:	40020070 	.word	0x40020070
 8001580:	40020088 	.word	0x40020088
 8001584:	400200a0 	.word	0x400200a0
 8001588:	400200b8 	.word	0x400200b8
 800158c:	40020410 	.word	0x40020410
 8001590:	40020428 	.word	0x40020428
 8001594:	40020440 	.word	0x40020440
 8001598:	40020458 	.word	0x40020458
 800159c:	40020470 	.word	0x40020470
 80015a0:	40020488 	.word	0x40020488
 80015a4:	400204a0 	.word	0x400204a0
 80015a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	2201      	movs	r2, #1
 80015bc:	409a      	lsls	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a4f      	ldr	r2, [pc, #316]	; (8001704 <HAL_DMA_Abort+0x5dc>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d072      	beq.n	80016b2 <HAL_DMA_Abort+0x58a>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a4d      	ldr	r2, [pc, #308]	; (8001708 <HAL_DMA_Abort+0x5e0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d06d      	beq.n	80016b2 <HAL_DMA_Abort+0x58a>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a4c      	ldr	r2, [pc, #304]	; (800170c <HAL_DMA_Abort+0x5e4>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d068      	beq.n	80016b2 <HAL_DMA_Abort+0x58a>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a4a      	ldr	r2, [pc, #296]	; (8001710 <HAL_DMA_Abort+0x5e8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d063      	beq.n	80016b2 <HAL_DMA_Abort+0x58a>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a49      	ldr	r2, [pc, #292]	; (8001714 <HAL_DMA_Abort+0x5ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d05e      	beq.n	80016b2 <HAL_DMA_Abort+0x58a>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a47      	ldr	r2, [pc, #284]	; (8001718 <HAL_DMA_Abort+0x5f0>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d059      	beq.n	80016b2 <HAL_DMA_Abort+0x58a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a46      	ldr	r2, [pc, #280]	; (800171c <HAL_DMA_Abort+0x5f4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d054      	beq.n	80016b2 <HAL_DMA_Abort+0x58a>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a44      	ldr	r2, [pc, #272]	; (8001720 <HAL_DMA_Abort+0x5f8>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d04f      	beq.n	80016b2 <HAL_DMA_Abort+0x58a>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a43      	ldr	r2, [pc, #268]	; (8001724 <HAL_DMA_Abort+0x5fc>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d04a      	beq.n	80016b2 <HAL_DMA_Abort+0x58a>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a41      	ldr	r2, [pc, #260]	; (8001728 <HAL_DMA_Abort+0x600>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d045      	beq.n	80016b2 <HAL_DMA_Abort+0x58a>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a40      	ldr	r2, [pc, #256]	; (800172c <HAL_DMA_Abort+0x604>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d040      	beq.n	80016b2 <HAL_DMA_Abort+0x58a>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a3e      	ldr	r2, [pc, #248]	; (8001730 <HAL_DMA_Abort+0x608>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d03b      	beq.n	80016b2 <HAL_DMA_Abort+0x58a>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a3d      	ldr	r2, [pc, #244]	; (8001734 <HAL_DMA_Abort+0x60c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d036      	beq.n	80016b2 <HAL_DMA_Abort+0x58a>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a3b      	ldr	r2, [pc, #236]	; (8001738 <HAL_DMA_Abort+0x610>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d031      	beq.n	80016b2 <HAL_DMA_Abort+0x58a>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a3a      	ldr	r2, [pc, #232]	; (800173c <HAL_DMA_Abort+0x614>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d02c      	beq.n	80016b2 <HAL_DMA_Abort+0x58a>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a38      	ldr	r2, [pc, #224]	; (8001740 <HAL_DMA_Abort+0x618>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d027      	beq.n	80016b2 <HAL_DMA_Abort+0x58a>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a37      	ldr	r2, [pc, #220]	; (8001744 <HAL_DMA_Abort+0x61c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d022      	beq.n	80016b2 <HAL_DMA_Abort+0x58a>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a35      	ldr	r2, [pc, #212]	; (8001748 <HAL_DMA_Abort+0x620>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d01d      	beq.n	80016b2 <HAL_DMA_Abort+0x58a>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a34      	ldr	r2, [pc, #208]	; (800174c <HAL_DMA_Abort+0x624>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d018      	beq.n	80016b2 <HAL_DMA_Abort+0x58a>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a32      	ldr	r2, [pc, #200]	; (8001750 <HAL_DMA_Abort+0x628>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d013      	beq.n	80016b2 <HAL_DMA_Abort+0x58a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a31      	ldr	r2, [pc, #196]	; (8001754 <HAL_DMA_Abort+0x62c>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d00e      	beq.n	80016b2 <HAL_DMA_Abort+0x58a>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a2f      	ldr	r2, [pc, #188]	; (8001758 <HAL_DMA_Abort+0x630>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d009      	beq.n	80016b2 <HAL_DMA_Abort+0x58a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a2e      	ldr	r2, [pc, #184]	; (800175c <HAL_DMA_Abort+0x634>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d004      	beq.n	80016b2 <HAL_DMA_Abort+0x58a>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a2c      	ldr	r2, [pc, #176]	; (8001760 <HAL_DMA_Abort+0x638>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d101      	bne.n	80016b6 <HAL_DMA_Abort+0x58e>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <HAL_DMA_Abort+0x590>
 80016b6:	2300      	movs	r3, #0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d015      	beq.n	80016e8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80016c4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00c      	beq.n	80016e8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016dc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80016e6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40020010 	.word	0x40020010
 8001708:	40020028 	.word	0x40020028
 800170c:	40020040 	.word	0x40020040
 8001710:	40020058 	.word	0x40020058
 8001714:	40020070 	.word	0x40020070
 8001718:	40020088 	.word	0x40020088
 800171c:	400200a0 	.word	0x400200a0
 8001720:	400200b8 	.word	0x400200b8
 8001724:	40020410 	.word	0x40020410
 8001728:	40020428 	.word	0x40020428
 800172c:	40020440 	.word	0x40020440
 8001730:	40020458 	.word	0x40020458
 8001734:	40020470 	.word	0x40020470
 8001738:	40020488 	.word	0x40020488
 800173c:	400204a0 	.word	0x400204a0
 8001740:	400204b8 	.word	0x400204b8
 8001744:	58025408 	.word	0x58025408
 8001748:	5802541c 	.word	0x5802541c
 800174c:	58025430 	.word	0x58025430
 8001750:	58025444 	.word	0x58025444
 8001754:	58025458 	.word	0x58025458
 8001758:	5802546c 	.word	0x5802546c
 800175c:	58025480 	.word	0x58025480
 8001760:	58025494 	.word	0x58025494

08001764 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e237      	b.n	8001be6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d004      	beq.n	800178c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2280      	movs	r2, #128	; 0x80
 8001786:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e22c      	b.n	8001be6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a5c      	ldr	r2, [pc, #368]	; (8001904 <HAL_DMA_Abort_IT+0x1a0>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d04a      	beq.n	800182c <HAL_DMA_Abort_IT+0xc8>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a5b      	ldr	r2, [pc, #364]	; (8001908 <HAL_DMA_Abort_IT+0x1a4>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d045      	beq.n	800182c <HAL_DMA_Abort_IT+0xc8>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a59      	ldr	r2, [pc, #356]	; (800190c <HAL_DMA_Abort_IT+0x1a8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d040      	beq.n	800182c <HAL_DMA_Abort_IT+0xc8>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a58      	ldr	r2, [pc, #352]	; (8001910 <HAL_DMA_Abort_IT+0x1ac>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d03b      	beq.n	800182c <HAL_DMA_Abort_IT+0xc8>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a56      	ldr	r2, [pc, #344]	; (8001914 <HAL_DMA_Abort_IT+0x1b0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d036      	beq.n	800182c <HAL_DMA_Abort_IT+0xc8>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a55      	ldr	r2, [pc, #340]	; (8001918 <HAL_DMA_Abort_IT+0x1b4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d031      	beq.n	800182c <HAL_DMA_Abort_IT+0xc8>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a53      	ldr	r2, [pc, #332]	; (800191c <HAL_DMA_Abort_IT+0x1b8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d02c      	beq.n	800182c <HAL_DMA_Abort_IT+0xc8>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a52      	ldr	r2, [pc, #328]	; (8001920 <HAL_DMA_Abort_IT+0x1bc>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d027      	beq.n	800182c <HAL_DMA_Abort_IT+0xc8>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a50      	ldr	r2, [pc, #320]	; (8001924 <HAL_DMA_Abort_IT+0x1c0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d022      	beq.n	800182c <HAL_DMA_Abort_IT+0xc8>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a4f      	ldr	r2, [pc, #316]	; (8001928 <HAL_DMA_Abort_IT+0x1c4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d01d      	beq.n	800182c <HAL_DMA_Abort_IT+0xc8>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a4d      	ldr	r2, [pc, #308]	; (800192c <HAL_DMA_Abort_IT+0x1c8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d018      	beq.n	800182c <HAL_DMA_Abort_IT+0xc8>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a4c      	ldr	r2, [pc, #304]	; (8001930 <HAL_DMA_Abort_IT+0x1cc>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d013      	beq.n	800182c <HAL_DMA_Abort_IT+0xc8>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a4a      	ldr	r2, [pc, #296]	; (8001934 <HAL_DMA_Abort_IT+0x1d0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d00e      	beq.n	800182c <HAL_DMA_Abort_IT+0xc8>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a49      	ldr	r2, [pc, #292]	; (8001938 <HAL_DMA_Abort_IT+0x1d4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d009      	beq.n	800182c <HAL_DMA_Abort_IT+0xc8>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a47      	ldr	r2, [pc, #284]	; (800193c <HAL_DMA_Abort_IT+0x1d8>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d004      	beq.n	800182c <HAL_DMA_Abort_IT+0xc8>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a46      	ldr	r2, [pc, #280]	; (8001940 <HAL_DMA_Abort_IT+0x1dc>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d101      	bne.n	8001830 <HAL_DMA_Abort_IT+0xcc>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <HAL_DMA_Abort_IT+0xce>
 8001830:	2300      	movs	r3, #0
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8086 	beq.w	8001944 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2204      	movs	r2, #4
 800183c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a2f      	ldr	r2, [pc, #188]	; (8001904 <HAL_DMA_Abort_IT+0x1a0>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d04a      	beq.n	80018e0 <HAL_DMA_Abort_IT+0x17c>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a2e      	ldr	r2, [pc, #184]	; (8001908 <HAL_DMA_Abort_IT+0x1a4>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d045      	beq.n	80018e0 <HAL_DMA_Abort_IT+0x17c>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a2c      	ldr	r2, [pc, #176]	; (800190c <HAL_DMA_Abort_IT+0x1a8>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d040      	beq.n	80018e0 <HAL_DMA_Abort_IT+0x17c>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a2b      	ldr	r2, [pc, #172]	; (8001910 <HAL_DMA_Abort_IT+0x1ac>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d03b      	beq.n	80018e0 <HAL_DMA_Abort_IT+0x17c>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a29      	ldr	r2, [pc, #164]	; (8001914 <HAL_DMA_Abort_IT+0x1b0>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d036      	beq.n	80018e0 <HAL_DMA_Abort_IT+0x17c>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a28      	ldr	r2, [pc, #160]	; (8001918 <HAL_DMA_Abort_IT+0x1b4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d031      	beq.n	80018e0 <HAL_DMA_Abort_IT+0x17c>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a26      	ldr	r2, [pc, #152]	; (800191c <HAL_DMA_Abort_IT+0x1b8>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d02c      	beq.n	80018e0 <HAL_DMA_Abort_IT+0x17c>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a25      	ldr	r2, [pc, #148]	; (8001920 <HAL_DMA_Abort_IT+0x1bc>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d027      	beq.n	80018e0 <HAL_DMA_Abort_IT+0x17c>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a23      	ldr	r2, [pc, #140]	; (8001924 <HAL_DMA_Abort_IT+0x1c0>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d022      	beq.n	80018e0 <HAL_DMA_Abort_IT+0x17c>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a22      	ldr	r2, [pc, #136]	; (8001928 <HAL_DMA_Abort_IT+0x1c4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d01d      	beq.n	80018e0 <HAL_DMA_Abort_IT+0x17c>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a20      	ldr	r2, [pc, #128]	; (800192c <HAL_DMA_Abort_IT+0x1c8>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d018      	beq.n	80018e0 <HAL_DMA_Abort_IT+0x17c>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a1f      	ldr	r2, [pc, #124]	; (8001930 <HAL_DMA_Abort_IT+0x1cc>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d013      	beq.n	80018e0 <HAL_DMA_Abort_IT+0x17c>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a1d      	ldr	r2, [pc, #116]	; (8001934 <HAL_DMA_Abort_IT+0x1d0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00e      	beq.n	80018e0 <HAL_DMA_Abort_IT+0x17c>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a1c      	ldr	r2, [pc, #112]	; (8001938 <HAL_DMA_Abort_IT+0x1d4>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d009      	beq.n	80018e0 <HAL_DMA_Abort_IT+0x17c>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a1a      	ldr	r2, [pc, #104]	; (800193c <HAL_DMA_Abort_IT+0x1d8>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d004      	beq.n	80018e0 <HAL_DMA_Abort_IT+0x17c>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a19      	ldr	r2, [pc, #100]	; (8001940 <HAL_DMA_Abort_IT+0x1dc>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d108      	bne.n	80018f2 <HAL_DMA_Abort_IT+0x18e>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0201 	bic.w	r2, r2, #1
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	e178      	b.n	8001be4 <HAL_DMA_Abort_IT+0x480>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0201 	bic.w	r2, r2, #1
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	e16f      	b.n	8001be4 <HAL_DMA_Abort_IT+0x480>
 8001904:	40020010 	.word	0x40020010
 8001908:	40020028 	.word	0x40020028
 800190c:	40020040 	.word	0x40020040
 8001910:	40020058 	.word	0x40020058
 8001914:	40020070 	.word	0x40020070
 8001918:	40020088 	.word	0x40020088
 800191c:	400200a0 	.word	0x400200a0
 8001920:	400200b8 	.word	0x400200b8
 8001924:	40020410 	.word	0x40020410
 8001928:	40020428 	.word	0x40020428
 800192c:	40020440 	.word	0x40020440
 8001930:	40020458 	.word	0x40020458
 8001934:	40020470 	.word	0x40020470
 8001938:	40020488 	.word	0x40020488
 800193c:	400204a0 	.word	0x400204a0
 8001940:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 020e 	bic.w	r2, r2, #14
 8001952:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a6c      	ldr	r2, [pc, #432]	; (8001b0c <HAL_DMA_Abort_IT+0x3a8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d04a      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x290>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a6b      	ldr	r2, [pc, #428]	; (8001b10 <HAL_DMA_Abort_IT+0x3ac>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d045      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x290>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a69      	ldr	r2, [pc, #420]	; (8001b14 <HAL_DMA_Abort_IT+0x3b0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d040      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x290>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a68      	ldr	r2, [pc, #416]	; (8001b18 <HAL_DMA_Abort_IT+0x3b4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d03b      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x290>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a66      	ldr	r2, [pc, #408]	; (8001b1c <HAL_DMA_Abort_IT+0x3b8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d036      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x290>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a65      	ldr	r2, [pc, #404]	; (8001b20 <HAL_DMA_Abort_IT+0x3bc>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d031      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x290>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a63      	ldr	r2, [pc, #396]	; (8001b24 <HAL_DMA_Abort_IT+0x3c0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d02c      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x290>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a62      	ldr	r2, [pc, #392]	; (8001b28 <HAL_DMA_Abort_IT+0x3c4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d027      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x290>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a60      	ldr	r2, [pc, #384]	; (8001b2c <HAL_DMA_Abort_IT+0x3c8>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d022      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x290>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a5f      	ldr	r2, [pc, #380]	; (8001b30 <HAL_DMA_Abort_IT+0x3cc>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d01d      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x290>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a5d      	ldr	r2, [pc, #372]	; (8001b34 <HAL_DMA_Abort_IT+0x3d0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d018      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x290>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a5c      	ldr	r2, [pc, #368]	; (8001b38 <HAL_DMA_Abort_IT+0x3d4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d013      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x290>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a5a      	ldr	r2, [pc, #360]	; (8001b3c <HAL_DMA_Abort_IT+0x3d8>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d00e      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x290>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a59      	ldr	r2, [pc, #356]	; (8001b40 <HAL_DMA_Abort_IT+0x3dc>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d009      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x290>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a57      	ldr	r2, [pc, #348]	; (8001b44 <HAL_DMA_Abort_IT+0x3e0>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d004      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x290>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a56      	ldr	r2, [pc, #344]	; (8001b48 <HAL_DMA_Abort_IT+0x3e4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d108      	bne.n	8001a06 <HAL_DMA_Abort_IT+0x2a2>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0201 	bic.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	e007      	b.n	8001a16 <HAL_DMA_Abort_IT+0x2b2>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0201 	bic.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a3c      	ldr	r2, [pc, #240]	; (8001b0c <HAL_DMA_Abort_IT+0x3a8>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d072      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x3a2>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a3a      	ldr	r2, [pc, #232]	; (8001b10 <HAL_DMA_Abort_IT+0x3ac>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d06d      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x3a2>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a39      	ldr	r2, [pc, #228]	; (8001b14 <HAL_DMA_Abort_IT+0x3b0>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d068      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x3a2>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a37      	ldr	r2, [pc, #220]	; (8001b18 <HAL_DMA_Abort_IT+0x3b4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d063      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x3a2>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a36      	ldr	r2, [pc, #216]	; (8001b1c <HAL_DMA_Abort_IT+0x3b8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d05e      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x3a2>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a34      	ldr	r2, [pc, #208]	; (8001b20 <HAL_DMA_Abort_IT+0x3bc>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d059      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x3a2>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a33      	ldr	r2, [pc, #204]	; (8001b24 <HAL_DMA_Abort_IT+0x3c0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d054      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x3a2>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a31      	ldr	r2, [pc, #196]	; (8001b28 <HAL_DMA_Abort_IT+0x3c4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d04f      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x3a2>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a30      	ldr	r2, [pc, #192]	; (8001b2c <HAL_DMA_Abort_IT+0x3c8>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d04a      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x3a2>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2e      	ldr	r2, [pc, #184]	; (8001b30 <HAL_DMA_Abort_IT+0x3cc>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d045      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x3a2>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a2d      	ldr	r2, [pc, #180]	; (8001b34 <HAL_DMA_Abort_IT+0x3d0>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d040      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x3a2>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a2b      	ldr	r2, [pc, #172]	; (8001b38 <HAL_DMA_Abort_IT+0x3d4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d03b      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x3a2>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a2a      	ldr	r2, [pc, #168]	; (8001b3c <HAL_DMA_Abort_IT+0x3d8>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d036      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x3a2>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a28      	ldr	r2, [pc, #160]	; (8001b40 <HAL_DMA_Abort_IT+0x3dc>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d031      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x3a2>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a27      	ldr	r2, [pc, #156]	; (8001b44 <HAL_DMA_Abort_IT+0x3e0>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d02c      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x3a2>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a25      	ldr	r2, [pc, #148]	; (8001b48 <HAL_DMA_Abort_IT+0x3e4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d027      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x3a2>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a24      	ldr	r2, [pc, #144]	; (8001b4c <HAL_DMA_Abort_IT+0x3e8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d022      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x3a2>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a22      	ldr	r2, [pc, #136]	; (8001b50 <HAL_DMA_Abort_IT+0x3ec>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d01d      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x3a2>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a21      	ldr	r2, [pc, #132]	; (8001b54 <HAL_DMA_Abort_IT+0x3f0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d018      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x3a2>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a1f      	ldr	r2, [pc, #124]	; (8001b58 <HAL_DMA_Abort_IT+0x3f4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d013      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x3a2>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a1e      	ldr	r2, [pc, #120]	; (8001b5c <HAL_DMA_Abort_IT+0x3f8>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d00e      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x3a2>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a1c      	ldr	r2, [pc, #112]	; (8001b60 <HAL_DMA_Abort_IT+0x3fc>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d009      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x3a2>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a1b      	ldr	r2, [pc, #108]	; (8001b64 <HAL_DMA_Abort_IT+0x400>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d004      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x3a2>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a19      	ldr	r2, [pc, #100]	; (8001b68 <HAL_DMA_Abort_IT+0x404>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d132      	bne.n	8001b6c <HAL_DMA_Abort_IT+0x408>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e031      	b.n	8001b6e <HAL_DMA_Abort_IT+0x40a>
 8001b0a:	bf00      	nop
 8001b0c:	40020010 	.word	0x40020010
 8001b10:	40020028 	.word	0x40020028
 8001b14:	40020040 	.word	0x40020040
 8001b18:	40020058 	.word	0x40020058
 8001b1c:	40020070 	.word	0x40020070
 8001b20:	40020088 	.word	0x40020088
 8001b24:	400200a0 	.word	0x400200a0
 8001b28:	400200b8 	.word	0x400200b8
 8001b2c:	40020410 	.word	0x40020410
 8001b30:	40020428 	.word	0x40020428
 8001b34:	40020440 	.word	0x40020440
 8001b38:	40020458 	.word	0x40020458
 8001b3c:	40020470 	.word	0x40020470
 8001b40:	40020488 	.word	0x40020488
 8001b44:	400204a0 	.word	0x400204a0
 8001b48:	400204b8 	.word	0x400204b8
 8001b4c:	58025408 	.word	0x58025408
 8001b50:	5802541c 	.word	0x5802541c
 8001b54:	58025430 	.word	0x58025430
 8001b58:	58025444 	.word	0x58025444
 8001b5c:	58025458 	.word	0x58025458
 8001b60:	5802546c 	.word	0x5802546c
 8001b64:	58025480 	.word	0x58025480
 8001b68:	58025494 	.word	0x58025494
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d028      	beq.n	8001bc4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b80:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b86:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	2201      	movs	r2, #1
 8001b92:	409a      	lsls	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ba0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00c      	beq.n	8001bc4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bb8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001bc2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop

08001bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001bfe:	4b89      	ldr	r3, [pc, #548]	; (8001e24 <HAL_GPIO_Init+0x234>)
 8001c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c02:	e194      	b.n	8001f2e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2101      	movs	r1, #1
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8186 	beq.w	8001f28 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d005      	beq.n	8001c34 <HAL_GPIO_Init+0x44>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d130      	bne.n	8001c96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	091b      	lsrs	r3, r3, #4
 8001c80:	f003 0201 	and.w	r2, r3, #1
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d017      	beq.n	8001cd2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	2203      	movs	r2, #3
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d123      	bne.n	8001d26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	08da      	lsrs	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3208      	adds	r2, #8
 8001ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	220f      	movs	r2, #15
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	691a      	ldr	r2, [r3, #16]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	08da      	lsrs	r2, r3, #3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3208      	adds	r2, #8
 8001d20:	69b9      	ldr	r1, [r7, #24]
 8001d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	2203      	movs	r2, #3
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0203 	and.w	r2, r3, #3
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 80e0 	beq.w	8001f28 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d68:	4b2f      	ldr	r3, [pc, #188]	; (8001e28 <HAL_GPIO_Init+0x238>)
 8001d6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d6e:	4a2e      	ldr	r2, [pc, #184]	; (8001e28 <HAL_GPIO_Init+0x238>)
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d78:	4b2b      	ldr	r3, [pc, #172]	; (8001e28 <HAL_GPIO_Init+0x238>)
 8001d7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d86:	4a29      	ldr	r2, [pc, #164]	; (8001e2c <HAL_GPIO_Init+0x23c>)
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	089b      	lsrs	r3, r3, #2
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	220f      	movs	r2, #15
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a20      	ldr	r2, [pc, #128]	; (8001e30 <HAL_GPIO_Init+0x240>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d052      	beq.n	8001e58 <HAL_GPIO_Init+0x268>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a1f      	ldr	r2, [pc, #124]	; (8001e34 <HAL_GPIO_Init+0x244>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d031      	beq.n	8001e1e <HAL_GPIO_Init+0x22e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a1e      	ldr	r2, [pc, #120]	; (8001e38 <HAL_GPIO_Init+0x248>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d02b      	beq.n	8001e1a <HAL_GPIO_Init+0x22a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <HAL_GPIO_Init+0x24c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d025      	beq.n	8001e16 <HAL_GPIO_Init+0x226>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a1c      	ldr	r2, [pc, #112]	; (8001e40 <HAL_GPIO_Init+0x250>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d01f      	beq.n	8001e12 <HAL_GPIO_Init+0x222>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a1b      	ldr	r2, [pc, #108]	; (8001e44 <HAL_GPIO_Init+0x254>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d019      	beq.n	8001e0e <HAL_GPIO_Init+0x21e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a1a      	ldr	r2, [pc, #104]	; (8001e48 <HAL_GPIO_Init+0x258>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d013      	beq.n	8001e0a <HAL_GPIO_Init+0x21a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a19      	ldr	r2, [pc, #100]	; (8001e4c <HAL_GPIO_Init+0x25c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d00d      	beq.n	8001e06 <HAL_GPIO_Init+0x216>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a18      	ldr	r2, [pc, #96]	; (8001e50 <HAL_GPIO_Init+0x260>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d007      	beq.n	8001e02 <HAL_GPIO_Init+0x212>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a17      	ldr	r2, [pc, #92]	; (8001e54 <HAL_GPIO_Init+0x264>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d101      	bne.n	8001dfe <HAL_GPIO_Init+0x20e>
 8001dfa:	2309      	movs	r3, #9
 8001dfc:	e02d      	b.n	8001e5a <HAL_GPIO_Init+0x26a>
 8001dfe:	230a      	movs	r3, #10
 8001e00:	e02b      	b.n	8001e5a <HAL_GPIO_Init+0x26a>
 8001e02:	2308      	movs	r3, #8
 8001e04:	e029      	b.n	8001e5a <HAL_GPIO_Init+0x26a>
 8001e06:	2307      	movs	r3, #7
 8001e08:	e027      	b.n	8001e5a <HAL_GPIO_Init+0x26a>
 8001e0a:	2306      	movs	r3, #6
 8001e0c:	e025      	b.n	8001e5a <HAL_GPIO_Init+0x26a>
 8001e0e:	2305      	movs	r3, #5
 8001e10:	e023      	b.n	8001e5a <HAL_GPIO_Init+0x26a>
 8001e12:	2304      	movs	r3, #4
 8001e14:	e021      	b.n	8001e5a <HAL_GPIO_Init+0x26a>
 8001e16:	2303      	movs	r3, #3
 8001e18:	e01f      	b.n	8001e5a <HAL_GPIO_Init+0x26a>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e01d      	b.n	8001e5a <HAL_GPIO_Init+0x26a>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e01b      	b.n	8001e5a <HAL_GPIO_Init+0x26a>
 8001e22:	bf00      	nop
 8001e24:	58000080 	.word	0x58000080
 8001e28:	58024400 	.word	0x58024400
 8001e2c:	58000400 	.word	0x58000400
 8001e30:	58020000 	.word	0x58020000
 8001e34:	58020400 	.word	0x58020400
 8001e38:	58020800 	.word	0x58020800
 8001e3c:	58020c00 	.word	0x58020c00
 8001e40:	58021000 	.word	0x58021000
 8001e44:	58021400 	.word	0x58021400
 8001e48:	58021800 	.word	0x58021800
 8001e4c:	58021c00 	.word	0x58021c00
 8001e50:	58022000 	.word	0x58022000
 8001e54:	58022400 	.word	0x58022400
 8001e58:	2300      	movs	r3, #0
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	f002 0203 	and.w	r2, r2, #3
 8001e60:	0092      	lsls	r2, r2, #2
 8001e62:	4093      	lsls	r3, r2
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e6a:	4938      	ldr	r1, [pc, #224]	; (8001f4c <HAL_GPIO_Init+0x35c>)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	089b      	lsrs	r3, r3, #2
 8001e70:	3302      	adds	r3, #2
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ecc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f47f ae63 	bne.w	8001c04 <HAL_GPIO_Init+0x14>
  }
}
 8001f3e:	bf00      	nop
 8001f40:	bf00      	nop
 8001f42:	3724      	adds	r7, #36	; 0x24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	58000400 	.word	0x58000400

08001f50 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001f58:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <HAL_PWREx_ConfigSupply+0x70>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d00a      	beq.n	8001f7a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001f64:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <HAL_PWREx_ConfigSupply+0x70>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d001      	beq.n	8001f76 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e01f      	b.n	8001fb6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e01d      	b.n	8001fb6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_PWREx_ConfigSupply+0x70>)
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f023 0207 	bic.w	r2, r3, #7
 8001f82:	490f      	ldr	r1, [pc, #60]	; (8001fc0 <HAL_PWREx_ConfigSupply+0x70>)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001f8a:	f7fe ffa5 	bl	8000ed8 <HAL_GetTick>
 8001f8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f90:	e009      	b.n	8001fa6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f92:	f7fe ffa1 	bl	8000ed8 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fa0:	d901      	bls.n	8001fa6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e007      	b.n	8001fb6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_PWREx_ConfigSupply+0x70>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fb2:	d1ee      	bne.n	8001f92 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	58024800 	.word	0x58024800

08001fc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08c      	sub	sp, #48	; 0x30
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d102      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	f000 bc1d 	b.w	8002812 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 8087 	beq.w	80020f4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fe6:	4b99      	ldr	r3, [pc, #612]	; (800224c <HAL_RCC_OscConfig+0x288>)
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ff0:	4b96      	ldr	r3, [pc, #600]	; (800224c <HAL_RCC_OscConfig+0x288>)
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff8:	2b10      	cmp	r3, #16
 8001ffa:	d007      	beq.n	800200c <HAL_RCC_OscConfig+0x48>
 8001ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffe:	2b18      	cmp	r3, #24
 8002000:	d110      	bne.n	8002024 <HAL_RCC_OscConfig+0x60>
 8002002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d10b      	bne.n	8002024 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200c:	4b8f      	ldr	r3, [pc, #572]	; (800224c <HAL_RCC_OscConfig+0x288>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d06c      	beq.n	80020f2 <HAL_RCC_OscConfig+0x12e>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d168      	bne.n	80020f2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e3f6      	b.n	8002812 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202c:	d106      	bne.n	800203c <HAL_RCC_OscConfig+0x78>
 800202e:	4b87      	ldr	r3, [pc, #540]	; (800224c <HAL_RCC_OscConfig+0x288>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a86      	ldr	r2, [pc, #536]	; (800224c <HAL_RCC_OscConfig+0x288>)
 8002034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	e02e      	b.n	800209a <HAL_RCC_OscConfig+0xd6>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10c      	bne.n	800205e <HAL_RCC_OscConfig+0x9a>
 8002044:	4b81      	ldr	r3, [pc, #516]	; (800224c <HAL_RCC_OscConfig+0x288>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a80      	ldr	r2, [pc, #512]	; (800224c <HAL_RCC_OscConfig+0x288>)
 800204a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b7e      	ldr	r3, [pc, #504]	; (800224c <HAL_RCC_OscConfig+0x288>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a7d      	ldr	r2, [pc, #500]	; (800224c <HAL_RCC_OscConfig+0x288>)
 8002056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	e01d      	b.n	800209a <HAL_RCC_OscConfig+0xd6>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002066:	d10c      	bne.n	8002082 <HAL_RCC_OscConfig+0xbe>
 8002068:	4b78      	ldr	r3, [pc, #480]	; (800224c <HAL_RCC_OscConfig+0x288>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a77      	ldr	r2, [pc, #476]	; (800224c <HAL_RCC_OscConfig+0x288>)
 800206e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4b75      	ldr	r3, [pc, #468]	; (800224c <HAL_RCC_OscConfig+0x288>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a74      	ldr	r2, [pc, #464]	; (800224c <HAL_RCC_OscConfig+0x288>)
 800207a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	e00b      	b.n	800209a <HAL_RCC_OscConfig+0xd6>
 8002082:	4b72      	ldr	r3, [pc, #456]	; (800224c <HAL_RCC_OscConfig+0x288>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a71      	ldr	r2, [pc, #452]	; (800224c <HAL_RCC_OscConfig+0x288>)
 8002088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	4b6f      	ldr	r3, [pc, #444]	; (800224c <HAL_RCC_OscConfig+0x288>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a6e      	ldr	r2, [pc, #440]	; (800224c <HAL_RCC_OscConfig+0x288>)
 8002094:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002098:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d013      	beq.n	80020ca <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a2:	f7fe ff19 	bl	8000ed8 <HAL_GetTick>
 80020a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020aa:	f7fe ff15 	bl	8000ed8 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b64      	cmp	r3, #100	; 0x64
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e3aa      	b.n	8002812 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020bc:	4b63      	ldr	r3, [pc, #396]	; (800224c <HAL_RCC_OscConfig+0x288>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0xe6>
 80020c8:	e014      	b.n	80020f4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ca:	f7fe ff05 	bl	8000ed8 <HAL_GetTick>
 80020ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d2:	f7fe ff01 	bl	8000ed8 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b64      	cmp	r3, #100	; 0x64
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e396      	b.n	8002812 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020e4:	4b59      	ldr	r3, [pc, #356]	; (800224c <HAL_RCC_OscConfig+0x288>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f0      	bne.n	80020d2 <HAL_RCC_OscConfig+0x10e>
 80020f0:	e000      	b.n	80020f4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80cb 	beq.w	8002298 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002102:	4b52      	ldr	r3, [pc, #328]	; (800224c <HAL_RCC_OscConfig+0x288>)
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800210a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800210c:	4b4f      	ldr	r3, [pc, #316]	; (800224c <HAL_RCC_OscConfig+0x288>)
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d007      	beq.n	8002128 <HAL_RCC_OscConfig+0x164>
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	2b18      	cmp	r3, #24
 800211c:	d156      	bne.n	80021cc <HAL_RCC_OscConfig+0x208>
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d151      	bne.n	80021cc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002128:	4b48      	ldr	r3, [pc, #288]	; (800224c <HAL_RCC_OscConfig+0x288>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_RCC_OscConfig+0x17c>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e368      	b.n	8002812 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002140:	4b42      	ldr	r3, [pc, #264]	; (800224c <HAL_RCC_OscConfig+0x288>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f023 0219 	bic.w	r2, r3, #25
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	493f      	ldr	r1, [pc, #252]	; (800224c <HAL_RCC_OscConfig+0x288>)
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002152:	f7fe fec1 	bl	8000ed8 <HAL_GetTick>
 8002156:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800215a:	f7fe febd 	bl	8000ed8 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e352      	b.n	8002812 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800216c:	4b37      	ldr	r3, [pc, #220]	; (800224c <HAL_RCC_OscConfig+0x288>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002178:	f7fe feba 	bl	8000ef0 <HAL_GetREVID>
 800217c:	4603      	mov	r3, r0
 800217e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002182:	4293      	cmp	r3, r2
 8002184:	d817      	bhi.n	80021b6 <HAL_RCC_OscConfig+0x1f2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	2b40      	cmp	r3, #64	; 0x40
 800218c:	d108      	bne.n	80021a0 <HAL_RCC_OscConfig+0x1dc>
 800218e:	4b2f      	ldr	r3, [pc, #188]	; (800224c <HAL_RCC_OscConfig+0x288>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002196:	4a2d      	ldr	r2, [pc, #180]	; (800224c <HAL_RCC_OscConfig+0x288>)
 8002198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800219c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800219e:	e07b      	b.n	8002298 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a0:	4b2a      	ldr	r3, [pc, #168]	; (800224c <HAL_RCC_OscConfig+0x288>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	031b      	lsls	r3, r3, #12
 80021ae:	4927      	ldr	r1, [pc, #156]	; (800224c <HAL_RCC_OscConfig+0x288>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021b4:	e070      	b.n	8002298 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b6:	4b25      	ldr	r3, [pc, #148]	; (800224c <HAL_RCC_OscConfig+0x288>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	061b      	lsls	r3, r3, #24
 80021c4:	4921      	ldr	r1, [pc, #132]	; (800224c <HAL_RCC_OscConfig+0x288>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021ca:	e065      	b.n	8002298 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d048      	beq.n	8002266 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021d4:	4b1d      	ldr	r3, [pc, #116]	; (800224c <HAL_RCC_OscConfig+0x288>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f023 0219 	bic.w	r2, r3, #25
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	491a      	ldr	r1, [pc, #104]	; (800224c <HAL_RCC_OscConfig+0x288>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e6:	f7fe fe77 	bl	8000ed8 <HAL_GetTick>
 80021ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ee:	f7fe fe73 	bl	8000ed8 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e308      	b.n	8002812 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_RCC_OscConfig+0x288>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0f0      	beq.n	80021ee <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220c:	f7fe fe70 	bl	8000ef0 <HAL_GetREVID>
 8002210:	4603      	mov	r3, r0
 8002212:	f241 0203 	movw	r2, #4099	; 0x1003
 8002216:	4293      	cmp	r3, r2
 8002218:	d81a      	bhi.n	8002250 <HAL_RCC_OscConfig+0x28c>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b40      	cmp	r3, #64	; 0x40
 8002220:	d108      	bne.n	8002234 <HAL_RCC_OscConfig+0x270>
 8002222:	4b0a      	ldr	r3, [pc, #40]	; (800224c <HAL_RCC_OscConfig+0x288>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800222a:	4a08      	ldr	r2, [pc, #32]	; (800224c <HAL_RCC_OscConfig+0x288>)
 800222c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002230:	6053      	str	r3, [r2, #4]
 8002232:	e031      	b.n	8002298 <HAL_RCC_OscConfig+0x2d4>
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_RCC_OscConfig+0x288>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	031b      	lsls	r3, r3, #12
 8002242:	4902      	ldr	r1, [pc, #8]	; (800224c <HAL_RCC_OscConfig+0x288>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
 8002248:	e026      	b.n	8002298 <HAL_RCC_OscConfig+0x2d4>
 800224a:	bf00      	nop
 800224c:	58024400 	.word	0x58024400
 8002250:	4b9a      	ldr	r3, [pc, #616]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	061b      	lsls	r3, r3, #24
 800225e:	4997      	ldr	r1, [pc, #604]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
 8002264:	e018      	b.n	8002298 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002266:	4b95      	ldr	r3, [pc, #596]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a94      	ldr	r2, [pc, #592]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 800226c:	f023 0301 	bic.w	r3, r3, #1
 8002270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002272:	f7fe fe31 	bl	8000ed8 <HAL_GetTick>
 8002276:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800227a:	f7fe fe2d 	bl	8000ed8 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e2c2      	b.n	8002812 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800228c:	4b8b      	ldr	r3, [pc, #556]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1f0      	bne.n	800227a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0310 	and.w	r3, r3, #16
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80a9 	beq.w	80023f8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a6:	4b85      	ldr	r3, [pc, #532]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022ae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022b0:	4b82      	ldr	r3, [pc, #520]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d007      	beq.n	80022cc <HAL_RCC_OscConfig+0x308>
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	2b18      	cmp	r3, #24
 80022c0:	d13a      	bne.n	8002338 <HAL_RCC_OscConfig+0x374>
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d135      	bne.n	8002338 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022cc:	4b7b      	ldr	r3, [pc, #492]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_OscConfig+0x320>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	2b80      	cmp	r3, #128	; 0x80
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e296      	b.n	8002812 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022e4:	f7fe fe04 	bl	8000ef0 <HAL_GetREVID>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d817      	bhi.n	8002322 <HAL_RCC_OscConfig+0x35e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	2b20      	cmp	r3, #32
 80022f8:	d108      	bne.n	800230c <HAL_RCC_OscConfig+0x348>
 80022fa:	4b70      	ldr	r3, [pc, #448]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002302:	4a6e      	ldr	r2, [pc, #440]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 8002304:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002308:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800230a:	e075      	b.n	80023f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800230c:	4b6b      	ldr	r3, [pc, #428]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	069b      	lsls	r3, r3, #26
 800231a:	4968      	ldr	r1, [pc, #416]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002320:	e06a      	b.n	80023f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002322:	4b66      	ldr	r3, [pc, #408]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	061b      	lsls	r3, r3, #24
 8002330:	4962      	ldr	r1, [pc, #392]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 8002332:	4313      	orrs	r3, r2
 8002334:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002336:	e05f      	b.n	80023f8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d042      	beq.n	80023c6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002340:	4b5e      	ldr	r3, [pc, #376]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a5d      	ldr	r2, [pc, #372]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 8002346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800234a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7fe fdc4 	bl	8000ed8 <HAL_GetTick>
 8002350:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002354:	f7fe fdc0 	bl	8000ed8 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e255      	b.n	8002812 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002366:	4b55      	ldr	r3, [pc, #340]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002372:	f7fe fdbd 	bl	8000ef0 <HAL_GetREVID>
 8002376:	4603      	mov	r3, r0
 8002378:	f241 0203 	movw	r2, #4099	; 0x1003
 800237c:	4293      	cmp	r3, r2
 800237e:	d817      	bhi.n	80023b0 <HAL_RCC_OscConfig+0x3ec>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	2b20      	cmp	r3, #32
 8002386:	d108      	bne.n	800239a <HAL_RCC_OscConfig+0x3d6>
 8002388:	4b4c      	ldr	r3, [pc, #304]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002390:	4a4a      	ldr	r2, [pc, #296]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 8002392:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002396:	6053      	str	r3, [r2, #4]
 8002398:	e02e      	b.n	80023f8 <HAL_RCC_OscConfig+0x434>
 800239a:	4b48      	ldr	r3, [pc, #288]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	069b      	lsls	r3, r3, #26
 80023a8:	4944      	ldr	r1, [pc, #272]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]
 80023ae:	e023      	b.n	80023f8 <HAL_RCC_OscConfig+0x434>
 80023b0:	4b42      	ldr	r3, [pc, #264]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	061b      	lsls	r3, r3, #24
 80023be:	493f      	ldr	r1, [pc, #252]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60cb      	str	r3, [r1, #12]
 80023c4:	e018      	b.n	80023f8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80023c6:	4b3d      	ldr	r3, [pc, #244]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a3c      	ldr	r2, [pc, #240]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 80023cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d2:	f7fe fd81 	bl	8000ed8 <HAL_GetTick>
 80023d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80023da:	f7fe fd7d 	bl	8000ed8 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e212      	b.n	8002812 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80023ec:	4b33      	ldr	r3, [pc, #204]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f0      	bne.n	80023da <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b00      	cmp	r3, #0
 8002402:	d036      	beq.n	8002472 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d019      	beq.n	8002440 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240c:	4b2b      	ldr	r3, [pc, #172]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 800240e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002410:	4a2a      	ldr	r2, [pc, #168]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7fe fd5e 	bl	8000ed8 <HAL_GetTick>
 800241c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002420:	f7fe fd5a 	bl	8000ed8 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1ef      	b.n	8002812 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002432:	4b22      	ldr	r3, [pc, #136]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 8002434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x45c>
 800243e:	e018      	b.n	8002472 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002440:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 8002442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002444:	4a1d      	ldr	r2, [pc, #116]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 8002446:	f023 0301 	bic.w	r3, r3, #1
 800244a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244c:	f7fe fd44 	bl	8000ed8 <HAL_GetTick>
 8002450:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002454:	f7fe fd40 	bl	8000ed8 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e1d5      	b.n	8002812 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 8002468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0320 	and.w	r3, r3, #32
 800247a:	2b00      	cmp	r3, #0
 800247c:	d039      	beq.n	80024f2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d01c      	beq.n	80024c0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002486:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a0c      	ldr	r2, [pc, #48]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 800248c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002490:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002492:	f7fe fd21 	bl	8000ed8 <HAL_GetTick>
 8002496:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800249a:	f7fe fd1d 	bl	8000ed8 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e1b2      	b.n	8002812 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024ac:	4b03      	ldr	r3, [pc, #12]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x4d6>
 80024b8:	e01b      	b.n	80024f2 <HAL_RCC_OscConfig+0x52e>
 80024ba:	bf00      	nop
 80024bc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024c0:	4b9b      	ldr	r3, [pc, #620]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a9a      	ldr	r2, [pc, #616]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 80024c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80024cc:	f7fe fd04 	bl	8000ed8 <HAL_GetTick>
 80024d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80024d4:	f7fe fd00 	bl	8000ed8 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e195      	b.n	8002812 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024e6:	4b92      	ldr	r3, [pc, #584]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 8081 	beq.w	8002602 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002500:	4b8c      	ldr	r3, [pc, #560]	; (8002734 <HAL_RCC_OscConfig+0x770>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a8b      	ldr	r2, [pc, #556]	; (8002734 <HAL_RCC_OscConfig+0x770>)
 8002506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800250c:	f7fe fce4 	bl	8000ed8 <HAL_GetTick>
 8002510:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002514:	f7fe fce0 	bl	8000ed8 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	; 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e175      	b.n	8002812 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002526:	4b83      	ldr	r3, [pc, #524]	; (8002734 <HAL_RCC_OscConfig+0x770>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d106      	bne.n	8002548 <HAL_RCC_OscConfig+0x584>
 800253a:	4b7d      	ldr	r3, [pc, #500]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	4a7c      	ldr	r2, [pc, #496]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	6713      	str	r3, [r2, #112]	; 0x70
 8002546:	e02d      	b.n	80025a4 <HAL_RCC_OscConfig+0x5e0>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10c      	bne.n	800256a <HAL_RCC_OscConfig+0x5a6>
 8002550:	4b77      	ldr	r3, [pc, #476]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	4a76      	ldr	r2, [pc, #472]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 8002556:	f023 0301 	bic.w	r3, r3, #1
 800255a:	6713      	str	r3, [r2, #112]	; 0x70
 800255c:	4b74      	ldr	r3, [pc, #464]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002560:	4a73      	ldr	r2, [pc, #460]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 8002562:	f023 0304 	bic.w	r3, r3, #4
 8002566:	6713      	str	r3, [r2, #112]	; 0x70
 8002568:	e01c      	b.n	80025a4 <HAL_RCC_OscConfig+0x5e0>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b05      	cmp	r3, #5
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0x5c8>
 8002572:	4b6f      	ldr	r3, [pc, #444]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002576:	4a6e      	ldr	r2, [pc, #440]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 8002578:	f043 0304 	orr.w	r3, r3, #4
 800257c:	6713      	str	r3, [r2, #112]	; 0x70
 800257e:	4b6c      	ldr	r3, [pc, #432]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 8002580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002582:	4a6b      	ldr	r2, [pc, #428]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6713      	str	r3, [r2, #112]	; 0x70
 800258a:	e00b      	b.n	80025a4 <HAL_RCC_OscConfig+0x5e0>
 800258c:	4b68      	ldr	r3, [pc, #416]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 800258e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002590:	4a67      	ldr	r2, [pc, #412]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 8002592:	f023 0301 	bic.w	r3, r3, #1
 8002596:	6713      	str	r3, [r2, #112]	; 0x70
 8002598:	4b65      	ldr	r3, [pc, #404]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	4a64      	ldr	r2, [pc, #400]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 800259e:	f023 0304 	bic.w	r3, r3, #4
 80025a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d015      	beq.n	80025d8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ac:	f7fe fc94 	bl	8000ed8 <HAL_GetTick>
 80025b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025b2:	e00a      	b.n	80025ca <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b4:	f7fe fc90 	bl	8000ed8 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e123      	b.n	8002812 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025ca:	4b59      	ldr	r3, [pc, #356]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0ee      	beq.n	80025b4 <HAL_RCC_OscConfig+0x5f0>
 80025d6:	e014      	b.n	8002602 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d8:	f7fe fc7e 	bl	8000ed8 <HAL_GetTick>
 80025dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025de:	e00a      	b.n	80025f6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025e0:	f7fe fc7a 	bl	8000ed8 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e10d      	b.n	8002812 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025f6:	4b4e      	ldr	r3, [pc, #312]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1ee      	bne.n	80025e0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 8102 	beq.w	8002810 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800260c:	4b48      	ldr	r3, [pc, #288]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002614:	2b18      	cmp	r3, #24
 8002616:	f000 80bd 	beq.w	8002794 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	2b02      	cmp	r3, #2
 8002620:	f040 809e 	bne.w	8002760 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002624:	4b42      	ldr	r3, [pc, #264]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a41      	ldr	r2, [pc, #260]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 800262a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800262e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7fe fc52 	bl	8000ed8 <HAL_GetTick>
 8002634:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002638:	f7fe fc4e 	bl	8000ed8 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e0e3      	b.n	8002812 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800264a:	4b39      	ldr	r3, [pc, #228]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002656:	4b36      	ldr	r3, [pc, #216]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 8002658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800265a:	4b37      	ldr	r3, [pc, #220]	; (8002738 <HAL_RCC_OscConfig+0x774>)
 800265c:	4013      	ands	r3, r2
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002666:	0112      	lsls	r2, r2, #4
 8002668:	430a      	orrs	r2, r1
 800266a:	4931      	ldr	r1, [pc, #196]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 800266c:	4313      	orrs	r3, r2
 800266e:	628b      	str	r3, [r1, #40]	; 0x28
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	3b01      	subs	r3, #1
 8002676:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267e:	3b01      	subs	r3, #1
 8002680:	025b      	lsls	r3, r3, #9
 8002682:	b29b      	uxth	r3, r3
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268a:	3b01      	subs	r3, #1
 800268c:	041b      	lsls	r3, r3, #16
 800268e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002698:	3b01      	subs	r3, #1
 800269a:	061b      	lsls	r3, r3, #24
 800269c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80026a0:	4923      	ldr	r1, [pc, #140]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80026a6:	4b22      	ldr	r3, [pc, #136]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 80026a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026aa:	4a21      	ldr	r2, [pc, #132]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80026b2:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 80026b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026b6:	4b21      	ldr	r3, [pc, #132]	; (800273c <HAL_RCC_OscConfig+0x778>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026be:	00d2      	lsls	r2, r2, #3
 80026c0:	491b      	ldr	r1, [pc, #108]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80026c6:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ca:	f023 020c 	bic.w	r2, r3, #12
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	4917      	ldr	r1, [pc, #92]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80026d8:	4b15      	ldr	r3, [pc, #84]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	f023 0202 	bic.w	r2, r3, #2
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	4912      	ldr	r1, [pc, #72]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80026ea:	4b11      	ldr	r3, [pc, #68]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	4a10      	ldr	r2, [pc, #64]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 80026f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fa:	4a0d      	ldr	r2, [pc, #52]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 80026fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002700:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 8002704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002706:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 8002708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800270c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	4a07      	ldr	r2, [pc, #28]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a04      	ldr	r2, [pc, #16]	; (8002730 <HAL_RCC_OscConfig+0x76c>)
 8002720:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002726:	f7fe fbd7 	bl	8000ed8 <HAL_GetTick>
 800272a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800272c:	e011      	b.n	8002752 <HAL_RCC_OscConfig+0x78e>
 800272e:	bf00      	nop
 8002730:	58024400 	.word	0x58024400
 8002734:	58024800 	.word	0x58024800
 8002738:	fffffc0c 	.word	0xfffffc0c
 800273c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002740:	f7fe fbca 	bl	8000ed8 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e05f      	b.n	8002812 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002752:	4b32      	ldr	r3, [pc, #200]	; (800281c <HAL_RCC_OscConfig+0x858>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x77c>
 800275e:	e057      	b.n	8002810 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002760:	4b2e      	ldr	r3, [pc, #184]	; (800281c <HAL_RCC_OscConfig+0x858>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a2d      	ldr	r2, [pc, #180]	; (800281c <HAL_RCC_OscConfig+0x858>)
 8002766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800276a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7fe fbb4 	bl	8000ed8 <HAL_GetTick>
 8002770:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002774:	f7fe fbb0 	bl	8000ed8 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e045      	b.n	8002812 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002786:	4b25      	ldr	r3, [pc, #148]	; (800281c <HAL_RCC_OscConfig+0x858>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0x7b0>
 8002792:	e03d      	b.n	8002810 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002794:	4b21      	ldr	r3, [pc, #132]	; (800281c <HAL_RCC_OscConfig+0x858>)
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800279a:	4b20      	ldr	r3, [pc, #128]	; (800281c <HAL_RCC_OscConfig+0x858>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d031      	beq.n	800280c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	f003 0203 	and.w	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d12a      	bne.n	800280c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d122      	bne.n	800280c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d11a      	bne.n	800280c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	0a5b      	lsrs	r3, r3, #9
 80027da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d111      	bne.n	800280c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	0c1b      	lsrs	r3, r3, #16
 80027ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d108      	bne.n	800280c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	0e1b      	lsrs	r3, r3, #24
 80027fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002806:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3730      	adds	r7, #48	; 0x30
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	58024400 	.word	0x58024400

08002820 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e19c      	b.n	8002b6e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002834:	4b8a      	ldr	r3, [pc, #552]	; (8002a60 <HAL_RCC_ClockConfig+0x240>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 030f 	and.w	r3, r3, #15
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d910      	bls.n	8002864 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	4b87      	ldr	r3, [pc, #540]	; (8002a60 <HAL_RCC_ClockConfig+0x240>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 020f 	bic.w	r2, r3, #15
 800284a:	4985      	ldr	r1, [pc, #532]	; (8002a60 <HAL_RCC_ClockConfig+0x240>)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b83      	ldr	r3, [pc, #524]	; (8002a60 <HAL_RCC_ClockConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e184      	b.n	8002b6e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d010      	beq.n	8002892 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	4b7b      	ldr	r3, [pc, #492]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800287c:	429a      	cmp	r2, r3
 800287e:	d908      	bls.n	8002892 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002880:	4b78      	ldr	r3, [pc, #480]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	4975      	ldr	r1, [pc, #468]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 800288e:	4313      	orrs	r3, r2
 8002890:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d010      	beq.n	80028c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	4b70      	ldr	r3, [pc, #448]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d908      	bls.n	80028c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028ae:	4b6d      	ldr	r3, [pc, #436]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	496a      	ldr	r1, [pc, #424]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d010      	beq.n	80028ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699a      	ldr	r2, [r3, #24]
 80028d0:	4b64      	ldr	r3, [pc, #400]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028d8:	429a      	cmp	r2, r3
 80028da:	d908      	bls.n	80028ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028dc:	4b61      	ldr	r3, [pc, #388]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	495e      	ldr	r1, [pc, #376]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d010      	beq.n	800291c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69da      	ldr	r2, [r3, #28]
 80028fe:	4b59      	ldr	r3, [pc, #356]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002906:	429a      	cmp	r2, r3
 8002908:	d908      	bls.n	800291c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800290a:	4b56      	ldr	r3, [pc, #344]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	4953      	ldr	r1, [pc, #332]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 8002918:	4313      	orrs	r3, r2
 800291a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d010      	beq.n	800294a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	4b4d      	ldr	r3, [pc, #308]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	429a      	cmp	r2, r3
 8002936:	d908      	bls.n	800294a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002938:	4b4a      	ldr	r3, [pc, #296]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	f023 020f 	bic.w	r2, r3, #15
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4947      	ldr	r1, [pc, #284]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 8002946:	4313      	orrs	r3, r2
 8002948:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d055      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002956:	4b43      	ldr	r3, [pc, #268]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	4940      	ldr	r1, [pc, #256]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 8002964:	4313      	orrs	r3, r2
 8002966:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b02      	cmp	r3, #2
 800296e:	d107      	bne.n	8002980 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002970:	4b3c      	ldr	r3, [pc, #240]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d121      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0f6      	b.n	8002b6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d107      	bne.n	8002998 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002988:	4b36      	ldr	r3, [pc, #216]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d115      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0ea      	b.n	8002b6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d107      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029a0:	4b30      	ldr	r3, [pc, #192]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d109      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0de      	b.n	8002b6e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029b0:	4b2c      	ldr	r3, [pc, #176]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0d6      	b.n	8002b6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029c0:	4b28      	ldr	r3, [pc, #160]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	f023 0207 	bic.w	r2, r3, #7
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	4925      	ldr	r1, [pc, #148]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d2:	f7fe fa81 	bl	8000ed8 <HAL_GetTick>
 80029d6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d8:	e00a      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029da:	f7fe fa7d 	bl	8000ed8 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e0be      	b.n	8002b6e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f0:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d1eb      	bne.n	80029da <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d010      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d208      	bcs.n	8002a30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a1e:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	f023 020f 	bic.w	r2, r3, #15
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	490e      	ldr	r1, [pc, #56]	; (8002a64 <HAL_RCC_ClockConfig+0x244>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_RCC_ClockConfig+0x240>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 030f 	and.w	r3, r3, #15
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d214      	bcs.n	8002a68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3e:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <HAL_RCC_ClockConfig+0x240>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 020f 	bic.w	r2, r3, #15
 8002a46:	4906      	ldr	r1, [pc, #24]	; (8002a60 <HAL_RCC_ClockConfig+0x240>)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <HAL_RCC_ClockConfig+0x240>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d005      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e086      	b.n	8002b6e <HAL_RCC_ClockConfig+0x34e>
 8002a60:	52002000 	.word	0x52002000
 8002a64:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d010      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	4b3f      	ldr	r3, [pc, #252]	; (8002b78 <HAL_RCC_ClockConfig+0x358>)
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d208      	bcs.n	8002a96 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a84:	4b3c      	ldr	r3, [pc, #240]	; (8002b78 <HAL_RCC_ClockConfig+0x358>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	4939      	ldr	r1, [pc, #228]	; (8002b78 <HAL_RCC_ClockConfig+0x358>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d010      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695a      	ldr	r2, [r3, #20]
 8002aa6:	4b34      	ldr	r3, [pc, #208]	; (8002b78 <HAL_RCC_ClockConfig+0x358>)
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d208      	bcs.n	8002ac4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ab2:	4b31      	ldr	r3, [pc, #196]	; (8002b78 <HAL_RCC_ClockConfig+0x358>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	492e      	ldr	r1, [pc, #184]	; (8002b78 <HAL_RCC_ClockConfig+0x358>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d010      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699a      	ldr	r2, [r3, #24]
 8002ad4:	4b28      	ldr	r3, [pc, #160]	; (8002b78 <HAL_RCC_ClockConfig+0x358>)
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d208      	bcs.n	8002af2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ae0:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <HAL_RCC_ClockConfig+0x358>)
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	4922      	ldr	r1, [pc, #136]	; (8002b78 <HAL_RCC_ClockConfig+0x358>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d010      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69da      	ldr	r2, [r3, #28]
 8002b02:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <HAL_RCC_ClockConfig+0x358>)
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d208      	bcs.n	8002b20 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002b0e:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <HAL_RCC_ClockConfig+0x358>)
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	4917      	ldr	r1, [pc, #92]	; (8002b78 <HAL_RCC_ClockConfig+0x358>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b20:	f000 f834 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8002b24:	4602      	mov	r2, r0
 8002b26:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <HAL_RCC_ClockConfig+0x358>)
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	0a1b      	lsrs	r3, r3, #8
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	4912      	ldr	r1, [pc, #72]	; (8002b7c <HAL_RCC_ClockConfig+0x35c>)
 8002b32:	5ccb      	ldrb	r3, [r1, r3]
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b3e:	4b0e      	ldr	r3, [pc, #56]	; (8002b78 <HAL_RCC_ClockConfig+0x358>)
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	4a0d      	ldr	r2, [pc, #52]	; (8002b7c <HAL_RCC_ClockConfig+0x35c>)
 8002b48:	5cd3      	ldrb	r3, [r2, r3]
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	fa22 f303 	lsr.w	r3, r2, r3
 8002b54:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <HAL_RCC_ClockConfig+0x360>)
 8002b56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b58:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <HAL_RCC_ClockConfig+0x364>)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <HAL_RCC_ClockConfig+0x368>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe f96e 	bl	8000e44 <HAL_InitTick>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	58024400 	.word	0x58024400
 8002b7c:	08007d70 	.word	0x08007d70
 8002b80:	24000004 	.word	0x24000004
 8002b84:	24000000 	.word	0x24000000
 8002b88:	24000008 	.word	0x24000008

08002b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b089      	sub	sp, #36	; 0x24
 8002b90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b92:	4bb3      	ldr	r3, [pc, #716]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b9a:	2b18      	cmp	r3, #24
 8002b9c:	f200 8155 	bhi.w	8002e4a <HAL_RCC_GetSysClockFreq+0x2be>
 8002ba0:	a201      	add	r2, pc, #4	; (adr r2, 8002ba8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba6:	bf00      	nop
 8002ba8:	08002c0d 	.word	0x08002c0d
 8002bac:	08002e4b 	.word	0x08002e4b
 8002bb0:	08002e4b 	.word	0x08002e4b
 8002bb4:	08002e4b 	.word	0x08002e4b
 8002bb8:	08002e4b 	.word	0x08002e4b
 8002bbc:	08002e4b 	.word	0x08002e4b
 8002bc0:	08002e4b 	.word	0x08002e4b
 8002bc4:	08002e4b 	.word	0x08002e4b
 8002bc8:	08002c33 	.word	0x08002c33
 8002bcc:	08002e4b 	.word	0x08002e4b
 8002bd0:	08002e4b 	.word	0x08002e4b
 8002bd4:	08002e4b 	.word	0x08002e4b
 8002bd8:	08002e4b 	.word	0x08002e4b
 8002bdc:	08002e4b 	.word	0x08002e4b
 8002be0:	08002e4b 	.word	0x08002e4b
 8002be4:	08002e4b 	.word	0x08002e4b
 8002be8:	08002c39 	.word	0x08002c39
 8002bec:	08002e4b 	.word	0x08002e4b
 8002bf0:	08002e4b 	.word	0x08002e4b
 8002bf4:	08002e4b 	.word	0x08002e4b
 8002bf8:	08002e4b 	.word	0x08002e4b
 8002bfc:	08002e4b 	.word	0x08002e4b
 8002c00:	08002e4b 	.word	0x08002e4b
 8002c04:	08002e4b 	.word	0x08002e4b
 8002c08:	08002c3f 	.word	0x08002c3f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c0c:	4b94      	ldr	r3, [pc, #592]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d009      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c18:	4b91      	ldr	r3, [pc, #580]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	08db      	lsrs	r3, r3, #3
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	4a90      	ldr	r2, [pc, #576]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
 8002c28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002c2a:	e111      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002c2c:	4b8d      	ldr	r3, [pc, #564]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c2e:	61bb      	str	r3, [r7, #24]
    break;
 8002c30:	e10e      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002c32:	4b8d      	ldr	r3, [pc, #564]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c34:	61bb      	str	r3, [r7, #24]
    break;
 8002c36:	e10b      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002c38:	4b8c      	ldr	r3, [pc, #560]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002c3a:	61bb      	str	r3, [r7, #24]
    break;
 8002c3c:	e108      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c3e:	4b88      	ldr	r3, [pc, #544]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002c48:	4b85      	ldr	r3, [pc, #532]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c52:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002c54:	4b82      	ldr	r3, [pc, #520]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002c5e:	4b80      	ldr	r3, [pc, #512]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c62:	08db      	lsrs	r3, r3, #3
 8002c64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	fb02 f303 	mul.w	r3, r2, r3
 8002c6e:	ee07 3a90 	vmov	s15, r3
 8002c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c76:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80e1 	beq.w	8002e44 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	f000 8083 	beq.w	8002d90 <HAL_RCC_GetSysClockFreq+0x204>
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	f200 80a1 	bhi.w	8002dd4 <HAL_RCC_GetSysClockFreq+0x248>
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x114>
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d056      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002c9e:	e099      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ca0:	4b6f      	ldr	r3, [pc, #444]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d02d      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002cac:	4b6c      	ldr	r3, [pc, #432]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	08db      	lsrs	r3, r3, #3
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	4a6b      	ldr	r2, [pc, #428]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cbc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	ee07 3a90 	vmov	s15, r3
 8002cc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	ee07 3a90 	vmov	s15, r3
 8002cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cd6:	4b62      	ldr	r3, [pc, #392]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cde:	ee07 3a90 	vmov	s15, r3
 8002ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ce6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002e70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002d06:	e087      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	ee07 3a90 	vmov	s15, r3
 8002d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d12:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002e74 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d1a:	4b51      	ldr	r3, [pc, #324]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d22:	ee07 3a90 	vmov	s15, r3
 8002d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d2e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002e70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d4a:	e065      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	ee07 3a90 	vmov	s15, r3
 8002d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d56:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002e78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d5e:	4b40      	ldr	r3, [pc, #256]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d66:	ee07 3a90 	vmov	s15, r3
 8002d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d72:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002e70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d8e:	e043      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	ee07 3a90 	vmov	s15, r3
 8002d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d9a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002e7c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002da2:	4b2f      	ldr	r3, [pc, #188]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002daa:	ee07 3a90 	vmov	s15, r3
 8002dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002db2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002db6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002e70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002dd2:	e021      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	ee07 3a90 	vmov	s15, r3
 8002dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dde:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002e78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002de6:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dee:	ee07 3a90 	vmov	s15, r3
 8002df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002df6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dfa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002e70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e16:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002e18:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	0a5b      	lsrs	r3, r3, #9
 8002e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e22:	3301      	adds	r3, #1
 8002e24:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	ee07 3a90 	vmov	s15, r3
 8002e2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e30:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e3c:	ee17 3a90 	vmov	r3, s15
 8002e40:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002e42:	e005      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61bb      	str	r3, [r7, #24]
    break;
 8002e48:	e002      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002e4a:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e4c:	61bb      	str	r3, [r7, #24]
    break;
 8002e4e:	bf00      	nop
  }

  return sysclockfreq;
 8002e50:	69bb      	ldr	r3, [r7, #24]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3724      	adds	r7, #36	; 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	58024400 	.word	0x58024400
 8002e64:	03d09000 	.word	0x03d09000
 8002e68:	003d0900 	.word	0x003d0900
 8002e6c:	017d7840 	.word	0x017d7840
 8002e70:	46000000 	.word	0x46000000
 8002e74:	4c742400 	.word	0x4c742400
 8002e78:	4a742400 	.word	0x4a742400
 8002e7c:	4bbebc20 	.word	0x4bbebc20

08002e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002e86:	f7ff fe81 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	0a1b      	lsrs	r3, r3, #8
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	490f      	ldr	r1, [pc, #60]	; (8002ed4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002e98:	5ccb      	ldrb	r3, [r1, r3]
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	4a09      	ldr	r2, [pc, #36]	; (8002ed4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002eae:	5cd3      	ldrb	r3, [r2, r3]
 8002eb0:	f003 031f 	and.w	r3, r3, #31
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eba:	4a07      	ldr	r2, [pc, #28]	; (8002ed8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ebc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ebe:	4a07      	ldr	r2, [pc, #28]	; (8002edc <HAL_RCC_GetHCLKFreq+0x5c>)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002ec4:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	58024400 	.word	0x58024400
 8002ed4:	08007d70 	.word	0x08007d70
 8002ed8:	24000004 	.word	0x24000004
 8002edc:	24000000 	.word	0x24000000

08002ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002ee4:	f7ff ffcc 	bl	8002e80 <HAL_RCC_GetHCLKFreq>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	4904      	ldr	r1, [pc, #16]	; (8002f08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ef6:	5ccb      	ldrb	r3, [r1, r3]
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	58024400 	.word	0x58024400
 8002f08:	08007d70 	.word	0x08007d70

08002f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002f10:	f7ff ffb6 	bl	8002e80 <HAL_RCC_GetHCLKFreq>
 8002f14:	4602      	mov	r2, r0
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	4904      	ldr	r1, [pc, #16]	; (8002f34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f22:	5ccb      	ldrb	r3, [r1, r3]
 8002f24:	f003 031f 	and.w	r3, r3, #31
 8002f28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	58024400 	.word	0x58024400
 8002f34:	08007d70 	.word	0x08007d70

08002f38 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f40:	2300      	movs	r3, #0
 8002f42:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f44:	2300      	movs	r3, #0
 8002f46:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d03f      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f5c:	d02a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f62:	d824      	bhi.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f68:	d018      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f6e:	d81e      	bhi.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f78:	d007      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f7a:	e018      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f7c:	4ba3      	ldr	r3, [pc, #652]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	4aa2      	ldr	r2, [pc, #648]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002f88:	e015      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	2102      	movs	r1, #2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f001 f9d5 	bl	8004340 <RCCEx_PLL2_Config>
 8002f96:	4603      	mov	r3, r0
 8002f98:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002f9a:	e00c      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3324      	adds	r3, #36	; 0x24
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f001 fa7e 	bl	80044a4 <RCCEx_PLL3_Config>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002fac:	e003      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fb6:	7dfb      	ldrb	r3, [r7, #23]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d109      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002fbc:	4b93      	ldr	r3, [pc, #588]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fc8:	4990      	ldr	r1, [pc, #576]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	650b      	str	r3, [r1, #80]	; 0x50
 8002fce:	e001      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd0:	7dfb      	ldrb	r3, [r7, #23]
 8002fd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d03d      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d826      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002fe8:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fee:	bf00      	nop
 8002ff0:	08003005 	.word	0x08003005
 8002ff4:	08003013 	.word	0x08003013
 8002ff8:	08003025 	.word	0x08003025
 8002ffc:	0800303d 	.word	0x0800303d
 8003000:	0800303d 	.word	0x0800303d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003004:	4b81      	ldr	r3, [pc, #516]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	4a80      	ldr	r2, [pc, #512]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800300a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800300e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003010:	e015      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3304      	adds	r3, #4
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f001 f991 	bl	8004340 <RCCEx_PLL2_Config>
 800301e:	4603      	mov	r3, r0
 8003020:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003022:	e00c      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3324      	adds	r3, #36	; 0x24
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f001 fa3a 	bl	80044a4 <RCCEx_PLL3_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003034:	e003      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	75fb      	strb	r3, [r7, #23]
      break;
 800303a:	e000      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800303c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d109      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003044:	4b71      	ldr	r3, [pc, #452]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003048:	f023 0207 	bic.w	r2, r3, #7
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003050:	496e      	ldr	r1, [pc, #440]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003052:	4313      	orrs	r3, r2
 8003054:	650b      	str	r3, [r1, #80]	; 0x50
 8003056:	e001      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003058:	7dfb      	ldrb	r3, [r7, #23]
 800305a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003064:	2b00      	cmp	r3, #0
 8003066:	d042      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003070:	d02b      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003076:	d825      	bhi.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003078:	2bc0      	cmp	r3, #192	; 0xc0
 800307a:	d028      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 800307c:	2bc0      	cmp	r3, #192	; 0xc0
 800307e:	d821      	bhi.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003080:	2b80      	cmp	r3, #128	; 0x80
 8003082:	d016      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003084:	2b80      	cmp	r3, #128	; 0x80
 8003086:	d81d      	bhi.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800308c:	2b40      	cmp	r3, #64	; 0x40
 800308e:	d007      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003090:	e018      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003092:	4b5e      	ldr	r3, [pc, #376]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003096:	4a5d      	ldr	r2, [pc, #372]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800309c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800309e:	e017      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3304      	adds	r3, #4
 80030a4:	2100      	movs	r1, #0
 80030a6:	4618      	mov	r0, r3
 80030a8:	f001 f94a 	bl	8004340 <RCCEx_PLL2_Config>
 80030ac:	4603      	mov	r3, r0
 80030ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80030b0:	e00e      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3324      	adds	r3, #36	; 0x24
 80030b6:	2100      	movs	r1, #0
 80030b8:	4618      	mov	r0, r3
 80030ba:	f001 f9f3 	bl	80044a4 <RCCEx_PLL3_Config>
 80030be:	4603      	mov	r3, r0
 80030c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80030c2:	e005      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	75fb      	strb	r3, [r7, #23]
      break;
 80030c8:	e002      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80030ca:	bf00      	nop
 80030cc:	e000      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80030ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d109      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80030d6:	4b4d      	ldr	r3, [pc, #308]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80030d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030da:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e2:	494a      	ldr	r1, [pc, #296]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	650b      	str	r3, [r1, #80]	; 0x50
 80030e8:	e001      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ea:	7dfb      	ldrb	r3, [r7, #23]
 80030ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d049      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003100:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003104:	d030      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003106:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800310a:	d82a      	bhi.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800310c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003110:	d02c      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003112:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003116:	d824      	bhi.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800311c:	d018      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800311e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003122:	d81e      	bhi.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003128:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800312c:	d007      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800312e:	e018      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003130:	4b36      	ldr	r3, [pc, #216]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	4a35      	ldr	r2, [pc, #212]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800313c:	e017      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3304      	adds	r3, #4
 8003142:	2100      	movs	r1, #0
 8003144:	4618      	mov	r0, r3
 8003146:	f001 f8fb 	bl	8004340 <RCCEx_PLL2_Config>
 800314a:	4603      	mov	r3, r0
 800314c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800314e:	e00e      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3324      	adds	r3, #36	; 0x24
 8003154:	2100      	movs	r1, #0
 8003156:	4618      	mov	r0, r3
 8003158:	f001 f9a4 	bl	80044a4 <RCCEx_PLL3_Config>
 800315c:	4603      	mov	r3, r0
 800315e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003160:	e005      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	75fb      	strb	r3, [r7, #23]
      break;
 8003166:	e002      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003168:	bf00      	nop
 800316a:	e000      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800316c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800316e:	7dfb      	ldrb	r3, [r7, #23]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10a      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003174:	4b25      	ldr	r3, [pc, #148]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003178:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003182:	4922      	ldr	r1, [pc, #136]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003184:	4313      	orrs	r3, r2
 8003186:	658b      	str	r3, [r1, #88]	; 0x58
 8003188:	e001      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800318a:	7dfb      	ldrb	r3, [r7, #23]
 800318c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003196:	2b00      	cmp	r3, #0
 8003198:	d04b      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80031a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031a4:	d030      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80031a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031aa:	d82a      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80031ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031b0:	d02e      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80031b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031b6:	d824      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80031b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031bc:	d018      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80031be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031c2:	d81e      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80031c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031cc:	d007      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80031ce:	e018      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031d0:	4b0e      	ldr	r3, [pc, #56]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	4a0d      	ldr	r2, [pc, #52]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031dc:	e019      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3304      	adds	r3, #4
 80031e2:	2100      	movs	r1, #0
 80031e4:	4618      	mov	r0, r3
 80031e6:	f001 f8ab 	bl	8004340 <RCCEx_PLL2_Config>
 80031ea:	4603      	mov	r3, r0
 80031ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80031ee:	e010      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3324      	adds	r3, #36	; 0x24
 80031f4:	2100      	movs	r1, #0
 80031f6:	4618      	mov	r0, r3
 80031f8:	f001 f954 	bl	80044a4 <RCCEx_PLL3_Config>
 80031fc:	4603      	mov	r3, r0
 80031fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003200:	e007      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	75fb      	strb	r3, [r7, #23]
      break;
 8003206:	e004      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003208:	bf00      	nop
 800320a:	e002      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800320c:	58024400 	.word	0x58024400
      break;
 8003210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003212:	7dfb      	ldrb	r3, [r7, #23]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003218:	4b99      	ldr	r3, [pc, #612]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800321a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003226:	4996      	ldr	r1, [pc, #600]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003228:	4313      	orrs	r3, r2
 800322a:	658b      	str	r3, [r1, #88]	; 0x58
 800322c:	e001      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800322e:	7dfb      	ldrb	r3, [r7, #23]
 8003230:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d032      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003242:	2b30      	cmp	r3, #48	; 0x30
 8003244:	d01c      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003246:	2b30      	cmp	r3, #48	; 0x30
 8003248:	d817      	bhi.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800324a:	2b20      	cmp	r3, #32
 800324c:	d00c      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800324e:	2b20      	cmp	r3, #32
 8003250:	d813      	bhi.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d016      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003256:	2b10      	cmp	r3, #16
 8003258:	d10f      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800325a:	4b89      	ldr	r3, [pc, #548]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325e:	4a88      	ldr	r2, [pc, #544]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003264:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003266:	e00e      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3304      	adds	r3, #4
 800326c:	2102      	movs	r1, #2
 800326e:	4618      	mov	r0, r3
 8003270:	f001 f866 	bl	8004340 <RCCEx_PLL2_Config>
 8003274:	4603      	mov	r3, r0
 8003276:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003278:	e005      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	75fb      	strb	r3, [r7, #23]
      break;
 800327e:	e002      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003280:	bf00      	nop
 8003282:	e000      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003286:	7dfb      	ldrb	r3, [r7, #23]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d109      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800328c:	4b7c      	ldr	r3, [pc, #496]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800328e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003290:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003298:	4979      	ldr	r1, [pc, #484]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800329a:	4313      	orrs	r3, r2
 800329c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800329e:	e001      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
 80032a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d047      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032b8:	d030      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80032ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032be:	d82a      	bhi.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80032c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032c4:	d02c      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80032c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032ca:	d824      	bhi.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80032cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d0:	d018      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80032d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d6:	d81e      	bhi.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80032dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e0:	d007      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80032e2:	e018      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032e4:	4b66      	ldr	r3, [pc, #408]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	4a65      	ldr	r2, [pc, #404]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80032f0:	e017      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3304      	adds	r3, #4
 80032f6:	2100      	movs	r1, #0
 80032f8:	4618      	mov	r0, r3
 80032fa:	f001 f821 	bl	8004340 <RCCEx_PLL2_Config>
 80032fe:	4603      	mov	r3, r0
 8003300:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003302:	e00e      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3324      	adds	r3, #36	; 0x24
 8003308:	2100      	movs	r1, #0
 800330a:	4618      	mov	r0, r3
 800330c:	f001 f8ca 	bl	80044a4 <RCCEx_PLL3_Config>
 8003310:	4603      	mov	r3, r0
 8003312:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003314:	e005      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	75fb      	strb	r3, [r7, #23]
      break;
 800331a:	e002      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800331c:	bf00      	nop
 800331e:	e000      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003322:	7dfb      	ldrb	r3, [r7, #23]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d109      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003328:	4b55      	ldr	r3, [pc, #340]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800332a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003334:	4952      	ldr	r1, [pc, #328]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003336:	4313      	orrs	r3, r2
 8003338:	650b      	str	r3, [r1, #80]	; 0x50
 800333a:	e001      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333c:	7dfb      	ldrb	r3, [r7, #23]
 800333e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d049      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003354:	d02e      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003356:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800335a:	d828      	bhi.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 800335c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003360:	d02a      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003362:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003366:	d822      	bhi.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003368:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800336c:	d026      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x484>
 800336e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003372:	d81c      	bhi.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003374:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003378:	d010      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800337a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800337e:	d816      	bhi.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01d      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003388:	d111      	bne.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3304      	adds	r3, #4
 800338e:	2101      	movs	r1, #1
 8003390:	4618      	mov	r0, r3
 8003392:	f000 ffd5 	bl	8004340 <RCCEx_PLL2_Config>
 8003396:	4603      	mov	r3, r0
 8003398:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800339a:	e012      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3324      	adds	r3, #36	; 0x24
 80033a0:	2101      	movs	r1, #1
 80033a2:	4618      	mov	r0, r3
 80033a4:	f001 f87e 	bl	80044a4 <RCCEx_PLL3_Config>
 80033a8:	4603      	mov	r3, r0
 80033aa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80033ac:	e009      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	75fb      	strb	r3, [r7, #23]
      break;
 80033b2:	e006      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80033b4:	bf00      	nop
 80033b6:	e004      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80033b8:	bf00      	nop
 80033ba:	e002      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80033bc:	bf00      	nop
 80033be:	e000      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80033c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033c2:	7dfb      	ldrb	r3, [r7, #23]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d109      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80033c8:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80033ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033cc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d4:	492a      	ldr	r1, [pc, #168]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	650b      	str	r3, [r1, #80]	; 0x50
 80033da:	e001      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033dc:	7dfb      	ldrb	r3, [r7, #23]
 80033de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d04d      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80033f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033f6:	d02e      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80033f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033fc:	d828      	bhi.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80033fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003402:	d02a      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003408:	d822      	bhi.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800340a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800340e:	d026      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003410:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003414:	d81c      	bhi.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800341a:	d010      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800341c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003420:	d816      	bhi.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003422:	2b00      	cmp	r3, #0
 8003424:	d01d      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003426:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800342a:	d111      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3304      	adds	r3, #4
 8003430:	2101      	movs	r1, #1
 8003432:	4618      	mov	r0, r3
 8003434:	f000 ff84 	bl	8004340 <RCCEx_PLL2_Config>
 8003438:	4603      	mov	r3, r0
 800343a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800343c:	e012      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3324      	adds	r3, #36	; 0x24
 8003442:	2101      	movs	r1, #1
 8003444:	4618      	mov	r0, r3
 8003446:	f001 f82d 	bl	80044a4 <RCCEx_PLL3_Config>
 800344a:	4603      	mov	r3, r0
 800344c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800344e:	e009      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	75fb      	strb	r3, [r7, #23]
      break;
 8003454:	e006      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003456:	bf00      	nop
 8003458:	e004      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800345a:	bf00      	nop
 800345c:	e002      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800345e:	bf00      	nop
 8003460:	e000      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003462:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003464:	7dfb      	ldrb	r3, [r7, #23]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10c      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800346a:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003478:	4901      	ldr	r1, [pc, #4]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800347a:	4313      	orrs	r3, r2
 800347c:	658b      	str	r3, [r1, #88]	; 0x58
 800347e:	e003      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003480:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003484:	7dfb      	ldrb	r3, [r7, #23]
 8003486:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d02f      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800349c:	d00e      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x584>
 800349e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034a2:	d814      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x596>
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d015      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80034a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034ac:	d10f      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ae:	4baf      	ldr	r3, [pc, #700]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b2:	4aae      	ldr	r2, [pc, #696]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80034b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80034ba:	e00c      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3304      	adds	r3, #4
 80034c0:	2101      	movs	r1, #1
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 ff3c 	bl	8004340 <RCCEx_PLL2_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80034cc:	e003      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	75fb      	strb	r3, [r7, #23]
      break;
 80034d2:	e000      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80034d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034d6:	7dfb      	ldrb	r3, [r7, #23]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d109      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80034dc:	4ba3      	ldr	r3, [pc, #652]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80034de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034e8:	49a0      	ldr	r1, [pc, #640]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	650b      	str	r3, [r1, #80]	; 0x50
 80034ee:	e001      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d032      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003504:	2b03      	cmp	r3, #3
 8003506:	d81b      	bhi.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003508:	a201      	add	r2, pc, #4	; (adr r2, 8003510 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800350a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350e:	bf00      	nop
 8003510:	08003547 	.word	0x08003547
 8003514:	08003521 	.word	0x08003521
 8003518:	0800352f 	.word	0x0800352f
 800351c:	08003547 	.word	0x08003547
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003520:	4b92      	ldr	r3, [pc, #584]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	4a91      	ldr	r2, [pc, #580]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800352c:	e00c      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3304      	adds	r3, #4
 8003532:	2102      	movs	r1, #2
 8003534:	4618      	mov	r0, r3
 8003536:	f000 ff03 	bl	8004340 <RCCEx_PLL2_Config>
 800353a:	4603      	mov	r3, r0
 800353c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800353e:	e003      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	75fb      	strb	r3, [r7, #23]
      break;
 8003544:	e000      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003546:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003548:	7dfb      	ldrb	r3, [r7, #23]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800354e:	4b87      	ldr	r3, [pc, #540]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003552:	f023 0203 	bic.w	r2, r3, #3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	4984      	ldr	r1, [pc, #528]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800355c:	4313      	orrs	r3, r2
 800355e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003560:	e001      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003562:	7dfb      	ldrb	r3, [r7, #23]
 8003564:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 8086 	beq.w	8003680 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003574:	4b7e      	ldr	r3, [pc, #504]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a7d      	ldr	r2, [pc, #500]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800357a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003580:	f7fd fcaa 	bl	8000ed8 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003586:	e009      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003588:	f7fd fca6 	bl	8000ed8 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b64      	cmp	r3, #100	; 0x64
 8003594:	d902      	bls.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	75fb      	strb	r3, [r7, #23]
        break;
 800359a:	e005      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800359c:	4b74      	ldr	r3, [pc, #464]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0ef      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80035a8:	7dfb      	ldrb	r3, [r7, #23]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d166      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80035ae:	4b6f      	ldr	r3, [pc, #444]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80035b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035b8:	4053      	eors	r3, r2
 80035ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d013      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035c2:	4b6a      	ldr	r3, [pc, #424]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035cc:	4b67      	ldr	r3, [pc, #412]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80035ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d0:	4a66      	ldr	r2, [pc, #408]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80035d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035d8:	4b64      	ldr	r3, [pc, #400]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80035da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035dc:	4a63      	ldr	r2, [pc, #396]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80035de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80035e4:	4a61      	ldr	r2, [pc, #388]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f4:	d115      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f6:	f7fd fc6f 	bl	8000ed8 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035fc:	e00b      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fe:	f7fd fc6b 	bl	8000ed8 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	f241 3288 	movw	r2, #5000	; 0x1388
 800360c:	4293      	cmp	r3, r2
 800360e:	d902      	bls.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	75fb      	strb	r3, [r7, #23]
            break;
 8003614:	e005      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003616:	4b55      	ldr	r3, [pc, #340]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0ed      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003622:	7dfb      	ldrb	r3, [r7, #23]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d126      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800362e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003632:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003636:	d10d      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003638:	4b4c      	ldr	r3, [pc, #304]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003646:	0919      	lsrs	r1, r3, #4
 8003648:	4b4a      	ldr	r3, [pc, #296]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800364a:	400b      	ands	r3, r1
 800364c:	4947      	ldr	r1, [pc, #284]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800364e:	4313      	orrs	r3, r2
 8003650:	610b      	str	r3, [r1, #16]
 8003652:	e005      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003654:	4b45      	ldr	r3, [pc, #276]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	4a44      	ldr	r2, [pc, #272]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800365a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800365e:	6113      	str	r3, [r2, #16]
 8003660:	4b42      	ldr	r3, [pc, #264]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003662:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800366a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800366e:	493f      	ldr	r1, [pc, #252]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003670:	4313      	orrs	r3, r2
 8003672:	670b      	str	r3, [r1, #112]	; 0x70
 8003674:	e004      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003676:	7dfb      	ldrb	r3, [r7, #23]
 8003678:	75bb      	strb	r3, [r7, #22]
 800367a:	e001      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367c:	7dfb      	ldrb	r3, [r7, #23]
 800367e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 8085 	beq.w	8003798 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003692:	2b28      	cmp	r3, #40	; 0x28
 8003694:	d866      	bhi.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003696:	a201      	add	r2, pc, #4	; (adr r2, 800369c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369c:	08003779 	.word	0x08003779
 80036a0:	08003765 	.word	0x08003765
 80036a4:	08003765 	.word	0x08003765
 80036a8:	08003765 	.word	0x08003765
 80036ac:	08003765 	.word	0x08003765
 80036b0:	08003765 	.word	0x08003765
 80036b4:	08003765 	.word	0x08003765
 80036b8:	08003765 	.word	0x08003765
 80036bc:	08003741 	.word	0x08003741
 80036c0:	08003765 	.word	0x08003765
 80036c4:	08003765 	.word	0x08003765
 80036c8:	08003765 	.word	0x08003765
 80036cc:	08003765 	.word	0x08003765
 80036d0:	08003765 	.word	0x08003765
 80036d4:	08003765 	.word	0x08003765
 80036d8:	08003765 	.word	0x08003765
 80036dc:	08003753 	.word	0x08003753
 80036e0:	08003765 	.word	0x08003765
 80036e4:	08003765 	.word	0x08003765
 80036e8:	08003765 	.word	0x08003765
 80036ec:	08003765 	.word	0x08003765
 80036f0:	08003765 	.word	0x08003765
 80036f4:	08003765 	.word	0x08003765
 80036f8:	08003765 	.word	0x08003765
 80036fc:	08003779 	.word	0x08003779
 8003700:	08003765 	.word	0x08003765
 8003704:	08003765 	.word	0x08003765
 8003708:	08003765 	.word	0x08003765
 800370c:	08003765 	.word	0x08003765
 8003710:	08003765 	.word	0x08003765
 8003714:	08003765 	.word	0x08003765
 8003718:	08003765 	.word	0x08003765
 800371c:	08003779 	.word	0x08003779
 8003720:	08003765 	.word	0x08003765
 8003724:	08003765 	.word	0x08003765
 8003728:	08003765 	.word	0x08003765
 800372c:	08003765 	.word	0x08003765
 8003730:	08003765 	.word	0x08003765
 8003734:	08003765 	.word	0x08003765
 8003738:	08003765 	.word	0x08003765
 800373c:	08003779 	.word	0x08003779
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3304      	adds	r3, #4
 8003744:	2101      	movs	r1, #1
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fdfa 	bl	8004340 <RCCEx_PLL2_Config>
 800374c:	4603      	mov	r3, r0
 800374e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003750:	e013      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3324      	adds	r3, #36	; 0x24
 8003756:	2101      	movs	r1, #1
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fea3 	bl	80044a4 <RCCEx_PLL3_Config>
 800375e:	4603      	mov	r3, r0
 8003760:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003762:	e00a      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	75fb      	strb	r3, [r7, #23]
      break;
 8003768:	e007      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800376a:	bf00      	nop
 800376c:	58024400 	.word	0x58024400
 8003770:	58024800 	.word	0x58024800
 8003774:	00ffffcf 	.word	0x00ffffcf
      break;
 8003778:	bf00      	nop
    }

    if(ret == HAL_OK)
 800377a:	7dfb      	ldrb	r3, [r7, #23]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d109      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003780:	4b96      	ldr	r3, [pc, #600]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003784:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800378c:	4993      	ldr	r1, [pc, #588]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800378e:	4313      	orrs	r3, r2
 8003790:	654b      	str	r3, [r1, #84]	; 0x54
 8003792:	e001      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003794:	7dfb      	ldrb	r3, [r7, #23]
 8003796:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d038      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a8:	2b05      	cmp	r3, #5
 80037aa:	d821      	bhi.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80037ac:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80037ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b2:	bf00      	nop
 80037b4:	080037f7 	.word	0x080037f7
 80037b8:	080037cd 	.word	0x080037cd
 80037bc:	080037df 	.word	0x080037df
 80037c0:	080037f7 	.word	0x080037f7
 80037c4:	080037f7 	.word	0x080037f7
 80037c8:	080037f7 	.word	0x080037f7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3304      	adds	r3, #4
 80037d0:	2101      	movs	r1, #1
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fdb4 	bl	8004340 <RCCEx_PLL2_Config>
 80037d8:	4603      	mov	r3, r0
 80037da:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80037dc:	e00c      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3324      	adds	r3, #36	; 0x24
 80037e2:	2101      	movs	r1, #1
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fe5d 	bl	80044a4 <RCCEx_PLL3_Config>
 80037ea:	4603      	mov	r3, r0
 80037ec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80037ee:	e003      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	75fb      	strb	r3, [r7, #23]
      break;
 80037f4:	e000      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80037f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037f8:	7dfb      	ldrb	r3, [r7, #23]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80037fe:	4b77      	ldr	r3, [pc, #476]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003802:	f023 0207 	bic.w	r2, r3, #7
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800380a:	4974      	ldr	r1, [pc, #464]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800380c:	4313      	orrs	r3, r2
 800380e:	654b      	str	r3, [r1, #84]	; 0x54
 8003810:	e001      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003812:	7dfb      	ldrb	r3, [r7, #23]
 8003814:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	2b00      	cmp	r3, #0
 8003820:	d03a      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003828:	2b05      	cmp	r3, #5
 800382a:	d821      	bhi.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800382c:	a201      	add	r2, pc, #4	; (adr r2, 8003834 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800382e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003832:	bf00      	nop
 8003834:	08003877 	.word	0x08003877
 8003838:	0800384d 	.word	0x0800384d
 800383c:	0800385f 	.word	0x0800385f
 8003840:	08003877 	.word	0x08003877
 8003844:	08003877 	.word	0x08003877
 8003848:	08003877 	.word	0x08003877
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3304      	adds	r3, #4
 8003850:	2101      	movs	r1, #1
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fd74 	bl	8004340 <RCCEx_PLL2_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800385c:	e00c      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3324      	adds	r3, #36	; 0x24
 8003862:	2101      	movs	r1, #1
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fe1d 	bl	80044a4 <RCCEx_PLL3_Config>
 800386a:	4603      	mov	r3, r0
 800386c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800386e:	e003      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	75fb      	strb	r3, [r7, #23]
      break;
 8003874:	e000      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003876:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003878:	7dfb      	ldrb	r3, [r7, #23]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10a      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800387e:	4b57      	ldr	r3, [pc, #348]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003882:	f023 0207 	bic.w	r2, r3, #7
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388c:	4953      	ldr	r1, [pc, #332]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800388e:	4313      	orrs	r3, r2
 8003890:	658b      	str	r3, [r1, #88]	; 0x58
 8003892:	e001      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003894:	7dfb      	ldrb	r3, [r7, #23]
 8003896:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0320 	and.w	r3, r3, #32
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d04b      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038ae:	d02e      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80038b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038b4:	d828      	bhi.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80038b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ba:	d02a      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c0:	d822      	bhi.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80038c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038c6:	d026      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80038c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038cc:	d81c      	bhi.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80038ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038d2:	d010      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80038d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038d8:	d816      	bhi.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d01d      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80038de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038e2:	d111      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3304      	adds	r3, #4
 80038e8:	2100      	movs	r1, #0
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fd28 	bl	8004340 <RCCEx_PLL2_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80038f4:	e012      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3324      	adds	r3, #36	; 0x24
 80038fa:	2102      	movs	r1, #2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 fdd1 	bl	80044a4 <RCCEx_PLL3_Config>
 8003902:	4603      	mov	r3, r0
 8003904:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003906:	e009      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	75fb      	strb	r3, [r7, #23]
      break;
 800390c:	e006      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800390e:	bf00      	nop
 8003910:	e004      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003912:	bf00      	nop
 8003914:	e002      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003916:	bf00      	nop
 8003918:	e000      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800391a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800391c:	7dfb      	ldrb	r3, [r7, #23]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10a      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003922:	4b2e      	ldr	r3, [pc, #184]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003926:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003930:	492a      	ldr	r1, [pc, #168]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003932:	4313      	orrs	r3, r2
 8003934:	654b      	str	r3, [r1, #84]	; 0x54
 8003936:	e001      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003938:	7dfb      	ldrb	r3, [r7, #23]
 800393a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003944:	2b00      	cmp	r3, #0
 8003946:	d04d      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800394e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003952:	d02e      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003954:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003958:	d828      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800395a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395e:	d02a      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003964:	d822      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003966:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800396a:	d026      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800396c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003970:	d81c      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003976:	d010      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800397c:	d816      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800397e:	2b00      	cmp	r3, #0
 8003980:	d01d      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003986:	d111      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3304      	adds	r3, #4
 800398c:	2100      	movs	r1, #0
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fcd6 	bl	8004340 <RCCEx_PLL2_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003998:	e012      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3324      	adds	r3, #36	; 0x24
 800399e:	2102      	movs	r1, #2
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fd7f 	bl	80044a4 <RCCEx_PLL3_Config>
 80039a6:	4603      	mov	r3, r0
 80039a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80039aa:	e009      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	75fb      	strb	r3, [r7, #23]
      break;
 80039b0:	e006      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80039b2:	bf00      	nop
 80039b4:	e004      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80039b6:	bf00      	nop
 80039b8:	e002      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80039ba:	bf00      	nop
 80039bc:	e000      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80039be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039c0:	7dfb      	ldrb	r3, [r7, #23]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10c      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80039c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039d4:	4901      	ldr	r1, [pc, #4]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	658b      	str	r3, [r1, #88]	; 0x58
 80039da:	e003      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80039dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e0:	7dfb      	ldrb	r3, [r7, #23]
 80039e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d04b      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80039fa:	d02e      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80039fc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003a00:	d828      	bhi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a06:	d02a      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a0c:	d822      	bhi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003a0e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003a12:	d026      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003a14:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003a18:	d81c      	bhi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003a1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a1e:	d010      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a24:	d816      	bhi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d01d      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2e:	d111      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3304      	adds	r3, #4
 8003a34:	2100      	movs	r1, #0
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fc82 	bl	8004340 <RCCEx_PLL2_Config>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003a40:	e012      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3324      	adds	r3, #36	; 0x24
 8003a46:	2102      	movs	r1, #2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 fd2b 	bl	80044a4 <RCCEx_PLL3_Config>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003a52:	e009      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	75fb      	strb	r3, [r7, #23]
      break;
 8003a58:	e006      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003a5a:	bf00      	nop
 8003a5c:	e004      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003a5e:	bf00      	nop
 8003a60:	e002      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003a62:	bf00      	nop
 8003a64:	e000      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003a66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a68:	7dfb      	ldrb	r3, [r7, #23]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10a      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003a6e:	4b9d      	ldr	r3, [pc, #628]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a7c:	4999      	ldr	r1, [pc, #612]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	658b      	str	r3, [r1, #88]	; 0x58
 8003a82:	e001      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a84:	7dfb      	ldrb	r3, [r7, #23]
 8003a86:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d01a      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9e:	d10a      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3324      	adds	r3, #36	; 0x24
 8003aa4:	2102      	movs	r1, #2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 fcfc 	bl	80044a4 <RCCEx_PLL3_Config>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003ab6:	4b8b      	ldr	r3, [pc, #556]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ac4:	4987      	ldr	r1, [pc, #540]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d01a      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ae0:	d10a      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3324      	adds	r3, #36	; 0x24
 8003ae6:	2102      	movs	r1, #2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 fcdb 	bl	80044a4 <RCCEx_PLL3_Config>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003af8:	4b7a      	ldr	r3, [pc, #488]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b06:	4977      	ldr	r1, [pc, #476]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d034      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b22:	d01d      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003b24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b28:	d817      	bhi.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b32:	d009      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003b34:	e011      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fbff 	bl	8004340 <RCCEx_PLL2_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003b46:	e00c      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3324      	adds	r3, #36	; 0x24
 8003b4c:	2102      	movs	r1, #2
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fca8 	bl	80044a4 <RCCEx_PLL3_Config>
 8003b54:	4603      	mov	r3, r0
 8003b56:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003b58:	e003      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b5e:	e000      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003b60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b62:	7dfb      	ldrb	r3, [r7, #23]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10a      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b68:	4b5e      	ldr	r3, [pc, #376]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b76:	495b      	ldr	r1, [pc, #364]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	658b      	str	r3, [r1, #88]	; 0x58
 8003b7c:	e001      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7e:	7dfb      	ldrb	r3, [r7, #23]
 8003b80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d033      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b98:	d01c      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003b9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b9e:	d816      	bhi.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ba4:	d003      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003ba6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003baa:	d007      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003bac:	e00f      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bae:	4b4d      	ldr	r3, [pc, #308]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb2:	4a4c      	ldr	r2, [pc, #304]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003bba:	e00c      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3324      	adds	r3, #36	; 0x24
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fc6e 	bl	80044a4 <RCCEx_PLL3_Config>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003bcc:	e003      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	75fb      	strb	r3, [r7, #23]
      break;
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003bd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bd6:	7dfb      	ldrb	r3, [r7, #23]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10a      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bdc:	4b41      	ldr	r3, [pc, #260]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bea:	493e      	ldr	r1, [pc, #248]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	654b      	str	r3, [r1, #84]	; 0x54
 8003bf0:	e001      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf2:	7dfb      	ldrb	r3, [r7, #23]
 8003bf4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d029      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c0e:	d007      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003c10:	e00f      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c12:	4b34      	ldr	r3, [pc, #208]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	4a33      	ldr	r2, [pc, #204]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003c1e:	e00b      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3304      	adds	r3, #4
 8003c24:	2102      	movs	r1, #2
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fb8a 	bl	8004340 <RCCEx_PLL2_Config>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003c30:	e002      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	75fb      	strb	r3, [r7, #23]
      break;
 8003c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c38:	7dfb      	ldrb	r3, [r7, #23]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003c3e:	4b29      	ldr	r3, [pc, #164]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4a:	4926      	ldr	r1, [pc, #152]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c50:	e001      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c52:	7dfb      	ldrb	r3, [r7, #23]
 8003c54:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3324      	adds	r3, #36	; 0x24
 8003c66:	2102      	movs	r1, #2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 fc1b 	bl	80044a4 <RCCEx_PLL3_Config>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d033      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c8c:	d017      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003c8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c92:	d811      	bhi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c98:	d013      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c9e:	d80b      	bhi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d010      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca8:	d106      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003caa:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	4a0d      	ldr	r2, [pc, #52]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003cb6:	e007      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	75fb      	strb	r3, [r7, #23]
      break;
 8003cbc:	e004      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003cbe:	bf00      	nop
 8003cc0:	e002      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003cc2:	bf00      	nop
 8003cc4:	e000      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc8:	7dfb      	ldrb	r3, [r7, #23]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10c      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cce:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cda:	4902      	ldr	r1, [pc, #8]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	654b      	str	r3, [r1, #84]	; 0x54
 8003ce0:	e004      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003ce2:	bf00      	nop
 8003ce4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
 8003cea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d008      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cf8:	4b31      	ldr	r3, [pc, #196]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d04:	492e      	ldr	r1, [pc, #184]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d009      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003d16:	4b2a      	ldr	r3, [pc, #168]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d24:	4926      	ldr	r1, [pc, #152]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d008      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d36:	4b22      	ldr	r3, [pc, #136]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d3a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d42:	491f      	ldr	r1, [pc, #124]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00d      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d54:	4b1a      	ldr	r3, [pc, #104]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	4a19      	ldr	r2, [pc, #100]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d5e:	6113      	str	r3, [r2, #16]
 8003d60:	4b17      	ldr	r3, [pc, #92]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d6a:	4915      	ldr	r1, [pc, #84]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	da08      	bge.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003d78:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d84:	490e      	ldr	r1, [pc, #56]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d96:	4b0a      	ldr	r3, [pc, #40]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da4:	4906      	ldr	r1, [pc, #24]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003daa:	7dbb      	ldrb	r3, [r7, #22]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	e000      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	58024400 	.word	0x58024400

08003dc4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003dc8:	f7ff f85a 	bl	8002e80 <HAL_RCC_GetHCLKFreq>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	091b      	lsrs	r3, r3, #4
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	4904      	ldr	r1, [pc, #16]	; (8003dec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003dda:	5ccb      	ldrb	r3, [r1, r3]
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	58024400 	.word	0x58024400
 8003dec:	08007d70 	.word	0x08007d70

08003df0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b089      	sub	sp, #36	; 0x24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003df8:	4ba1      	ldr	r3, [pc, #644]	; (8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003e02:	4b9f      	ldr	r3, [pc, #636]	; (8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e06:	0b1b      	lsrs	r3, r3, #12
 8003e08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e0c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003e0e:	4b9c      	ldr	r3, [pc, #624]	; (8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	091b      	lsrs	r3, r3, #4
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003e1a:	4b99      	ldr	r3, [pc, #612]	; (8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1e:	08db      	lsrs	r3, r3, #3
 8003e20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	fb02 f303 	mul.w	r3, r2, r3
 8003e2a:	ee07 3a90 	vmov	s15, r3
 8003e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 8111 	beq.w	8004060 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	f000 8083 	beq.w	8003f4c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	f200 80a1 	bhi.w	8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d056      	beq.n	8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003e5a:	e099      	b.n	8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e5c:	4b88      	ldr	r3, [pc, #544]	; (8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d02d      	beq.n	8003ec4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e68:	4b85      	ldr	r3, [pc, #532]	; (8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	08db      	lsrs	r3, r3, #3
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	4a84      	ldr	r2, [pc, #528]	; (8004084 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003e74:	fa22 f303 	lsr.w	r3, r2, r3
 8003e78:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	ee07 3a90 	vmov	s15, r3
 8003e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	ee07 3a90 	vmov	s15, r3
 8003e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e92:	4b7b      	ldr	r3, [pc, #492]	; (8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ea6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004088 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ebe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003ec2:	e087      	b.n	8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ece:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800408c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ed6:	4b6a      	ldr	r3, [pc, #424]	; (8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004088 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f06:	e065      	b.n	8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f12:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004090 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f1a:	4b59      	ldr	r3, [pc, #356]	; (8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f2e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004088 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f4a:	e043      	b.n	8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f56:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004094 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f5e:	4b48      	ldr	r3, [pc, #288]	; (8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f66:	ee07 3a90 	vmov	s15, r3
 8003f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f72:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004088 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f8e:	e021      	b.n	8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	ee07 3a90 	vmov	s15, r3
 8003f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f9a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004090 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fa2:	4b37      	ldr	r3, [pc, #220]	; (8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003faa:	ee07 3a90 	vmov	s15, r3
 8003fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fb6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004088 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fd2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003fd4:	4b2a      	ldr	r3, [pc, #168]	; (8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd8:	0a5b      	lsrs	r3, r3, #9
 8003fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fee:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ffa:	ee17 2a90 	vmov	r2, s15
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004002:	4b1f      	ldr	r3, [pc, #124]	; (8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	0c1b      	lsrs	r3, r3, #16
 8004008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800400c:	ee07 3a90 	vmov	s15, r3
 8004010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004014:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004018:	ee37 7a87 	vadd.f32	s14, s15, s14
 800401c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004028:	ee17 2a90 	vmov	r2, s15
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004030:	4b13      	ldr	r3, [pc, #76]	; (8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004034:	0e1b      	lsrs	r3, r3, #24
 8004036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800403a:	ee07 3a90 	vmov	s15, r3
 800403e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004042:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004046:	ee37 7a87 	vadd.f32	s14, s15, s14
 800404a:	edd7 6a07 	vldr	s13, [r7, #28]
 800404e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004056:	ee17 2a90 	vmov	r2, s15
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800405e:	e008      	b.n	8004072 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	609a      	str	r2, [r3, #8]
}
 8004072:	bf00      	nop
 8004074:	3724      	adds	r7, #36	; 0x24
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	58024400 	.word	0x58024400
 8004084:	03d09000 	.word	0x03d09000
 8004088:	46000000 	.word	0x46000000
 800408c:	4c742400 	.word	0x4c742400
 8004090:	4a742400 	.word	0x4a742400
 8004094:	4bbebc20 	.word	0x4bbebc20

08004098 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004098:	b480      	push	{r7}
 800409a:	b089      	sub	sp, #36	; 0x24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040a0:	4ba1      	ldr	r3, [pc, #644]	; (8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a4:	f003 0303 	and.w	r3, r3, #3
 80040a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80040aa:	4b9f      	ldr	r3, [pc, #636]	; (8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	0d1b      	lsrs	r3, r3, #20
 80040b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80040b6:	4b9c      	ldr	r3, [pc, #624]	; (8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	0a1b      	lsrs	r3, r3, #8
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80040c2:	4b99      	ldr	r3, [pc, #612]	; (8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c6:	08db      	lsrs	r3, r3, #3
 80040c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	fb02 f303 	mul.w	r3, r2, r3
 80040d2:	ee07 3a90 	vmov	s15, r3
 80040d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 8111 	beq.w	8004308 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	f000 8083 	beq.w	80041f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	f200 80a1 	bhi.w	8004238 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d056      	beq.n	80041b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004102:	e099      	b.n	8004238 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004104:	4b88      	ldr	r3, [pc, #544]	; (8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b00      	cmp	r3, #0
 800410e:	d02d      	beq.n	800416c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004110:	4b85      	ldr	r3, [pc, #532]	; (8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	08db      	lsrs	r3, r3, #3
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	4a84      	ldr	r2, [pc, #528]	; (800432c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
 8004120:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	ee07 3a90 	vmov	s15, r3
 8004128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	ee07 3a90 	vmov	s15, r3
 8004132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800413a:	4b7b      	ldr	r3, [pc, #492]	; (8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800414a:	ed97 6a03 	vldr	s12, [r7, #12]
 800414e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004330 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800415a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800415e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004166:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800416a:	e087      	b.n	800427c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004176:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004334 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800417a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800417e:	4b6a      	ldr	r3, [pc, #424]	; (8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004186:	ee07 3a90 	vmov	s15, r3
 800418a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800418e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004192:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004330 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800419a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800419e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041ae:	e065      	b.n	800427c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80041be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041c2:	4b59      	ldr	r3, [pc, #356]	; (8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ca:	ee07 3a90 	vmov	s15, r3
 80041ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80041d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004330 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041f2:	e043      	b.n	800427c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	ee07 3a90 	vmov	s15, r3
 80041fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800433c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004206:	4b48      	ldr	r3, [pc, #288]	; (8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800420e:	ee07 3a90 	vmov	s15, r3
 8004212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004216:	ed97 6a03 	vldr	s12, [r7, #12]
 800421a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004330 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800421e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800422a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800422e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004232:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004236:	e021      	b.n	800427c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004242:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800424a:	4b37      	ldr	r3, [pc, #220]	; (8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004252:	ee07 3a90 	vmov	s15, r3
 8004256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800425a:	ed97 6a03 	vldr	s12, [r7, #12]
 800425e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004330 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800426a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800426e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004276:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800427a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800427c:	4b2a      	ldr	r3, [pc, #168]	; (8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	0a5b      	lsrs	r3, r3, #9
 8004282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004286:	ee07 3a90 	vmov	s15, r3
 800428a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800428e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004292:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004296:	edd7 6a07 	vldr	s13, [r7, #28]
 800429a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800429e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042a2:	ee17 2a90 	vmov	r2, s15
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80042aa:	4b1f      	ldr	r3, [pc, #124]	; (8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	0c1b      	lsrs	r3, r3, #16
 80042b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042b4:	ee07 3a90 	vmov	s15, r3
 80042b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80042c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042d0:	ee17 2a90 	vmov	r2, s15
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80042d8:	4b13      	ldr	r3, [pc, #76]	; (8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	0e1b      	lsrs	r3, r3, #24
 80042de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042e2:	ee07 3a90 	vmov	s15, r3
 80042e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80042f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042fe:	ee17 2a90 	vmov	r2, s15
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004306:	e008      	b.n	800431a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	609a      	str	r2, [r3, #8]
}
 800431a:	bf00      	nop
 800431c:	3724      	adds	r7, #36	; 0x24
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	58024400 	.word	0x58024400
 800432c:	03d09000 	.word	0x03d09000
 8004330:	46000000 	.word	0x46000000
 8004334:	4c742400 	.word	0x4c742400
 8004338:	4a742400 	.word	0x4a742400
 800433c:	4bbebc20 	.word	0x4bbebc20

08004340 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800434e:	4b53      	ldr	r3, [pc, #332]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	2b03      	cmp	r3, #3
 8004358:	d101      	bne.n	800435e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e099      	b.n	8004492 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800435e:	4b4f      	ldr	r3, [pc, #316]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a4e      	ldr	r2, [pc, #312]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 8004364:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800436a:	f7fc fdb5 	bl	8000ed8 <HAL_GetTick>
 800436e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004370:	e008      	b.n	8004384 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004372:	f7fc fdb1 	bl	8000ed8 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e086      	b.n	8004492 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004384:	4b45      	ldr	r3, [pc, #276]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f0      	bne.n	8004372 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004390:	4b42      	ldr	r3, [pc, #264]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	031b      	lsls	r3, r3, #12
 800439e:	493f      	ldr	r1, [pc, #252]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	628b      	str	r3, [r1, #40]	; 0x28
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	025b      	lsls	r3, r3, #9
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	3b01      	subs	r3, #1
 80043c0:	041b      	lsls	r3, r3, #16
 80043c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	061b      	lsls	r3, r3, #24
 80043d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80043d4:	4931      	ldr	r1, [pc, #196]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80043da:	4b30      	ldr	r3, [pc, #192]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	492d      	ldr	r1, [pc, #180]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80043ec:	4b2b      	ldr	r3, [pc, #172]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	f023 0220 	bic.w	r2, r3, #32
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	4928      	ldr	r1, [pc, #160]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80043fe:	4b27      	ldr	r3, [pc, #156]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	4a26      	ldr	r2, [pc, #152]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 8004404:	f023 0310 	bic.w	r3, r3, #16
 8004408:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800440a:	4b24      	ldr	r3, [pc, #144]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 800440c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800440e:	4b24      	ldr	r3, [pc, #144]	; (80044a0 <RCCEx_PLL2_Config+0x160>)
 8004410:	4013      	ands	r3, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	69d2      	ldr	r2, [r2, #28]
 8004416:	00d2      	lsls	r2, r2, #3
 8004418:	4920      	ldr	r1, [pc, #128]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 800441a:	4313      	orrs	r3, r2
 800441c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800441e:	4b1f      	ldr	r3, [pc, #124]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	4a1e      	ldr	r2, [pc, #120]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 8004424:	f043 0310 	orr.w	r3, r3, #16
 8004428:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d106      	bne.n	800443e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004430:	4b1a      	ldr	r3, [pc, #104]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	4a19      	ldr	r2, [pc, #100]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 8004436:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800443a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800443c:	e00f      	b.n	800445e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d106      	bne.n	8004452 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004444:	4b15      	ldr	r3, [pc, #84]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	4a14      	ldr	r2, [pc, #80]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 800444a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800444e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004450:	e005      	b.n	800445e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004452:	4b12      	ldr	r3, [pc, #72]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	4a11      	ldr	r2, [pc, #68]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 8004458:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800445c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800445e:	4b0f      	ldr	r3, [pc, #60]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a0e      	ldr	r2, [pc, #56]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 8004464:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800446a:	f7fc fd35 	bl	8000ed8 <HAL_GetTick>
 800446e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004470:	e008      	b.n	8004484 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004472:	f7fc fd31 	bl	8000ed8 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e006      	b.n	8004492 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <RCCEx_PLL2_Config+0x15c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004490:	7bfb      	ldrb	r3, [r7, #15]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	58024400 	.word	0x58024400
 80044a0:	ffff0007 	.word	0xffff0007

080044a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044b2:	4b53      	ldr	r3, [pc, #332]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 80044b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	d101      	bne.n	80044c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e099      	b.n	80045f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80044c2:	4b4f      	ldr	r3, [pc, #316]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a4e      	ldr	r2, [pc, #312]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 80044c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ce:	f7fc fd03 	bl	8000ed8 <HAL_GetTick>
 80044d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80044d4:	e008      	b.n	80044e8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80044d6:	f7fc fcff 	bl	8000ed8 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e086      	b.n	80045f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80044e8:	4b45      	ldr	r3, [pc, #276]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1f0      	bne.n	80044d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80044f4:	4b42      	ldr	r3, [pc, #264]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	051b      	lsls	r3, r3, #20
 8004502:	493f      	ldr	r1, [pc, #252]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 8004504:	4313      	orrs	r3, r2
 8004506:	628b      	str	r3, [r1, #40]	; 0x28
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	3b01      	subs	r3, #1
 800450e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	3b01      	subs	r3, #1
 8004518:	025b      	lsls	r3, r3, #9
 800451a:	b29b      	uxth	r3, r3
 800451c:	431a      	orrs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	3b01      	subs	r3, #1
 8004524:	041b      	lsls	r3, r3, #16
 8004526:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	3b01      	subs	r3, #1
 8004532:	061b      	lsls	r3, r3, #24
 8004534:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004538:	4931      	ldr	r1, [pc, #196]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 800453a:	4313      	orrs	r3, r2
 800453c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800453e:	4b30      	ldr	r3, [pc, #192]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 8004540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004542:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	492d      	ldr	r1, [pc, #180]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 800454c:	4313      	orrs	r3, r2
 800454e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004550:	4b2b      	ldr	r3, [pc, #172]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	4928      	ldr	r1, [pc, #160]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 800455e:	4313      	orrs	r3, r2
 8004560:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004562:	4b27      	ldr	r3, [pc, #156]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	4a26      	ldr	r2, [pc, #152]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 8004568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800456c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800456e:	4b24      	ldr	r3, [pc, #144]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 8004570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004572:	4b24      	ldr	r3, [pc, #144]	; (8004604 <RCCEx_PLL3_Config+0x160>)
 8004574:	4013      	ands	r3, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	69d2      	ldr	r2, [r2, #28]
 800457a:	00d2      	lsls	r2, r2, #3
 800457c:	4920      	ldr	r1, [pc, #128]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 800457e:	4313      	orrs	r3, r2
 8004580:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004582:	4b1f      	ldr	r3, [pc, #124]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 8004584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004586:	4a1e      	ldr	r2, [pc, #120]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 8004588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800458c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d106      	bne.n	80045a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004594:	4b1a      	ldr	r3, [pc, #104]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	4a19      	ldr	r2, [pc, #100]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 800459a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800459e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045a0:	e00f      	b.n	80045c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d106      	bne.n	80045b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80045a8:	4b15      	ldr	r3, [pc, #84]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	4a14      	ldr	r2, [pc, #80]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 80045ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045b4:	e005      	b.n	80045c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80045b6:	4b12      	ldr	r3, [pc, #72]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 80045b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ba:	4a11      	ldr	r2, [pc, #68]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 80045bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80045c2:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a0e      	ldr	r2, [pc, #56]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 80045c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ce:	f7fc fc83 	bl	8000ed8 <HAL_GetTick>
 80045d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045d4:	e008      	b.n	80045e8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80045d6:	f7fc fc7f 	bl	8000ed8 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e006      	b.n	80045f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <RCCEx_PLL3_Config+0x15c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	58024400 	.word	0x58024400
 8004604:	ffff0007 	.word	0xffff0007

08004608 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e042      	b.n	80046a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004620:	2b00      	cmp	r3, #0
 8004622:	d106      	bne.n	8004632 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7fc fadd 	bl	8000bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2224      	movs	r2, #36	; 0x24
 8004636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0201 	bic.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fcd6 	bl	8004ffc <UART_SetConfig>
 8004650:	4603      	mov	r3, r0
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e022      	b.n	80046a0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f001 fa32 	bl	8005acc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004676:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004686:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f001 fab9 	bl	8005c10 <UART_CheckIdleState>
 800469e:	4603      	mov	r3, r0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08a      	sub	sp, #40	; 0x28
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	603b      	str	r3, [r7, #0]
 80046b4:	4613      	mov	r3, r2
 80046b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046be:	2b20      	cmp	r3, #32
 80046c0:	f040 8083 	bne.w	80047ca <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <HAL_UART_Transmit+0x28>
 80046ca:	88fb      	ldrh	r3, [r7, #6]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e07b      	b.n	80047cc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_UART_Transmit+0x3a>
 80046de:	2302      	movs	r3, #2
 80046e0:	e074      	b.n	80047cc <HAL_UART_Transmit+0x124>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2221      	movs	r2, #33	; 0x21
 80046f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046fa:	f7fc fbed 	bl	8000ed8 <HAL_GetTick>
 80046fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	88fa      	ldrh	r2, [r7, #6]
 8004704:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	88fa      	ldrh	r2, [r7, #6]
 800470c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004718:	d108      	bne.n	800472c <HAL_UART_Transmit+0x84>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d104      	bne.n	800472c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	61bb      	str	r3, [r7, #24]
 800472a:	e003      	b.n	8004734 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004730:	2300      	movs	r3, #0
 8004732:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800473c:	e02c      	b.n	8004798 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2200      	movs	r2, #0
 8004746:	2180      	movs	r1, #128	; 0x80
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f001 faac 	bl	8005ca6 <UART_WaitOnFlagUntilTimeout>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e039      	b.n	80047cc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10b      	bne.n	8004776 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800476c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	3302      	adds	r3, #2
 8004772:	61bb      	str	r3, [r7, #24]
 8004774:	e007      	b.n	8004786 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	781a      	ldrb	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	3301      	adds	r3, #1
 8004784:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800478c:	b29b      	uxth	r3, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1cc      	bne.n	800473e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2200      	movs	r2, #0
 80047ac:	2140      	movs	r1, #64	; 0x40
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f001 fa79 	bl	8005ca6 <UART_WaitOnFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e006      	b.n	80047cc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	e000      	b.n	80047cc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80047ca:	2302      	movs	r3, #2
  }
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3720      	adds	r7, #32
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08a      	sub	sp, #40	; 0x28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	4613      	mov	r3, r2
 80047e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	d142      	bne.n	8004872 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <HAL_UART_Receive_IT+0x24>
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e03b      	b.n	8004874 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_UART_Receive_IT+0x36>
 8004806:	2302      	movs	r3, #2
 8004808:	e034      	b.n	8004874 <HAL_UART_Receive_IT+0xa0>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a17      	ldr	r2, [pc, #92]	; (800487c <HAL_UART_Receive_IT+0xa8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d01f      	beq.n	8004862 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d018      	beq.n	8004862 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	e853 3f00 	ldrex	r3, [r3]
 800483c:	613b      	str	r3, [r7, #16]
   return(result);
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	623b      	str	r3, [r7, #32]
 8004850:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004852:	69f9      	ldr	r1, [r7, #28]
 8004854:	6a3a      	ldr	r2, [r7, #32]
 8004856:	e841 2300 	strex	r3, r2, [r1]
 800485a:	61bb      	str	r3, [r7, #24]
   return(result);
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1e6      	bne.n	8004830 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004862:	88fb      	ldrh	r3, [r7, #6]
 8004864:	461a      	mov	r2, r3
 8004866:	68b9      	ldr	r1, [r7, #8]
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f001 fae5 	bl	8005e38 <UART_Start_Receive_IT>
 800486e:	4603      	mov	r3, r0
 8004870:	e000      	b.n	8004874 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004872:	2302      	movs	r3, #2
  }
}
 8004874:	4618      	mov	r0, r3
 8004876:	3728      	adds	r7, #40	; 0x28
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	58000c00 	.word	0x58000c00

08004880 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b0ba      	sub	sp, #232	; 0xe8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80048a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80048aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80048ae:	4013      	ands	r3, r2
 80048b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80048b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d11b      	bne.n	80048f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80048bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048c0:	f003 0320 	and.w	r3, r3, #32
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d015      	beq.n	80048f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80048c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048cc:	f003 0320 	and.w	r3, r3, #32
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d105      	bne.n	80048e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80048d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d009      	beq.n	80048f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 835a 	beq.w	8004f9e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	4798      	blx	r3
      }
      return;
 80048f2:	e354      	b.n	8004f9e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80048f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 811f 	beq.w	8004b3c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80048fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004902:	4b8b      	ldr	r3, [pc, #556]	; (8004b30 <HAL_UART_IRQHandler+0x2b0>)
 8004904:	4013      	ands	r3, r2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d106      	bne.n	8004918 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800490a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800490e:	4b89      	ldr	r3, [pc, #548]	; (8004b34 <HAL_UART_IRQHandler+0x2b4>)
 8004910:	4013      	ands	r3, r2
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 8112 	beq.w	8004b3c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d011      	beq.n	8004948 <HAL_UART_IRQHandler+0xc8>
 8004924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00b      	beq.n	8004948 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2201      	movs	r2, #1
 8004936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800493e:	f043 0201 	orr.w	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d011      	beq.n	8004978 <HAL_UART_IRQHandler+0xf8>
 8004954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00b      	beq.n	8004978 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2202      	movs	r2, #2
 8004966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800496e:	f043 0204 	orr.w	r2, r3, #4
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d011      	beq.n	80049a8 <HAL_UART_IRQHandler+0x128>
 8004984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00b      	beq.n	80049a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2204      	movs	r2, #4
 8004996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800499e:	f043 0202 	orr.w	r2, r3, #2
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80049a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d017      	beq.n	80049e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80049b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b8:	f003 0320 	and.w	r3, r3, #32
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d105      	bne.n	80049cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80049c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80049c4:	4b5a      	ldr	r3, [pc, #360]	; (8004b30 <HAL_UART_IRQHandler+0x2b0>)
 80049c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00b      	beq.n	80049e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2208      	movs	r2, #8
 80049d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049da:	f043 0208 	orr.w	r2, r3, #8
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d012      	beq.n	8004a16 <HAL_UART_IRQHandler+0x196>
 80049f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00c      	beq.n	8004a16 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a0c:	f043 0220 	orr.w	r2, r3, #32
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 82c0 	beq.w	8004fa2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d013      	beq.n	8004a56 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d105      	bne.n	8004a46 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d007      	beq.n	8004a56 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6a:	2b40      	cmp	r3, #64	; 0x40
 8004a6c:	d005      	beq.n	8004a7a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a72:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d04f      	beq.n	8004b1a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f001 fb06 	bl	800608c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8a:	2b40      	cmp	r3, #64	; 0x40
 8004a8c:	d141      	bne.n	8004b12 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3308      	adds	r3, #8
 8004a94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a9c:	e853 3f00 	ldrex	r3, [r3]
 8004aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3308      	adds	r3, #8
 8004ab6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004aba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004abe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ac6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1d9      	bne.n	8004a8e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d013      	beq.n	8004b0a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ae6:	4a14      	ldr	r2, [pc, #80]	; (8004b38 <HAL_UART_IRQHandler+0x2b8>)
 8004ae8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fc fe38 	bl	8001764 <HAL_DMA_Abort_IT>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d017      	beq.n	8004b2a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004b04:	4610      	mov	r0, r2
 8004b06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b08:	e00f      	b.n	8004b2a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fa60 	bl	8004fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b10:	e00b      	b.n	8004b2a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fa5c 	bl	8004fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b18:	e007      	b.n	8004b2a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fa58 	bl	8004fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004b28:	e23b      	b.n	8004fa2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b2a:	bf00      	nop
    return;
 8004b2c:	e239      	b.n	8004fa2 <HAL_UART_IRQHandler+0x722>
 8004b2e:	bf00      	nop
 8004b30:	10000001 	.word	0x10000001
 8004b34:	04000120 	.word	0x04000120
 8004b38:	08006159 	.word	0x08006159

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	f040 81ce 	bne.w	8004ee2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b4a:	f003 0310 	and.w	r3, r3, #16
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 81c7 	beq.w	8004ee2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b58:	f003 0310 	and.w	r3, r3, #16
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 81c0 	beq.w	8004ee2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2210      	movs	r2, #16
 8004b68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b74:	2b40      	cmp	r3, #64	; 0x40
 8004b76:	f040 813b 	bne.w	8004df0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a8b      	ldr	r2, [pc, #556]	; (8004db0 <HAL_UART_IRQHandler+0x530>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d059      	beq.n	8004c3a <HAL_UART_IRQHandler+0x3ba>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a89      	ldr	r2, [pc, #548]	; (8004db4 <HAL_UART_IRQHandler+0x534>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d053      	beq.n	8004c3a <HAL_UART_IRQHandler+0x3ba>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a87      	ldr	r2, [pc, #540]	; (8004db8 <HAL_UART_IRQHandler+0x538>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d04d      	beq.n	8004c3a <HAL_UART_IRQHandler+0x3ba>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a85      	ldr	r2, [pc, #532]	; (8004dbc <HAL_UART_IRQHandler+0x53c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d047      	beq.n	8004c3a <HAL_UART_IRQHandler+0x3ba>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a83      	ldr	r2, [pc, #524]	; (8004dc0 <HAL_UART_IRQHandler+0x540>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d041      	beq.n	8004c3a <HAL_UART_IRQHandler+0x3ba>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a81      	ldr	r2, [pc, #516]	; (8004dc4 <HAL_UART_IRQHandler+0x544>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d03b      	beq.n	8004c3a <HAL_UART_IRQHandler+0x3ba>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a7f      	ldr	r2, [pc, #508]	; (8004dc8 <HAL_UART_IRQHandler+0x548>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d035      	beq.n	8004c3a <HAL_UART_IRQHandler+0x3ba>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a7d      	ldr	r2, [pc, #500]	; (8004dcc <HAL_UART_IRQHandler+0x54c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d02f      	beq.n	8004c3a <HAL_UART_IRQHandler+0x3ba>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a7b      	ldr	r2, [pc, #492]	; (8004dd0 <HAL_UART_IRQHandler+0x550>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d029      	beq.n	8004c3a <HAL_UART_IRQHandler+0x3ba>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a79      	ldr	r2, [pc, #484]	; (8004dd4 <HAL_UART_IRQHandler+0x554>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d023      	beq.n	8004c3a <HAL_UART_IRQHandler+0x3ba>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a77      	ldr	r2, [pc, #476]	; (8004dd8 <HAL_UART_IRQHandler+0x558>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d01d      	beq.n	8004c3a <HAL_UART_IRQHandler+0x3ba>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a75      	ldr	r2, [pc, #468]	; (8004ddc <HAL_UART_IRQHandler+0x55c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d017      	beq.n	8004c3a <HAL_UART_IRQHandler+0x3ba>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a73      	ldr	r2, [pc, #460]	; (8004de0 <HAL_UART_IRQHandler+0x560>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d011      	beq.n	8004c3a <HAL_UART_IRQHandler+0x3ba>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a71      	ldr	r2, [pc, #452]	; (8004de4 <HAL_UART_IRQHandler+0x564>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d00b      	beq.n	8004c3a <HAL_UART_IRQHandler+0x3ba>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a6f      	ldr	r2, [pc, #444]	; (8004de8 <HAL_UART_IRQHandler+0x568>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d005      	beq.n	8004c3a <HAL_UART_IRQHandler+0x3ba>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a6d      	ldr	r2, [pc, #436]	; (8004dec <HAL_UART_IRQHandler+0x56c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d105      	bne.n	8004c46 <HAL_UART_IRQHandler+0x3c6>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	e004      	b.n	8004c50 <HAL_UART_IRQHandler+0x3d0>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 81a4 	beq.w	8004fa6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	f080 819c 	bcs.w	8004fa6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c82:	f000 8086 	beq.w	8004d92 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c92:	e853 3f00 	ldrex	r3, [r3]
 8004c96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ca2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	461a      	mov	r2, r3
 8004cac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cb4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004cbc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cc0:	e841 2300 	strex	r3, r2, [r1]
 8004cc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004cc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1da      	bne.n	8004c86 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cda:	e853 3f00 	ldrex	r3, [r3]
 8004cde:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ce2:	f023 0301 	bic.w	r3, r3, #1
 8004ce6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3308      	adds	r3, #8
 8004cf0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004cf4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004cf8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004cfc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d00:	e841 2300 	strex	r3, r2, [r1]
 8004d04:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e1      	bne.n	8004cd0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3308      	adds	r3, #8
 8004d12:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d16:	e853 3f00 	ldrex	r3, [r3]
 8004d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3308      	adds	r3, #8
 8004d2c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d30:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d38:	e841 2300 	strex	r3, r2, [r1]
 8004d3c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1e3      	bne.n	8004d0c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d62:	f023 0310 	bic.w	r3, r3, #16
 8004d66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d74:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d76:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e4      	bne.n	8004d52 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fc f9cb 	bl	8001128 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	4619      	mov	r1, r3
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f91c 	bl	8004fe4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dac:	e0fb      	b.n	8004fa6 <HAL_UART_IRQHandler+0x726>
 8004dae:	bf00      	nop
 8004db0:	40020010 	.word	0x40020010
 8004db4:	40020028 	.word	0x40020028
 8004db8:	40020040 	.word	0x40020040
 8004dbc:	40020058 	.word	0x40020058
 8004dc0:	40020070 	.word	0x40020070
 8004dc4:	40020088 	.word	0x40020088
 8004dc8:	400200a0 	.word	0x400200a0
 8004dcc:	400200b8 	.word	0x400200b8
 8004dd0:	40020410 	.word	0x40020410
 8004dd4:	40020428 	.word	0x40020428
 8004dd8:	40020440 	.word	0x40020440
 8004ddc:	40020458 	.word	0x40020458
 8004de0:	40020470 	.word	0x40020470
 8004de4:	40020488 	.word	0x40020488
 8004de8:	400204a0 	.word	0x400204a0
 8004dec:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 80cc 	beq.w	8004faa <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8004e12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 80c7 	beq.w	8004faa <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e40:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e4      	bne.n	8004e1c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3308      	adds	r3, #8
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	e853 3f00 	ldrex	r3, [r3]
 8004e60:	623b      	str	r3, [r7, #32]
   return(result);
 8004e62:	6a3a      	ldr	r2, [r7, #32]
 8004e64:	4b54      	ldr	r3, [pc, #336]	; (8004fb8 <HAL_UART_IRQHandler+0x738>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3308      	adds	r3, #8
 8004e72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e76:	633a      	str	r2, [r7, #48]	; 0x30
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e3      	bne.n	8004e52 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	e853 3f00 	ldrex	r3, [r3]
 8004eaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0310 	bic.w	r3, r3, #16
 8004eb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ec0:	61fb      	str	r3, [r7, #28]
 8004ec2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec4:	69b9      	ldr	r1, [r7, #24]
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	e841 2300 	strex	r3, r2, [r1]
 8004ecc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1e4      	bne.n	8004e9e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ed4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ed8:	4619      	mov	r1, r3
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f882 	bl	8004fe4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ee0:	e063      	b.n	8004faa <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00e      	beq.n	8004f0c <HAL_UART_IRQHandler+0x68c>
 8004eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d008      	beq.n	8004f0c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f001 fdc5 	bl	8006a94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f0a:	e051      	b.n	8004fb0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d014      	beq.n	8004f42 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d105      	bne.n	8004f30 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d008      	beq.n	8004f42 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d03a      	beq.n	8004fae <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	4798      	blx	r3
    }
    return;
 8004f40:	e035      	b.n	8004fae <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d009      	beq.n	8004f62 <HAL_UART_IRQHandler+0x6e2>
 8004f4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f001 f912 	bl	8006184 <UART_EndTransmit_IT>
    return;
 8004f60:	e026      	b.n	8004fb0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d009      	beq.n	8004f82 <HAL_UART_IRQHandler+0x702>
 8004f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f72:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f001 fd9e 	bl	8006abc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f80:	e016      	b.n	8004fb0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d010      	beq.n	8004fb0 <HAL_UART_IRQHandler+0x730>
 8004f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	da0c      	bge.n	8004fb0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f001 fd86 	bl	8006aa8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f9c:	e008      	b.n	8004fb0 <HAL_UART_IRQHandler+0x730>
      return;
 8004f9e:	bf00      	nop
 8004fa0:	e006      	b.n	8004fb0 <HAL_UART_IRQHandler+0x730>
    return;
 8004fa2:	bf00      	nop
 8004fa4:	e004      	b.n	8004fb0 <HAL_UART_IRQHandler+0x730>
      return;
 8004fa6:	bf00      	nop
 8004fa8:	e002      	b.n	8004fb0 <HAL_UART_IRQHandler+0x730>
      return;
 8004faa:	bf00      	nop
 8004fac:	e000      	b.n	8004fb0 <HAL_UART_IRQHandler+0x730>
    return;
 8004fae:	bf00      	nop
  }
}
 8004fb0:	37e8      	adds	r7, #232	; 0xe8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	effffffe 	.word	0xeffffffe

08004fbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	460b      	mov	r3, r1
 8004fee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005000:	b092      	sub	sp, #72	; 0x48
 8005002:	af00      	add	r7, sp, #0
 8005004:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	431a      	orrs	r2, r3
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	431a      	orrs	r2, r3
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	4313      	orrs	r3, r2
 8005022:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	4bbe      	ldr	r3, [pc, #760]	; (8005324 <UART_SetConfig+0x328>)
 800502c:	4013      	ands	r3, r2
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	6812      	ldr	r2, [r2, #0]
 8005032:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005034:	430b      	orrs	r3, r1
 8005036:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4ab3      	ldr	r2, [pc, #716]	; (8005328 <UART_SetConfig+0x32c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d004      	beq.n	8005068 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005064:	4313      	orrs	r3, r2
 8005066:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	4baf      	ldr	r3, [pc, #700]	; (800532c <UART_SetConfig+0x330>)
 8005070:	4013      	ands	r3, r2
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	6812      	ldr	r2, [r2, #0]
 8005076:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005078:	430b      	orrs	r3, r1
 800507a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	f023 010f 	bic.w	r1, r3, #15
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4aa6      	ldr	r2, [pc, #664]	; (8005330 <UART_SetConfig+0x334>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d177      	bne.n	800518c <UART_SetConfig+0x190>
 800509c:	4ba5      	ldr	r3, [pc, #660]	; (8005334 <UART_SetConfig+0x338>)
 800509e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050a4:	2b28      	cmp	r3, #40	; 0x28
 80050a6:	d86d      	bhi.n	8005184 <UART_SetConfig+0x188>
 80050a8:	a201      	add	r2, pc, #4	; (adr r2, 80050b0 <UART_SetConfig+0xb4>)
 80050aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ae:	bf00      	nop
 80050b0:	08005155 	.word	0x08005155
 80050b4:	08005185 	.word	0x08005185
 80050b8:	08005185 	.word	0x08005185
 80050bc:	08005185 	.word	0x08005185
 80050c0:	08005185 	.word	0x08005185
 80050c4:	08005185 	.word	0x08005185
 80050c8:	08005185 	.word	0x08005185
 80050cc:	08005185 	.word	0x08005185
 80050d0:	0800515d 	.word	0x0800515d
 80050d4:	08005185 	.word	0x08005185
 80050d8:	08005185 	.word	0x08005185
 80050dc:	08005185 	.word	0x08005185
 80050e0:	08005185 	.word	0x08005185
 80050e4:	08005185 	.word	0x08005185
 80050e8:	08005185 	.word	0x08005185
 80050ec:	08005185 	.word	0x08005185
 80050f0:	08005165 	.word	0x08005165
 80050f4:	08005185 	.word	0x08005185
 80050f8:	08005185 	.word	0x08005185
 80050fc:	08005185 	.word	0x08005185
 8005100:	08005185 	.word	0x08005185
 8005104:	08005185 	.word	0x08005185
 8005108:	08005185 	.word	0x08005185
 800510c:	08005185 	.word	0x08005185
 8005110:	0800516d 	.word	0x0800516d
 8005114:	08005185 	.word	0x08005185
 8005118:	08005185 	.word	0x08005185
 800511c:	08005185 	.word	0x08005185
 8005120:	08005185 	.word	0x08005185
 8005124:	08005185 	.word	0x08005185
 8005128:	08005185 	.word	0x08005185
 800512c:	08005185 	.word	0x08005185
 8005130:	08005175 	.word	0x08005175
 8005134:	08005185 	.word	0x08005185
 8005138:	08005185 	.word	0x08005185
 800513c:	08005185 	.word	0x08005185
 8005140:	08005185 	.word	0x08005185
 8005144:	08005185 	.word	0x08005185
 8005148:	08005185 	.word	0x08005185
 800514c:	08005185 	.word	0x08005185
 8005150:	0800517d 	.word	0x0800517d
 8005154:	2301      	movs	r3, #1
 8005156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800515a:	e222      	b.n	80055a2 <UART_SetConfig+0x5a6>
 800515c:	2304      	movs	r3, #4
 800515e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005162:	e21e      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005164:	2308      	movs	r3, #8
 8005166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800516a:	e21a      	b.n	80055a2 <UART_SetConfig+0x5a6>
 800516c:	2310      	movs	r3, #16
 800516e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005172:	e216      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005174:	2320      	movs	r3, #32
 8005176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800517a:	e212      	b.n	80055a2 <UART_SetConfig+0x5a6>
 800517c:	2340      	movs	r3, #64	; 0x40
 800517e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005182:	e20e      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005184:	2380      	movs	r3, #128	; 0x80
 8005186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800518a:	e20a      	b.n	80055a2 <UART_SetConfig+0x5a6>
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a69      	ldr	r2, [pc, #420]	; (8005338 <UART_SetConfig+0x33c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d130      	bne.n	80051f8 <UART_SetConfig+0x1fc>
 8005196:	4b67      	ldr	r3, [pc, #412]	; (8005334 <UART_SetConfig+0x338>)
 8005198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	2b05      	cmp	r3, #5
 80051a0:	d826      	bhi.n	80051f0 <UART_SetConfig+0x1f4>
 80051a2:	a201      	add	r2, pc, #4	; (adr r2, 80051a8 <UART_SetConfig+0x1ac>)
 80051a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a8:	080051c1 	.word	0x080051c1
 80051ac:	080051c9 	.word	0x080051c9
 80051b0:	080051d1 	.word	0x080051d1
 80051b4:	080051d9 	.word	0x080051d9
 80051b8:	080051e1 	.word	0x080051e1
 80051bc:	080051e9 	.word	0x080051e9
 80051c0:	2300      	movs	r3, #0
 80051c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051c6:	e1ec      	b.n	80055a2 <UART_SetConfig+0x5a6>
 80051c8:	2304      	movs	r3, #4
 80051ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ce:	e1e8      	b.n	80055a2 <UART_SetConfig+0x5a6>
 80051d0:	2308      	movs	r3, #8
 80051d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d6:	e1e4      	b.n	80055a2 <UART_SetConfig+0x5a6>
 80051d8:	2310      	movs	r3, #16
 80051da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051de:	e1e0      	b.n	80055a2 <UART_SetConfig+0x5a6>
 80051e0:	2320      	movs	r3, #32
 80051e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051e6:	e1dc      	b.n	80055a2 <UART_SetConfig+0x5a6>
 80051e8:	2340      	movs	r3, #64	; 0x40
 80051ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ee:	e1d8      	b.n	80055a2 <UART_SetConfig+0x5a6>
 80051f0:	2380      	movs	r3, #128	; 0x80
 80051f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051f6:	e1d4      	b.n	80055a2 <UART_SetConfig+0x5a6>
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a4f      	ldr	r2, [pc, #316]	; (800533c <UART_SetConfig+0x340>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d130      	bne.n	8005264 <UART_SetConfig+0x268>
 8005202:	4b4c      	ldr	r3, [pc, #304]	; (8005334 <UART_SetConfig+0x338>)
 8005204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005206:	f003 0307 	and.w	r3, r3, #7
 800520a:	2b05      	cmp	r3, #5
 800520c:	d826      	bhi.n	800525c <UART_SetConfig+0x260>
 800520e:	a201      	add	r2, pc, #4	; (adr r2, 8005214 <UART_SetConfig+0x218>)
 8005210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005214:	0800522d 	.word	0x0800522d
 8005218:	08005235 	.word	0x08005235
 800521c:	0800523d 	.word	0x0800523d
 8005220:	08005245 	.word	0x08005245
 8005224:	0800524d 	.word	0x0800524d
 8005228:	08005255 	.word	0x08005255
 800522c:	2300      	movs	r3, #0
 800522e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005232:	e1b6      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005234:	2304      	movs	r3, #4
 8005236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800523a:	e1b2      	b.n	80055a2 <UART_SetConfig+0x5a6>
 800523c:	2308      	movs	r3, #8
 800523e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005242:	e1ae      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005244:	2310      	movs	r3, #16
 8005246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800524a:	e1aa      	b.n	80055a2 <UART_SetConfig+0x5a6>
 800524c:	2320      	movs	r3, #32
 800524e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005252:	e1a6      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005254:	2340      	movs	r3, #64	; 0x40
 8005256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800525a:	e1a2      	b.n	80055a2 <UART_SetConfig+0x5a6>
 800525c:	2380      	movs	r3, #128	; 0x80
 800525e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005262:	e19e      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a35      	ldr	r2, [pc, #212]	; (8005340 <UART_SetConfig+0x344>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d130      	bne.n	80052d0 <UART_SetConfig+0x2d4>
 800526e:	4b31      	ldr	r3, [pc, #196]	; (8005334 <UART_SetConfig+0x338>)
 8005270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	2b05      	cmp	r3, #5
 8005278:	d826      	bhi.n	80052c8 <UART_SetConfig+0x2cc>
 800527a:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <UART_SetConfig+0x284>)
 800527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005280:	08005299 	.word	0x08005299
 8005284:	080052a1 	.word	0x080052a1
 8005288:	080052a9 	.word	0x080052a9
 800528c:	080052b1 	.word	0x080052b1
 8005290:	080052b9 	.word	0x080052b9
 8005294:	080052c1 	.word	0x080052c1
 8005298:	2300      	movs	r3, #0
 800529a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800529e:	e180      	b.n	80055a2 <UART_SetConfig+0x5a6>
 80052a0:	2304      	movs	r3, #4
 80052a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a6:	e17c      	b.n	80055a2 <UART_SetConfig+0x5a6>
 80052a8:	2308      	movs	r3, #8
 80052aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ae:	e178      	b.n	80055a2 <UART_SetConfig+0x5a6>
 80052b0:	2310      	movs	r3, #16
 80052b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052b6:	e174      	b.n	80055a2 <UART_SetConfig+0x5a6>
 80052b8:	2320      	movs	r3, #32
 80052ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052be:	e170      	b.n	80055a2 <UART_SetConfig+0x5a6>
 80052c0:	2340      	movs	r3, #64	; 0x40
 80052c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052c6:	e16c      	b.n	80055a2 <UART_SetConfig+0x5a6>
 80052c8:	2380      	movs	r3, #128	; 0x80
 80052ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ce:	e168      	b.n	80055a2 <UART_SetConfig+0x5a6>
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a1b      	ldr	r2, [pc, #108]	; (8005344 <UART_SetConfig+0x348>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d142      	bne.n	8005360 <UART_SetConfig+0x364>
 80052da:	4b16      	ldr	r3, [pc, #88]	; (8005334 <UART_SetConfig+0x338>)
 80052dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	2b05      	cmp	r3, #5
 80052e4:	d838      	bhi.n	8005358 <UART_SetConfig+0x35c>
 80052e6:	a201      	add	r2, pc, #4	; (adr r2, 80052ec <UART_SetConfig+0x2f0>)
 80052e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ec:	08005305 	.word	0x08005305
 80052f0:	0800530d 	.word	0x0800530d
 80052f4:	08005315 	.word	0x08005315
 80052f8:	0800531d 	.word	0x0800531d
 80052fc:	08005349 	.word	0x08005349
 8005300:	08005351 	.word	0x08005351
 8005304:	2300      	movs	r3, #0
 8005306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530a:	e14a      	b.n	80055a2 <UART_SetConfig+0x5a6>
 800530c:	2304      	movs	r3, #4
 800530e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005312:	e146      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005314:	2308      	movs	r3, #8
 8005316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800531a:	e142      	b.n	80055a2 <UART_SetConfig+0x5a6>
 800531c:	2310      	movs	r3, #16
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005322:	e13e      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005324:	cfff69f3 	.word	0xcfff69f3
 8005328:	58000c00 	.word	0x58000c00
 800532c:	11fff4ff 	.word	0x11fff4ff
 8005330:	40011000 	.word	0x40011000
 8005334:	58024400 	.word	0x58024400
 8005338:	40004400 	.word	0x40004400
 800533c:	40004800 	.word	0x40004800
 8005340:	40004c00 	.word	0x40004c00
 8005344:	40005000 	.word	0x40005000
 8005348:	2320      	movs	r3, #32
 800534a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800534e:	e128      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005350:	2340      	movs	r3, #64	; 0x40
 8005352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005356:	e124      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005358:	2380      	movs	r3, #128	; 0x80
 800535a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800535e:	e120      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4acb      	ldr	r2, [pc, #812]	; (8005694 <UART_SetConfig+0x698>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d176      	bne.n	8005458 <UART_SetConfig+0x45c>
 800536a:	4bcb      	ldr	r3, [pc, #812]	; (8005698 <UART_SetConfig+0x69c>)
 800536c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005372:	2b28      	cmp	r3, #40	; 0x28
 8005374:	d86c      	bhi.n	8005450 <UART_SetConfig+0x454>
 8005376:	a201      	add	r2, pc, #4	; (adr r2, 800537c <UART_SetConfig+0x380>)
 8005378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537c:	08005421 	.word	0x08005421
 8005380:	08005451 	.word	0x08005451
 8005384:	08005451 	.word	0x08005451
 8005388:	08005451 	.word	0x08005451
 800538c:	08005451 	.word	0x08005451
 8005390:	08005451 	.word	0x08005451
 8005394:	08005451 	.word	0x08005451
 8005398:	08005451 	.word	0x08005451
 800539c:	08005429 	.word	0x08005429
 80053a0:	08005451 	.word	0x08005451
 80053a4:	08005451 	.word	0x08005451
 80053a8:	08005451 	.word	0x08005451
 80053ac:	08005451 	.word	0x08005451
 80053b0:	08005451 	.word	0x08005451
 80053b4:	08005451 	.word	0x08005451
 80053b8:	08005451 	.word	0x08005451
 80053bc:	08005431 	.word	0x08005431
 80053c0:	08005451 	.word	0x08005451
 80053c4:	08005451 	.word	0x08005451
 80053c8:	08005451 	.word	0x08005451
 80053cc:	08005451 	.word	0x08005451
 80053d0:	08005451 	.word	0x08005451
 80053d4:	08005451 	.word	0x08005451
 80053d8:	08005451 	.word	0x08005451
 80053dc:	08005439 	.word	0x08005439
 80053e0:	08005451 	.word	0x08005451
 80053e4:	08005451 	.word	0x08005451
 80053e8:	08005451 	.word	0x08005451
 80053ec:	08005451 	.word	0x08005451
 80053f0:	08005451 	.word	0x08005451
 80053f4:	08005451 	.word	0x08005451
 80053f8:	08005451 	.word	0x08005451
 80053fc:	08005441 	.word	0x08005441
 8005400:	08005451 	.word	0x08005451
 8005404:	08005451 	.word	0x08005451
 8005408:	08005451 	.word	0x08005451
 800540c:	08005451 	.word	0x08005451
 8005410:	08005451 	.word	0x08005451
 8005414:	08005451 	.word	0x08005451
 8005418:	08005451 	.word	0x08005451
 800541c:	08005449 	.word	0x08005449
 8005420:	2301      	movs	r3, #1
 8005422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005426:	e0bc      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005428:	2304      	movs	r3, #4
 800542a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800542e:	e0b8      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005430:	2308      	movs	r3, #8
 8005432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005436:	e0b4      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005438:	2310      	movs	r3, #16
 800543a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800543e:	e0b0      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005440:	2320      	movs	r3, #32
 8005442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005446:	e0ac      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005448:	2340      	movs	r3, #64	; 0x40
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544e:	e0a8      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005450:	2380      	movs	r3, #128	; 0x80
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005456:	e0a4      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a8f      	ldr	r2, [pc, #572]	; (800569c <UART_SetConfig+0x6a0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d130      	bne.n	80054c4 <UART_SetConfig+0x4c8>
 8005462:	4b8d      	ldr	r3, [pc, #564]	; (8005698 <UART_SetConfig+0x69c>)
 8005464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	2b05      	cmp	r3, #5
 800546c:	d826      	bhi.n	80054bc <UART_SetConfig+0x4c0>
 800546e:	a201      	add	r2, pc, #4	; (adr r2, 8005474 <UART_SetConfig+0x478>)
 8005470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005474:	0800548d 	.word	0x0800548d
 8005478:	08005495 	.word	0x08005495
 800547c:	0800549d 	.word	0x0800549d
 8005480:	080054a5 	.word	0x080054a5
 8005484:	080054ad 	.word	0x080054ad
 8005488:	080054b5 	.word	0x080054b5
 800548c:	2300      	movs	r3, #0
 800548e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005492:	e086      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005494:	2304      	movs	r3, #4
 8005496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800549a:	e082      	b.n	80055a2 <UART_SetConfig+0x5a6>
 800549c:	2308      	movs	r3, #8
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054a2:	e07e      	b.n	80055a2 <UART_SetConfig+0x5a6>
 80054a4:	2310      	movs	r3, #16
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054aa:	e07a      	b.n	80055a2 <UART_SetConfig+0x5a6>
 80054ac:	2320      	movs	r3, #32
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b2:	e076      	b.n	80055a2 <UART_SetConfig+0x5a6>
 80054b4:	2340      	movs	r3, #64	; 0x40
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ba:	e072      	b.n	80055a2 <UART_SetConfig+0x5a6>
 80054bc:	2380      	movs	r3, #128	; 0x80
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054c2:	e06e      	b.n	80055a2 <UART_SetConfig+0x5a6>
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a75      	ldr	r2, [pc, #468]	; (80056a0 <UART_SetConfig+0x6a4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d130      	bne.n	8005530 <UART_SetConfig+0x534>
 80054ce:	4b72      	ldr	r3, [pc, #456]	; (8005698 <UART_SetConfig+0x69c>)
 80054d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	2b05      	cmp	r3, #5
 80054d8:	d826      	bhi.n	8005528 <UART_SetConfig+0x52c>
 80054da:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <UART_SetConfig+0x4e4>)
 80054dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e0:	080054f9 	.word	0x080054f9
 80054e4:	08005501 	.word	0x08005501
 80054e8:	08005509 	.word	0x08005509
 80054ec:	08005511 	.word	0x08005511
 80054f0:	08005519 	.word	0x08005519
 80054f4:	08005521 	.word	0x08005521
 80054f8:	2300      	movs	r3, #0
 80054fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054fe:	e050      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005500:	2304      	movs	r3, #4
 8005502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005506:	e04c      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005508:	2308      	movs	r3, #8
 800550a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800550e:	e048      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005510:	2310      	movs	r3, #16
 8005512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005516:	e044      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005518:	2320      	movs	r3, #32
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800551e:	e040      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005520:	2340      	movs	r3, #64	; 0x40
 8005522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005526:	e03c      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005528:	2380      	movs	r3, #128	; 0x80
 800552a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800552e:	e038      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a5b      	ldr	r2, [pc, #364]	; (80056a4 <UART_SetConfig+0x6a8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d130      	bne.n	800559c <UART_SetConfig+0x5a0>
 800553a:	4b57      	ldr	r3, [pc, #348]	; (8005698 <UART_SetConfig+0x69c>)
 800553c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	2b05      	cmp	r3, #5
 8005544:	d826      	bhi.n	8005594 <UART_SetConfig+0x598>
 8005546:	a201      	add	r2, pc, #4	; (adr r2, 800554c <UART_SetConfig+0x550>)
 8005548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554c:	08005565 	.word	0x08005565
 8005550:	0800556d 	.word	0x0800556d
 8005554:	08005575 	.word	0x08005575
 8005558:	0800557d 	.word	0x0800557d
 800555c:	08005585 	.word	0x08005585
 8005560:	0800558d 	.word	0x0800558d
 8005564:	2302      	movs	r3, #2
 8005566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800556a:	e01a      	b.n	80055a2 <UART_SetConfig+0x5a6>
 800556c:	2304      	movs	r3, #4
 800556e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005572:	e016      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005574:	2308      	movs	r3, #8
 8005576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800557a:	e012      	b.n	80055a2 <UART_SetConfig+0x5a6>
 800557c:	2310      	movs	r3, #16
 800557e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005582:	e00e      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005584:	2320      	movs	r3, #32
 8005586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800558a:	e00a      	b.n	80055a2 <UART_SetConfig+0x5a6>
 800558c:	2340      	movs	r3, #64	; 0x40
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005592:	e006      	b.n	80055a2 <UART_SetConfig+0x5a6>
 8005594:	2380      	movs	r3, #128	; 0x80
 8005596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559a:	e002      	b.n	80055a2 <UART_SetConfig+0x5a6>
 800559c:	2380      	movs	r3, #128	; 0x80
 800559e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a3f      	ldr	r2, [pc, #252]	; (80056a4 <UART_SetConfig+0x6a8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	f040 80f8 	bne.w	800579e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80055b2:	2b20      	cmp	r3, #32
 80055b4:	dc46      	bgt.n	8005644 <UART_SetConfig+0x648>
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	f2c0 8082 	blt.w	80056c0 <UART_SetConfig+0x6c4>
 80055bc:	3b02      	subs	r3, #2
 80055be:	2b1e      	cmp	r3, #30
 80055c0:	d87e      	bhi.n	80056c0 <UART_SetConfig+0x6c4>
 80055c2:	a201      	add	r2, pc, #4	; (adr r2, 80055c8 <UART_SetConfig+0x5cc>)
 80055c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c8:	0800564b 	.word	0x0800564b
 80055cc:	080056c1 	.word	0x080056c1
 80055d0:	08005653 	.word	0x08005653
 80055d4:	080056c1 	.word	0x080056c1
 80055d8:	080056c1 	.word	0x080056c1
 80055dc:	080056c1 	.word	0x080056c1
 80055e0:	08005663 	.word	0x08005663
 80055e4:	080056c1 	.word	0x080056c1
 80055e8:	080056c1 	.word	0x080056c1
 80055ec:	080056c1 	.word	0x080056c1
 80055f0:	080056c1 	.word	0x080056c1
 80055f4:	080056c1 	.word	0x080056c1
 80055f8:	080056c1 	.word	0x080056c1
 80055fc:	080056c1 	.word	0x080056c1
 8005600:	08005673 	.word	0x08005673
 8005604:	080056c1 	.word	0x080056c1
 8005608:	080056c1 	.word	0x080056c1
 800560c:	080056c1 	.word	0x080056c1
 8005610:	080056c1 	.word	0x080056c1
 8005614:	080056c1 	.word	0x080056c1
 8005618:	080056c1 	.word	0x080056c1
 800561c:	080056c1 	.word	0x080056c1
 8005620:	080056c1 	.word	0x080056c1
 8005624:	080056c1 	.word	0x080056c1
 8005628:	080056c1 	.word	0x080056c1
 800562c:	080056c1 	.word	0x080056c1
 8005630:	080056c1 	.word	0x080056c1
 8005634:	080056c1 	.word	0x080056c1
 8005638:	080056c1 	.word	0x080056c1
 800563c:	080056c1 	.word	0x080056c1
 8005640:	080056b3 	.word	0x080056b3
 8005644:	2b40      	cmp	r3, #64	; 0x40
 8005646:	d037      	beq.n	80056b8 <UART_SetConfig+0x6bc>
 8005648:	e03a      	b.n	80056c0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800564a:	f7fe fbbb 	bl	8003dc4 <HAL_RCCEx_GetD3PCLK1Freq>
 800564e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005650:	e03c      	b.n	80056cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005656:	4618      	mov	r0, r3
 8005658:	f7fe fbca 	bl	8003df0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005660:	e034      	b.n	80056cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005662:	f107 0318 	add.w	r3, r7, #24
 8005666:	4618      	mov	r0, r3
 8005668:	f7fe fd16 	bl	8004098 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005670:	e02c      	b.n	80056cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005672:	4b09      	ldr	r3, [pc, #36]	; (8005698 <UART_SetConfig+0x69c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0320 	and.w	r3, r3, #32
 800567a:	2b00      	cmp	r3, #0
 800567c:	d016      	beq.n	80056ac <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800567e:	4b06      	ldr	r3, [pc, #24]	; (8005698 <UART_SetConfig+0x69c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	08db      	lsrs	r3, r3, #3
 8005684:	f003 0303 	and.w	r3, r3, #3
 8005688:	4a07      	ldr	r2, [pc, #28]	; (80056a8 <UART_SetConfig+0x6ac>)
 800568a:	fa22 f303 	lsr.w	r3, r2, r3
 800568e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005690:	e01c      	b.n	80056cc <UART_SetConfig+0x6d0>
 8005692:	bf00      	nop
 8005694:	40011400 	.word	0x40011400
 8005698:	58024400 	.word	0x58024400
 800569c:	40007800 	.word	0x40007800
 80056a0:	40007c00 	.word	0x40007c00
 80056a4:	58000c00 	.word	0x58000c00
 80056a8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80056ac:	4b9d      	ldr	r3, [pc, #628]	; (8005924 <UART_SetConfig+0x928>)
 80056ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056b0:	e00c      	b.n	80056cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80056b2:	4b9d      	ldr	r3, [pc, #628]	; (8005928 <UART_SetConfig+0x92c>)
 80056b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056b6:	e009      	b.n	80056cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056be:	e005      	b.n	80056cc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80056ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 81de 	beq.w	8005a90 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	4a94      	ldr	r2, [pc, #592]	; (800592c <UART_SetConfig+0x930>)
 80056da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056de:	461a      	mov	r2, r3
 80056e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80056e6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	4613      	mov	r3, r2
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	4413      	add	r3, r2
 80056f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d305      	bcc.n	8005704 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005700:	429a      	cmp	r2, r3
 8005702:	d903      	bls.n	800570c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800570a:	e1c1      	b.n	8005a90 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800570c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800570e:	2200      	movs	r2, #0
 8005710:	60bb      	str	r3, [r7, #8]
 8005712:	60fa      	str	r2, [r7, #12]
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	4a84      	ldr	r2, [pc, #528]	; (800592c <UART_SetConfig+0x930>)
 800571a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800571e:	b29b      	uxth	r3, r3
 8005720:	2200      	movs	r2, #0
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	607a      	str	r2, [r7, #4]
 8005726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800572a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800572e:	f7fa fe27 	bl	8000380 <__aeabi_uldivmod>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4610      	mov	r0, r2
 8005738:	4619      	mov	r1, r3
 800573a:	f04f 0200 	mov.w	r2, #0
 800573e:	f04f 0300 	mov.w	r3, #0
 8005742:	020b      	lsls	r3, r1, #8
 8005744:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005748:	0202      	lsls	r2, r0, #8
 800574a:	6979      	ldr	r1, [r7, #20]
 800574c:	6849      	ldr	r1, [r1, #4]
 800574e:	0849      	lsrs	r1, r1, #1
 8005750:	2000      	movs	r0, #0
 8005752:	460c      	mov	r4, r1
 8005754:	4605      	mov	r5, r0
 8005756:	eb12 0804 	adds.w	r8, r2, r4
 800575a:	eb43 0905 	adc.w	r9, r3, r5
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	469a      	mov	sl, r3
 8005766:	4693      	mov	fp, r2
 8005768:	4652      	mov	r2, sl
 800576a:	465b      	mov	r3, fp
 800576c:	4640      	mov	r0, r8
 800576e:	4649      	mov	r1, r9
 8005770:	f7fa fe06 	bl	8000380 <__aeabi_uldivmod>
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	4613      	mov	r3, r2
 800577a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800577c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005782:	d308      	bcc.n	8005796 <UART_SetConfig+0x79a>
 8005784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800578a:	d204      	bcs.n	8005796 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005792:	60da      	str	r2, [r3, #12]
 8005794:	e17c      	b.n	8005a90 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800579c:	e178      	b.n	8005a90 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057a6:	f040 80c5 	bne.w	8005934 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80057aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	dc48      	bgt.n	8005844 <UART_SetConfig+0x848>
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	db7b      	blt.n	80058ae <UART_SetConfig+0x8b2>
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d879      	bhi.n	80058ae <UART_SetConfig+0x8b2>
 80057ba:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <UART_SetConfig+0x7c4>)
 80057bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c0:	0800584b 	.word	0x0800584b
 80057c4:	08005853 	.word	0x08005853
 80057c8:	080058af 	.word	0x080058af
 80057cc:	080058af 	.word	0x080058af
 80057d0:	0800585b 	.word	0x0800585b
 80057d4:	080058af 	.word	0x080058af
 80057d8:	080058af 	.word	0x080058af
 80057dc:	080058af 	.word	0x080058af
 80057e0:	0800586b 	.word	0x0800586b
 80057e4:	080058af 	.word	0x080058af
 80057e8:	080058af 	.word	0x080058af
 80057ec:	080058af 	.word	0x080058af
 80057f0:	080058af 	.word	0x080058af
 80057f4:	080058af 	.word	0x080058af
 80057f8:	080058af 	.word	0x080058af
 80057fc:	080058af 	.word	0x080058af
 8005800:	0800587b 	.word	0x0800587b
 8005804:	080058af 	.word	0x080058af
 8005808:	080058af 	.word	0x080058af
 800580c:	080058af 	.word	0x080058af
 8005810:	080058af 	.word	0x080058af
 8005814:	080058af 	.word	0x080058af
 8005818:	080058af 	.word	0x080058af
 800581c:	080058af 	.word	0x080058af
 8005820:	080058af 	.word	0x080058af
 8005824:	080058af 	.word	0x080058af
 8005828:	080058af 	.word	0x080058af
 800582c:	080058af 	.word	0x080058af
 8005830:	080058af 	.word	0x080058af
 8005834:	080058af 	.word	0x080058af
 8005838:	080058af 	.word	0x080058af
 800583c:	080058af 	.word	0x080058af
 8005840:	080058a1 	.word	0x080058a1
 8005844:	2b40      	cmp	r3, #64	; 0x40
 8005846:	d02e      	beq.n	80058a6 <UART_SetConfig+0x8aa>
 8005848:	e031      	b.n	80058ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800584a:	f7fd fb49 	bl	8002ee0 <HAL_RCC_GetPCLK1Freq>
 800584e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005850:	e033      	b.n	80058ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005852:	f7fd fb5b 	bl	8002f0c <HAL_RCC_GetPCLK2Freq>
 8005856:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005858:	e02f      	b.n	80058ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800585a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800585e:	4618      	mov	r0, r3
 8005860:	f7fe fac6 	bl	8003df0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005868:	e027      	b.n	80058ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800586a:	f107 0318 	add.w	r3, r7, #24
 800586e:	4618      	mov	r0, r3
 8005870:	f7fe fc12 	bl	8004098 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005878:	e01f      	b.n	80058ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800587a:	4b2d      	ldr	r3, [pc, #180]	; (8005930 <UART_SetConfig+0x934>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b00      	cmp	r3, #0
 8005884:	d009      	beq.n	800589a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005886:	4b2a      	ldr	r3, [pc, #168]	; (8005930 <UART_SetConfig+0x934>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	08db      	lsrs	r3, r3, #3
 800588c:	f003 0303 	and.w	r3, r3, #3
 8005890:	4a24      	ldr	r2, [pc, #144]	; (8005924 <UART_SetConfig+0x928>)
 8005892:	fa22 f303 	lsr.w	r3, r2, r3
 8005896:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005898:	e00f      	b.n	80058ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800589a:	4b22      	ldr	r3, [pc, #136]	; (8005924 <UART_SetConfig+0x928>)
 800589c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800589e:	e00c      	b.n	80058ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058a0:	4b21      	ldr	r3, [pc, #132]	; (8005928 <UART_SetConfig+0x92c>)
 80058a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058a4:	e009      	b.n	80058ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058ac:	e005      	b.n	80058ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80058b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 80e7 	beq.w	8005a90 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	4a19      	ldr	r2, [pc, #100]	; (800592c <UART_SetConfig+0x930>)
 80058c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058cc:	461a      	mov	r2, r3
 80058ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80058d4:	005a      	lsls	r2, r3, #1
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	085b      	lsrs	r3, r3, #1
 80058dc:	441a      	add	r2, r3
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ea:	2b0f      	cmp	r3, #15
 80058ec:	d916      	bls.n	800591c <UART_SetConfig+0x920>
 80058ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f4:	d212      	bcs.n	800591c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	f023 030f 	bic.w	r3, r3, #15
 80058fe:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005902:	085b      	lsrs	r3, r3, #1
 8005904:	b29b      	uxth	r3, r3
 8005906:	f003 0307 	and.w	r3, r3, #7
 800590a:	b29a      	uxth	r2, r3
 800590c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800590e:	4313      	orrs	r3, r2
 8005910:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005918:	60da      	str	r2, [r3, #12]
 800591a:	e0b9      	b.n	8005a90 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005922:	e0b5      	b.n	8005a90 <UART_SetConfig+0xa94>
 8005924:	03d09000 	.word	0x03d09000
 8005928:	003d0900 	.word	0x003d0900
 800592c:	08007d80 	.word	0x08007d80
 8005930:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005934:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005938:	2b20      	cmp	r3, #32
 800593a:	dc49      	bgt.n	80059d0 <UART_SetConfig+0x9d4>
 800593c:	2b00      	cmp	r3, #0
 800593e:	db7c      	blt.n	8005a3a <UART_SetConfig+0xa3e>
 8005940:	2b20      	cmp	r3, #32
 8005942:	d87a      	bhi.n	8005a3a <UART_SetConfig+0xa3e>
 8005944:	a201      	add	r2, pc, #4	; (adr r2, 800594c <UART_SetConfig+0x950>)
 8005946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594a:	bf00      	nop
 800594c:	080059d7 	.word	0x080059d7
 8005950:	080059df 	.word	0x080059df
 8005954:	08005a3b 	.word	0x08005a3b
 8005958:	08005a3b 	.word	0x08005a3b
 800595c:	080059e7 	.word	0x080059e7
 8005960:	08005a3b 	.word	0x08005a3b
 8005964:	08005a3b 	.word	0x08005a3b
 8005968:	08005a3b 	.word	0x08005a3b
 800596c:	080059f7 	.word	0x080059f7
 8005970:	08005a3b 	.word	0x08005a3b
 8005974:	08005a3b 	.word	0x08005a3b
 8005978:	08005a3b 	.word	0x08005a3b
 800597c:	08005a3b 	.word	0x08005a3b
 8005980:	08005a3b 	.word	0x08005a3b
 8005984:	08005a3b 	.word	0x08005a3b
 8005988:	08005a3b 	.word	0x08005a3b
 800598c:	08005a07 	.word	0x08005a07
 8005990:	08005a3b 	.word	0x08005a3b
 8005994:	08005a3b 	.word	0x08005a3b
 8005998:	08005a3b 	.word	0x08005a3b
 800599c:	08005a3b 	.word	0x08005a3b
 80059a0:	08005a3b 	.word	0x08005a3b
 80059a4:	08005a3b 	.word	0x08005a3b
 80059a8:	08005a3b 	.word	0x08005a3b
 80059ac:	08005a3b 	.word	0x08005a3b
 80059b0:	08005a3b 	.word	0x08005a3b
 80059b4:	08005a3b 	.word	0x08005a3b
 80059b8:	08005a3b 	.word	0x08005a3b
 80059bc:	08005a3b 	.word	0x08005a3b
 80059c0:	08005a3b 	.word	0x08005a3b
 80059c4:	08005a3b 	.word	0x08005a3b
 80059c8:	08005a3b 	.word	0x08005a3b
 80059cc:	08005a2d 	.word	0x08005a2d
 80059d0:	2b40      	cmp	r3, #64	; 0x40
 80059d2:	d02e      	beq.n	8005a32 <UART_SetConfig+0xa36>
 80059d4:	e031      	b.n	8005a3a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059d6:	f7fd fa83 	bl	8002ee0 <HAL_RCC_GetPCLK1Freq>
 80059da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059dc:	e033      	b.n	8005a46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059de:	f7fd fa95 	bl	8002f0c <HAL_RCC_GetPCLK2Freq>
 80059e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059e4:	e02f      	b.n	8005a46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fe fa00 	bl	8003df0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059f4:	e027      	b.n	8005a46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059f6:	f107 0318 	add.w	r3, r7, #24
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fe fb4c 	bl	8004098 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a04:	e01f      	b.n	8005a46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a06:	4b2d      	ldr	r3, [pc, #180]	; (8005abc <UART_SetConfig+0xac0>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0320 	and.w	r3, r3, #32
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d009      	beq.n	8005a26 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a12:	4b2a      	ldr	r3, [pc, #168]	; (8005abc <UART_SetConfig+0xac0>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	08db      	lsrs	r3, r3, #3
 8005a18:	f003 0303 	and.w	r3, r3, #3
 8005a1c:	4a28      	ldr	r2, [pc, #160]	; (8005ac0 <UART_SetConfig+0xac4>)
 8005a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a24:	e00f      	b.n	8005a46 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005a26:	4b26      	ldr	r3, [pc, #152]	; (8005ac0 <UART_SetConfig+0xac4>)
 8005a28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a2a:	e00c      	b.n	8005a46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a2c:	4b25      	ldr	r3, [pc, #148]	; (8005ac4 <UART_SetConfig+0xac8>)
 8005a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a30:	e009      	b.n	8005a46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a38:	e005      	b.n	8005a46 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005a44:	bf00      	nop
    }

    if (pclk != 0U)
 8005a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d021      	beq.n	8005a90 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	4a1d      	ldr	r2, [pc, #116]	; (8005ac8 <UART_SetConfig+0xacc>)
 8005a52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a56:	461a      	mov	r2, r3
 8005a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	085b      	lsrs	r3, r3, #1
 8005a64:	441a      	add	r2, r3
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a72:	2b0f      	cmp	r3, #15
 8005a74:	d909      	bls.n	8005a8a <UART_SetConfig+0xa8e>
 8005a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a7c:	d205      	bcs.n	8005a8a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	60da      	str	r2, [r3, #12]
 8005a88:	e002      	b.n	8005a90 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005aac:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3748      	adds	r7, #72	; 0x48
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aba:	bf00      	nop
 8005abc:	58024400 	.word	0x58024400
 8005ac0:	03d09000 	.word	0x03d09000
 8005ac4:	003d0900 	.word	0x003d0900
 8005ac8:	08007d80 	.word	0x08007d80

08005acc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00a      	beq.n	8005af6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00a      	beq.n	8005b3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3e:	f003 0308 	and.w	r3, r3, #8
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b60:	f003 0310 	and.w	r3, r3, #16
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00a      	beq.n	8005b7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b82:	f003 0320 	and.w	r3, r3, #32
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00a      	beq.n	8005ba0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01a      	beq.n	8005be2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bca:	d10a      	bne.n	8005be2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	605a      	str	r2, [r3, #4]
  }
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af02      	add	r7, sp, #8
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c20:	f7fb f95a 	bl	8000ed8 <HAL_GetTick>
 8005c24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d10e      	bne.n	8005c52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f82f 	bl	8005ca6 <UART_WaitOnFlagUntilTimeout>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e025      	b.n	8005c9e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0304 	and.w	r3, r3, #4
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d10e      	bne.n	8005c7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f819 	bl	8005ca6 <UART_WaitOnFlagUntilTimeout>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e00f      	b.n	8005c9e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b09c      	sub	sp, #112	; 0x70
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	603b      	str	r3, [r7, #0]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cb6:	e0a9      	b.n	8005e0c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbe:	f000 80a5 	beq.w	8005e0c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc2:	f7fb f909 	bl	8000ed8 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d302      	bcc.n	8005cd8 <UART_WaitOnFlagUntilTimeout+0x32>
 8005cd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d140      	bne.n	8005d5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ce0:	e853 3f00 	ldrex	r3, [r3]
 8005ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cec:	667b      	str	r3, [r7, #100]	; 0x64
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cf8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005cfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005cfe:	e841 2300 	strex	r3, r2, [r1]
 8005d02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1e6      	bne.n	8005cd8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3308      	adds	r3, #8
 8005d10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d14:	e853 3f00 	ldrex	r3, [r3]
 8005d18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1c:	f023 0301 	bic.w	r3, r3, #1
 8005d20:	663b      	str	r3, [r7, #96]	; 0x60
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3308      	adds	r3, #8
 8005d28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d32:	e841 2300 	strex	r3, r2, [r1]
 8005d36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1e5      	bne.n	8005d0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2220      	movs	r2, #32
 8005d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e069      	b.n	8005e2e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0304 	and.w	r3, r3, #4
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d051      	beq.n	8005e0c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d76:	d149      	bne.n	8005e0c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d80:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8a:	e853 3f00 	ldrex	r3, [r3]
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da0:	637b      	str	r3, [r7, #52]	; 0x34
 8005da2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005da6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e6      	bne.n	8005d82 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3308      	adds	r3, #8
 8005dba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	e853 3f00 	ldrex	r3, [r3]
 8005dc2:	613b      	str	r3, [r7, #16]
   return(result);
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f023 0301 	bic.w	r3, r3, #1
 8005dca:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005dd4:	623a      	str	r2, [r7, #32]
 8005dd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	69f9      	ldr	r1, [r7, #28]
 8005dda:	6a3a      	ldr	r2, [r7, #32]
 8005ddc:	e841 2300 	strex	r3, r2, [r1]
 8005de0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e5      	bne.n	8005db4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e010      	b.n	8005e2e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	69da      	ldr	r2, [r3, #28]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	4013      	ands	r3, r2
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	bf0c      	ite	eq
 8005e1c:	2301      	moveq	r3, #1
 8005e1e:	2300      	movne	r3, #0
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	461a      	mov	r2, r3
 8005e24:	79fb      	ldrb	r3, [r7, #7]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	f43f af46 	beq.w	8005cb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3770      	adds	r7, #112	; 0x70
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
	...

08005e38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b0a3      	sub	sp, #140	; 0x8c
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	4613      	mov	r3, r2
 8005e44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	88fa      	ldrh	r2, [r7, #6]
 8005e50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	88fa      	ldrh	r2, [r7, #6]
 8005e58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e6a:	d10e      	bne.n	8005e8a <UART_Start_Receive_IT+0x52>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d105      	bne.n	8005e80 <UART_Start_Receive_IT+0x48>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005e7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005e7e:	e02d      	b.n	8005edc <UART_Start_Receive_IT+0xa4>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	22ff      	movs	r2, #255	; 0xff
 8005e84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005e88:	e028      	b.n	8005edc <UART_Start_Receive_IT+0xa4>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10d      	bne.n	8005eae <UART_Start_Receive_IT+0x76>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d104      	bne.n	8005ea4 <UART_Start_Receive_IT+0x6c>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	22ff      	movs	r2, #255	; 0xff
 8005e9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ea2:	e01b      	b.n	8005edc <UART_Start_Receive_IT+0xa4>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	227f      	movs	r2, #127	; 0x7f
 8005ea8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005eac:	e016      	b.n	8005edc <UART_Start_Receive_IT+0xa4>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eb6:	d10d      	bne.n	8005ed4 <UART_Start_Receive_IT+0x9c>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d104      	bne.n	8005eca <UART_Start_Receive_IT+0x92>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	227f      	movs	r2, #127	; 0x7f
 8005ec4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ec8:	e008      	b.n	8005edc <UART_Start_Receive_IT+0xa4>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	223f      	movs	r2, #63	; 0x3f
 8005ece:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ed2:	e003      	b.n	8005edc <UART_Start_Receive_IT+0xa4>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2222      	movs	r2, #34	; 0x22
 8005ee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3308      	adds	r3, #8
 8005ef2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ef6:	e853 3f00 	ldrex	r3, [r3]
 8005efa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005efc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005efe:	f043 0301 	orr.w	r3, r3, #1
 8005f02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005f10:	673a      	str	r2, [r7, #112]	; 0x70
 8005f12:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f14:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005f16:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005f18:	e841 2300 	strex	r3, r2, [r1]
 8005f1c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005f1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1e3      	bne.n	8005eec <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f2c:	d153      	bne.n	8005fd6 <UART_Start_Receive_IT+0x19e>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005f34:	88fa      	ldrh	r2, [r7, #6]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d34d      	bcc.n	8005fd6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f42:	d107      	bne.n	8005f54 <UART_Start_Receive_IT+0x11c>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d103      	bne.n	8005f54 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4a4b      	ldr	r2, [pc, #300]	; (800607c <UART_Start_Receive_IT+0x244>)
 8005f50:	671a      	str	r2, [r3, #112]	; 0x70
 8005f52:	e002      	b.n	8005f5a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4a4a      	ldr	r2, [pc, #296]	; (8006080 <UART_Start_Receive_IT+0x248>)
 8005f58:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d01a      	beq.n	8005fa0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f72:	e853 3f00 	ldrex	r3, [r3]
 8005f76:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	461a      	mov	r2, r3
 8005f88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f8e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f94:	e841 2300 	strex	r3, r2, [r1]
 8005f98:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1e4      	bne.n	8005f6a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3308      	adds	r3, #8
 8005fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005faa:	e853 3f00 	ldrex	r3, [r3]
 8005fae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3308      	adds	r3, #8
 8005fbe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005fc0:	64ba      	str	r2, [r7, #72]	; 0x48
 8005fc2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fc8:	e841 2300 	strex	r3, r2, [r1]
 8005fcc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1e5      	bne.n	8005fa0 <UART_Start_Receive_IT+0x168>
 8005fd4:	e04a      	b.n	800606c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fde:	d107      	bne.n	8005ff0 <UART_Start_Receive_IT+0x1b8>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d103      	bne.n	8005ff0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4a26      	ldr	r2, [pc, #152]	; (8006084 <UART_Start_Receive_IT+0x24c>)
 8005fec:	671a      	str	r2, [r3, #112]	; 0x70
 8005fee:	e002      	b.n	8005ff6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4a25      	ldr	r2, [pc, #148]	; (8006088 <UART_Start_Receive_IT+0x250>)
 8005ff4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d019      	beq.n	800603a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	e853 3f00 	ldrex	r3, [r3]
 8006012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800601a:	677b      	str	r3, [r7, #116]	; 0x74
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006024:	637b      	str	r3, [r7, #52]	; 0x34
 8006026:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006028:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800602a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800602c:	e841 2300 	strex	r3, r2, [r1]
 8006030:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1e6      	bne.n	8006006 <UART_Start_Receive_IT+0x1ce>
 8006038:	e018      	b.n	800606c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	e853 3f00 	ldrex	r3, [r3]
 8006046:	613b      	str	r3, [r7, #16]
   return(result);
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f043 0320 	orr.w	r3, r3, #32
 800604e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	461a      	mov	r2, r3
 8006056:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006058:	623b      	str	r3, [r7, #32]
 800605a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605c:	69f9      	ldr	r1, [r7, #28]
 800605e:	6a3a      	ldr	r2, [r7, #32]
 8006060:	e841 2300 	strex	r3, r2, [r1]
 8006064:	61bb      	str	r3, [r7, #24]
   return(result);
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1e6      	bne.n	800603a <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	378c      	adds	r7, #140	; 0x8c
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	08006795 	.word	0x08006795
 8006080:	0800649d 	.word	0x0800649d
 8006084:	0800633b 	.word	0x0800633b
 8006088:	080061db 	.word	0x080061db

0800608c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800608c:	b480      	push	{r7}
 800608e:	b095      	sub	sp, #84	; 0x54
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800609c:	e853 3f00 	ldrex	r3, [r3]
 80060a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060b2:	643b      	str	r3, [r7, #64]	; 0x40
 80060b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e6      	bne.n	8006094 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3308      	adds	r3, #8
 80060cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	e853 3f00 	ldrex	r3, [r3]
 80060d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	4b1e      	ldr	r3, [pc, #120]	; (8006154 <UART_EndRxTransfer+0xc8>)
 80060da:	4013      	ands	r3, r2
 80060dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3308      	adds	r3, #8
 80060e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060ee:	e841 2300 	strex	r3, r2, [r1]
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1e5      	bne.n	80060c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d118      	bne.n	8006134 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	e853 3f00 	ldrex	r3, [r3]
 800610e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f023 0310 	bic.w	r3, r3, #16
 8006116:	647b      	str	r3, [r7, #68]	; 0x44
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	461a      	mov	r2, r3
 800611e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006120:	61bb      	str	r3, [r7, #24]
 8006122:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006124:	6979      	ldr	r1, [r7, #20]
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	e841 2300 	strex	r3, r2, [r1]
 800612c:	613b      	str	r3, [r7, #16]
   return(result);
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1e6      	bne.n	8006102 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2220      	movs	r2, #32
 8006138:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006148:	bf00      	nop
 800614a:	3754      	adds	r7, #84	; 0x54
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	effffffe 	.word	0xeffffffe

08006158 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006164:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f7fe ff2a 	bl	8004fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800617c:	bf00      	nop
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b088      	sub	sp, #32
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	e853 3f00 	ldrex	r3, [r3]
 8006198:	60bb      	str	r3, [r7, #8]
   return(result);
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061a0:	61fb      	str	r3, [r7, #28]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	461a      	mov	r2, r3
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	61bb      	str	r3, [r7, #24]
 80061ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	6979      	ldr	r1, [r7, #20]
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	e841 2300 	strex	r3, r2, [r1]
 80061b6:	613b      	str	r3, [r7, #16]
   return(result);
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1e6      	bne.n	800618c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7fe fef5 	bl	8004fbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061d2:	bf00      	nop
 80061d4:	3720      	adds	r7, #32
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b096      	sub	sp, #88	; 0x58
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80061e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f2:	2b22      	cmp	r3, #34	; 0x22
 80061f4:	f040 8095 	bne.w	8006322 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006202:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006206:	b2d9      	uxtb	r1, r3
 8006208:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800620c:	b2da      	uxtb	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006212:	400a      	ands	r2, r1
 8006214:	b2d2      	uxtb	r2, r2
 8006216:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006228:	b29b      	uxth	r3, r3
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800623a:	b29b      	uxth	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d178      	bne.n	8006332 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006248:	e853 3f00 	ldrex	r3, [r3]
 800624c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800624e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006250:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006254:	653b      	str	r3, [r7, #80]	; 0x50
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	461a      	mov	r2, r3
 800625c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800625e:	647b      	str	r3, [r7, #68]	; 0x44
 8006260:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006262:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006264:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006266:	e841 2300 	strex	r3, r2, [r1]
 800626a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800626c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1e6      	bne.n	8006240 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3308      	adds	r3, #8
 8006278:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	e853 3f00 	ldrex	r3, [r3]
 8006280:	623b      	str	r3, [r7, #32]
   return(result);
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	f023 0301 	bic.w	r3, r3, #1
 8006288:	64fb      	str	r3, [r7, #76]	; 0x4c
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	3308      	adds	r3, #8
 8006290:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006292:	633a      	str	r2, [r7, #48]	; 0x30
 8006294:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006296:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800629a:	e841 2300 	strex	r3, r2, [r1]
 800629e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1e5      	bne.n	8006272 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d12e      	bne.n	800631a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	e853 3f00 	ldrex	r3, [r3]
 80062ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f023 0310 	bic.w	r3, r3, #16
 80062d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	461a      	mov	r2, r3
 80062de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062e0:	61fb      	str	r3, [r7, #28]
 80062e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e4:	69b9      	ldr	r1, [r7, #24]
 80062e6:	69fa      	ldr	r2, [r7, #28]
 80062e8:	e841 2300 	strex	r3, r2, [r1]
 80062ec:	617b      	str	r3, [r7, #20]
   return(result);
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1e6      	bne.n	80062c2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	f003 0310 	and.w	r3, r3, #16
 80062fe:	2b10      	cmp	r3, #16
 8006300:	d103      	bne.n	800630a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2210      	movs	r2, #16
 8006308:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006310:	4619      	mov	r1, r3
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7fe fe66 	bl	8004fe4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006318:	e00b      	b.n	8006332 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7fa fd0a 	bl	8000d34 <HAL_UART_RxCpltCallback>
}
 8006320:	e007      	b.n	8006332 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	699a      	ldr	r2, [r3, #24]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f042 0208 	orr.w	r2, r2, #8
 8006330:	619a      	str	r2, [r3, #24]
}
 8006332:	bf00      	nop
 8006334:	3758      	adds	r7, #88	; 0x58
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b096      	sub	sp, #88	; 0x58
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006348:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006352:	2b22      	cmp	r3, #34	; 0x22
 8006354:	f040 8095 	bne.w	8006482 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006366:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006368:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800636c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006370:	4013      	ands	r3, r2
 8006372:	b29a      	uxth	r2, r3
 8006374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006376:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637c:	1c9a      	adds	r2, r3, #2
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006388:	b29b      	uxth	r3, r3
 800638a:	3b01      	subs	r3, #1
 800638c:	b29a      	uxth	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800639a:	b29b      	uxth	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d178      	bne.n	8006492 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a8:	e853 3f00 	ldrex	r3, [r3]
 80063ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063be:	643b      	str	r3, [r7, #64]	; 0x40
 80063c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1e6      	bne.n	80063a0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3308      	adds	r3, #8
 80063d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	e853 3f00 	ldrex	r3, [r3]
 80063e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	f023 0301 	bic.w	r3, r3, #1
 80063e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3308      	adds	r3, #8
 80063f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063fa:	e841 2300 	strex	r3, r2, [r1]
 80063fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1e5      	bne.n	80063d2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2220      	movs	r2, #32
 800640a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006418:	2b01      	cmp	r3, #1
 800641a:	d12e      	bne.n	800647a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	e853 3f00 	ldrex	r3, [r3]
 800642e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f023 0310 	bic.w	r3, r3, #16
 8006436:	647b      	str	r3, [r7, #68]	; 0x44
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	461a      	mov	r2, r3
 800643e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006440:	61bb      	str	r3, [r7, #24]
 8006442:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006444:	6979      	ldr	r1, [r7, #20]
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	e841 2300 	strex	r3, r2, [r1]
 800644c:	613b      	str	r3, [r7, #16]
   return(result);
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e6      	bne.n	8006422 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	f003 0310 	and.w	r3, r3, #16
 800645e:	2b10      	cmp	r3, #16
 8006460:	d103      	bne.n	800646a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2210      	movs	r2, #16
 8006468:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006470:	4619      	mov	r1, r3
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7fe fdb6 	bl	8004fe4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006478:	e00b      	b.n	8006492 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7fa fc5a 	bl	8000d34 <HAL_UART_RxCpltCallback>
}
 8006480:	e007      	b.n	8006492 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	699a      	ldr	r2, [r3, #24]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f042 0208 	orr.w	r2, r2, #8
 8006490:	619a      	str	r2, [r3, #24]
}
 8006492:	bf00      	nop
 8006494:	3758      	adds	r7, #88	; 0x58
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b0a6      	sub	sp, #152	; 0x98
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80064aa:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d2:	2b22      	cmp	r3, #34	; 0x22
 80064d4:	f040 814d 	bne.w	8006772 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80064de:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80064e2:	e0f4      	b.n	80066ce <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ea:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80064ee:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80064f2:	b2d9      	uxtb	r1, r3
 80064f4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fe:	400a      	ands	r2, r1
 8006500:	b2d2      	uxtb	r2, r2
 8006502:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006514:	b29b      	uxth	r3, r3
 8006516:	3b01      	subs	r3, #1
 8006518:	b29a      	uxth	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800652a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	2b00      	cmp	r3, #0
 8006534:	d053      	beq.n	80065de <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006536:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b00      	cmp	r3, #0
 8006540:	d011      	beq.n	8006566 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006542:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00b      	beq.n	8006566 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2201      	movs	r2, #1
 8006554:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800655c:	f043 0201 	orr.w	r2, r3, #1
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006566:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d011      	beq.n	8006596 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006572:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00b      	beq.n	8006596 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2202      	movs	r2, #2
 8006584:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800658c:	f043 0204 	orr.w	r2, r3, #4
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006596:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800659a:	f003 0304 	and.w	r3, r3, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d011      	beq.n	80065c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80065a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00b      	beq.n	80065c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2204      	movs	r2, #4
 80065b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065bc:	f043 0202 	orr.w	r2, r3, #2
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d006      	beq.n	80065de <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7fe fcfd 	bl	8004fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d171      	bne.n	80066ce <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065f2:	e853 3f00 	ldrex	r3, [r3]
 80065f6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80065f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800660c:	66bb      	str	r3, [r7, #104]	; 0x68
 800660e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006610:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006612:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006614:	e841 2300 	strex	r3, r2, [r1]
 8006618:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800661a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1e4      	bne.n	80065ea <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3308      	adds	r3, #8
 8006626:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800662a:	e853 3f00 	ldrex	r3, [r3]
 800662e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006630:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006632:	4b56      	ldr	r3, [pc, #344]	; (800678c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8006634:	4013      	ands	r3, r2
 8006636:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3308      	adds	r3, #8
 800663e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006640:	657a      	str	r2, [r7, #84]	; 0x54
 8006642:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006644:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006646:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006648:	e841 2300 	strex	r3, r2, [r1]
 800664c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800664e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1e5      	bne.n	8006620 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2220      	movs	r2, #32
 8006658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006666:	2b01      	cmp	r3, #1
 8006668:	d12e      	bne.n	80066c8 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006678:	e853 3f00 	ldrex	r3, [r3]
 800667c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	f023 0310 	bic.w	r3, r3, #16
 8006684:	67bb      	str	r3, [r7, #120]	; 0x78
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	461a      	mov	r2, r3
 800668c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800668e:	643b      	str	r3, [r7, #64]	; 0x40
 8006690:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006692:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006694:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800669c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1e6      	bne.n	8006670 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	f003 0310 	and.w	r3, r3, #16
 80066ac:	2b10      	cmp	r3, #16
 80066ae:	d103      	bne.n	80066b8 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2210      	movs	r2, #16
 80066b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7fe fc8f 	bl	8004fe4 <HAL_UARTEx_RxEventCallback>
 80066c6:	e002      	b.n	80066ce <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7fa fb33 	bl	8000d34 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80066ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d006      	beq.n	80066e4 <UART_RxISR_8BIT_FIFOEN+0x248>
 80066d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80066da:	f003 0320 	and.w	r3, r3, #32
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f47f af00 	bne.w	80064e4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80066ee:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d045      	beq.n	8006782 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80066fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006700:	429a      	cmp	r2, r3
 8006702:	d23e      	bcs.n	8006782 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	3308      	adds	r3, #8
 800670a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	e853 3f00 	ldrex	r3, [r3]
 8006712:	61fb      	str	r3, [r7, #28]
   return(result);
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800671a:	673b      	str	r3, [r7, #112]	; 0x70
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3308      	adds	r3, #8
 8006722:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006724:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006726:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800672a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800672c:	e841 2300 	strex	r3, r2, [r1]
 8006730:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1e5      	bne.n	8006704 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a15      	ldr	r2, [pc, #84]	; (8006790 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800673c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	e853 3f00 	ldrex	r3, [r3]
 800674a:	60bb      	str	r3, [r7, #8]
   return(result);
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f043 0320 	orr.w	r3, r3, #32
 8006752:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	461a      	mov	r2, r3
 800675a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800675c:	61bb      	str	r3, [r7, #24]
 800675e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006760:	6979      	ldr	r1, [r7, #20]
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	e841 2300 	strex	r3, r2, [r1]
 8006768:	613b      	str	r3, [r7, #16]
   return(result);
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1e6      	bne.n	800673e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006770:	e007      	b.n	8006782 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	699a      	ldr	r2, [r3, #24]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f042 0208 	orr.w	r2, r2, #8
 8006780:	619a      	str	r2, [r3, #24]
}
 8006782:	bf00      	nop
 8006784:	3798      	adds	r7, #152	; 0x98
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	effffffe 	.word	0xeffffffe
 8006790:	080061db 	.word	0x080061db

08006794 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b0a8      	sub	sp, #160	; 0xa0
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80067a2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69db      	ldr	r3, [r3, #28]
 80067ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ca:	2b22      	cmp	r3, #34	; 0x22
 80067cc:	f040 8151 	bne.w	8006a72 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80067d6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80067da:	e0f8      	b.n	80069ce <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80067ee:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80067f2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80067f6:	4013      	ands	r3, r2
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006804:	1c9a      	adds	r2, r3, #2
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006810:	b29b      	uxth	r3, r3
 8006812:	3b01      	subs	r3, #1
 8006814:	b29a      	uxth	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006826:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	2b00      	cmp	r3, #0
 8006830:	d053      	beq.n	80068da <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006832:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	d011      	beq.n	8006862 <UART_RxISR_16BIT_FIFOEN+0xce>
 800683e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00b      	beq.n	8006862 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2201      	movs	r2, #1
 8006850:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006858:	f043 0201 	orr.w	r2, r3, #1
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006862:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d011      	beq.n	8006892 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800686e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00b      	beq.n	8006892 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2202      	movs	r2, #2
 8006880:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006888:	f043 0204 	orr.w	r2, r3, #4
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006892:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006896:	f003 0304 	and.w	r3, r3, #4
 800689a:	2b00      	cmp	r3, #0
 800689c:	d011      	beq.n	80068c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800689e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00b      	beq.n	80068c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2204      	movs	r2, #4
 80068b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068b8:	f043 0202 	orr.w	r2, r3, #2
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d006      	beq.n	80068da <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7fe fb7f 	bl	8004fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d173      	bne.n	80069ce <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068ee:	e853 3f00 	ldrex	r3, [r3]
 80068f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006908:	66fb      	str	r3, [r7, #108]	; 0x6c
 800690a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800690e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006910:	e841 2300 	strex	r3, r2, [r1]
 8006914:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006916:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1e4      	bne.n	80068e6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3308      	adds	r3, #8
 8006922:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006926:	e853 3f00 	ldrex	r3, [r3]
 800692a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800692c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800692e:	4b57      	ldr	r3, [pc, #348]	; (8006a8c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8006930:	4013      	ands	r3, r2
 8006932:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3308      	adds	r3, #8
 800693c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006940:	65ba      	str	r2, [r7, #88]	; 0x58
 8006942:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006946:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006948:	e841 2300 	strex	r3, r2, [r1]
 800694c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800694e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e3      	bne.n	800691c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2220      	movs	r2, #32
 8006958:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006966:	2b01      	cmp	r3, #1
 8006968:	d12e      	bne.n	80069c8 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006978:	e853 3f00 	ldrex	r3, [r3]
 800697c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800697e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006980:	f023 0310 	bic.w	r3, r3, #16
 8006984:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800698e:	647b      	str	r3, [r7, #68]	; 0x44
 8006990:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006992:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006994:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006996:	e841 2300 	strex	r3, r2, [r1]
 800699a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800699c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1e6      	bne.n	8006970 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	f003 0310 	and.w	r3, r3, #16
 80069ac:	2b10      	cmp	r3, #16
 80069ae:	d103      	bne.n	80069b8 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2210      	movs	r2, #16
 80069b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7fe fb0f 	bl	8004fe4 <HAL_UARTEx_RxEventCallback>
 80069c6:	e002      	b.n	80069ce <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7fa f9b3 	bl	8000d34 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80069ce:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d006      	beq.n	80069e4 <UART_RxISR_16BIT_FIFOEN+0x250>
 80069d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069da:	f003 0320 	and.w	r3, r3, #32
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f47f aefc 	bne.w	80067dc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069ea:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80069ee:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d045      	beq.n	8006a82 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80069fc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d23e      	bcs.n	8006a82 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3308      	adds	r3, #8
 8006a0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	e853 3f00 	ldrex	r3, [r3]
 8006a12:	623b      	str	r3, [r7, #32]
   return(result);
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a1a:	677b      	str	r3, [r7, #116]	; 0x74
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	3308      	adds	r3, #8
 8006a22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006a24:	633a      	str	r2, [r7, #48]	; 0x30
 8006a26:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a2c:	e841 2300 	strex	r3, r2, [r1]
 8006a30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1e5      	bne.n	8006a04 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a15      	ldr	r2, [pc, #84]	; (8006a90 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8006a3c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	e853 3f00 	ldrex	r3, [r3]
 8006a4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f043 0320 	orr.w	r3, r3, #32
 8006a52:	673b      	str	r3, [r7, #112]	; 0x70
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a5c:	61fb      	str	r3, [r7, #28]
 8006a5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a60:	69b9      	ldr	r1, [r7, #24]
 8006a62:	69fa      	ldr	r2, [r7, #28]
 8006a64:	e841 2300 	strex	r3, r2, [r1]
 8006a68:	617b      	str	r3, [r7, #20]
   return(result);
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1e6      	bne.n	8006a3e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a70:	e007      	b.n	8006a82 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	699a      	ldr	r2, [r3, #24]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f042 0208 	orr.w	r2, r2, #8
 8006a80:	619a      	str	r2, [r3, #24]
}
 8006a82:	bf00      	nop
 8006a84:	37a0      	adds	r7, #160	; 0xa0
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	effffffe 	.word	0xeffffffe
 8006a90:	0800633b 	.word	0x0800633b

08006a94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d101      	bne.n	8006ae6 <HAL_UARTEx_DisableFifoMode+0x16>
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	e027      	b.n	8006b36 <HAL_UARTEx_DisableFifoMode+0x66>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2224      	movs	r2, #36	; 0x24
 8006af2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 0201 	bic.w	r2, r2, #1
 8006b0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006b14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2220      	movs	r2, #32
 8006b28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d101      	bne.n	8006b5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b56:	2302      	movs	r3, #2
 8006b58:	e02d      	b.n	8006bb6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2224      	movs	r2, #36	; 0x24
 8006b66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f022 0201 	bic.w	r2, r2, #1
 8006b80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f850 	bl	8006c3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b084      	sub	sp, #16
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d101      	bne.n	8006bd6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	e02d      	b.n	8006c32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2224      	movs	r2, #36	; 0x24
 8006be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 0201 	bic.w	r2, r2, #1
 8006bfc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f812 	bl	8006c3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
	...

08006c3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d108      	bne.n	8006c5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006c5c:	e031      	b.n	8006cc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006c5e:	2310      	movs	r3, #16
 8006c60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006c62:	2310      	movs	r3, #16
 8006c64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	0e5b      	lsrs	r3, r3, #25
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	f003 0307 	and.w	r3, r3, #7
 8006c74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	0f5b      	lsrs	r3, r3, #29
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	f003 0307 	and.w	r3, r3, #7
 8006c84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c86:	7bbb      	ldrb	r3, [r7, #14]
 8006c88:	7b3a      	ldrb	r2, [r7, #12]
 8006c8a:	4911      	ldr	r1, [pc, #68]	; (8006cd0 <UARTEx_SetNbDataToProcess+0x94>)
 8006c8c:	5c8a      	ldrb	r2, [r1, r2]
 8006c8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c92:	7b3a      	ldrb	r2, [r7, #12]
 8006c94:	490f      	ldr	r1, [pc, #60]	; (8006cd4 <UARTEx_SetNbDataToProcess+0x98>)
 8006c96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c98:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
 8006ca6:	7b7a      	ldrb	r2, [r7, #13]
 8006ca8:	4909      	ldr	r1, [pc, #36]	; (8006cd0 <UARTEx_SetNbDataToProcess+0x94>)
 8006caa:	5c8a      	ldrb	r2, [r1, r2]
 8006cac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006cb0:	7b7a      	ldrb	r2, [r7, #13]
 8006cb2:	4908      	ldr	r1, [pc, #32]	; (8006cd4 <UARTEx_SetNbDataToProcess+0x98>)
 8006cb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006cc2:	bf00      	nop
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	08007d98 	.word	0x08007d98
 8006cd4:	08007da0 	.word	0x08007da0

08006cd8 <__errno>:
 8006cd8:	4b01      	ldr	r3, [pc, #4]	; (8006ce0 <__errno+0x8>)
 8006cda:	6818      	ldr	r0, [r3, #0]
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	24000010 	.word	0x24000010

08006ce4 <__libc_init_array>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	4d0d      	ldr	r5, [pc, #52]	; (8006d1c <__libc_init_array+0x38>)
 8006ce8:	4c0d      	ldr	r4, [pc, #52]	; (8006d20 <__libc_init_array+0x3c>)
 8006cea:	1b64      	subs	r4, r4, r5
 8006cec:	10a4      	asrs	r4, r4, #2
 8006cee:	2600      	movs	r6, #0
 8006cf0:	42a6      	cmp	r6, r4
 8006cf2:	d109      	bne.n	8006d08 <__libc_init_array+0x24>
 8006cf4:	4d0b      	ldr	r5, [pc, #44]	; (8006d24 <__libc_init_array+0x40>)
 8006cf6:	4c0c      	ldr	r4, [pc, #48]	; (8006d28 <__libc_init_array+0x44>)
 8006cf8:	f001 f824 	bl	8007d44 <_init>
 8006cfc:	1b64      	subs	r4, r4, r5
 8006cfe:	10a4      	asrs	r4, r4, #2
 8006d00:	2600      	movs	r6, #0
 8006d02:	42a6      	cmp	r6, r4
 8006d04:	d105      	bne.n	8006d12 <__libc_init_array+0x2e>
 8006d06:	bd70      	pop	{r4, r5, r6, pc}
 8006d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d0c:	4798      	blx	r3
 8006d0e:	3601      	adds	r6, #1
 8006d10:	e7ee      	b.n	8006cf0 <__libc_init_array+0xc>
 8006d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d16:	4798      	blx	r3
 8006d18:	3601      	adds	r6, #1
 8006d1a:	e7f2      	b.n	8006d02 <__libc_init_array+0x1e>
 8006d1c:	08007e48 	.word	0x08007e48
 8006d20:	08007e48 	.word	0x08007e48
 8006d24:	08007e48 	.word	0x08007e48
 8006d28:	08007e4c 	.word	0x08007e4c

08006d2c <memset>:
 8006d2c:	4402      	add	r2, r0
 8006d2e:	4603      	mov	r3, r0
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d100      	bne.n	8006d36 <memset+0xa>
 8006d34:	4770      	bx	lr
 8006d36:	f803 1b01 	strb.w	r1, [r3], #1
 8006d3a:	e7f9      	b.n	8006d30 <memset+0x4>

08006d3c <iprintf>:
 8006d3c:	b40f      	push	{r0, r1, r2, r3}
 8006d3e:	4b0a      	ldr	r3, [pc, #40]	; (8006d68 <iprintf+0x2c>)
 8006d40:	b513      	push	{r0, r1, r4, lr}
 8006d42:	681c      	ldr	r4, [r3, #0]
 8006d44:	b124      	cbz	r4, 8006d50 <iprintf+0x14>
 8006d46:	69a3      	ldr	r3, [r4, #24]
 8006d48:	b913      	cbnz	r3, 8006d50 <iprintf+0x14>
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	f000 fa5e 	bl	800720c <__sinit>
 8006d50:	ab05      	add	r3, sp, #20
 8006d52:	9a04      	ldr	r2, [sp, #16]
 8006d54:	68a1      	ldr	r1, [r4, #8]
 8006d56:	9301      	str	r3, [sp, #4]
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f000 fc67 	bl	800762c <_vfiprintf_r>
 8006d5e:	b002      	add	sp, #8
 8006d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d64:	b004      	add	sp, #16
 8006d66:	4770      	bx	lr
 8006d68:	24000010 	.word	0x24000010

08006d6c <_puts_r>:
 8006d6c:	b570      	push	{r4, r5, r6, lr}
 8006d6e:	460e      	mov	r6, r1
 8006d70:	4605      	mov	r5, r0
 8006d72:	b118      	cbz	r0, 8006d7c <_puts_r+0x10>
 8006d74:	6983      	ldr	r3, [r0, #24]
 8006d76:	b90b      	cbnz	r3, 8006d7c <_puts_r+0x10>
 8006d78:	f000 fa48 	bl	800720c <__sinit>
 8006d7c:	69ab      	ldr	r3, [r5, #24]
 8006d7e:	68ac      	ldr	r4, [r5, #8]
 8006d80:	b913      	cbnz	r3, 8006d88 <_puts_r+0x1c>
 8006d82:	4628      	mov	r0, r5
 8006d84:	f000 fa42 	bl	800720c <__sinit>
 8006d88:	4b2c      	ldr	r3, [pc, #176]	; (8006e3c <_puts_r+0xd0>)
 8006d8a:	429c      	cmp	r4, r3
 8006d8c:	d120      	bne.n	8006dd0 <_puts_r+0x64>
 8006d8e:	686c      	ldr	r4, [r5, #4]
 8006d90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d92:	07db      	lsls	r3, r3, #31
 8006d94:	d405      	bmi.n	8006da2 <_puts_r+0x36>
 8006d96:	89a3      	ldrh	r3, [r4, #12]
 8006d98:	0598      	lsls	r0, r3, #22
 8006d9a:	d402      	bmi.n	8006da2 <_puts_r+0x36>
 8006d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d9e:	f000 fad3 	bl	8007348 <__retarget_lock_acquire_recursive>
 8006da2:	89a3      	ldrh	r3, [r4, #12]
 8006da4:	0719      	lsls	r1, r3, #28
 8006da6:	d51d      	bpl.n	8006de4 <_puts_r+0x78>
 8006da8:	6923      	ldr	r3, [r4, #16]
 8006daa:	b1db      	cbz	r3, 8006de4 <_puts_r+0x78>
 8006dac:	3e01      	subs	r6, #1
 8006dae:	68a3      	ldr	r3, [r4, #8]
 8006db0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006db4:	3b01      	subs	r3, #1
 8006db6:	60a3      	str	r3, [r4, #8]
 8006db8:	bb39      	cbnz	r1, 8006e0a <_puts_r+0x9e>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	da38      	bge.n	8006e30 <_puts_r+0xc4>
 8006dbe:	4622      	mov	r2, r4
 8006dc0:	210a      	movs	r1, #10
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	f000 f848 	bl	8006e58 <__swbuf_r>
 8006dc8:	3001      	adds	r0, #1
 8006dca:	d011      	beq.n	8006df0 <_puts_r+0x84>
 8006dcc:	250a      	movs	r5, #10
 8006dce:	e011      	b.n	8006df4 <_puts_r+0x88>
 8006dd0:	4b1b      	ldr	r3, [pc, #108]	; (8006e40 <_puts_r+0xd4>)
 8006dd2:	429c      	cmp	r4, r3
 8006dd4:	d101      	bne.n	8006dda <_puts_r+0x6e>
 8006dd6:	68ac      	ldr	r4, [r5, #8]
 8006dd8:	e7da      	b.n	8006d90 <_puts_r+0x24>
 8006dda:	4b1a      	ldr	r3, [pc, #104]	; (8006e44 <_puts_r+0xd8>)
 8006ddc:	429c      	cmp	r4, r3
 8006dde:	bf08      	it	eq
 8006de0:	68ec      	ldreq	r4, [r5, #12]
 8006de2:	e7d5      	b.n	8006d90 <_puts_r+0x24>
 8006de4:	4621      	mov	r1, r4
 8006de6:	4628      	mov	r0, r5
 8006de8:	f000 f888 	bl	8006efc <__swsetup_r>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	d0dd      	beq.n	8006dac <_puts_r+0x40>
 8006df0:	f04f 35ff 	mov.w	r5, #4294967295
 8006df4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006df6:	07da      	lsls	r2, r3, #31
 8006df8:	d405      	bmi.n	8006e06 <_puts_r+0x9a>
 8006dfa:	89a3      	ldrh	r3, [r4, #12]
 8006dfc:	059b      	lsls	r3, r3, #22
 8006dfe:	d402      	bmi.n	8006e06 <_puts_r+0x9a>
 8006e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e02:	f000 faa2 	bl	800734a <__retarget_lock_release_recursive>
 8006e06:	4628      	mov	r0, r5
 8006e08:	bd70      	pop	{r4, r5, r6, pc}
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	da04      	bge.n	8006e18 <_puts_r+0xac>
 8006e0e:	69a2      	ldr	r2, [r4, #24]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	dc06      	bgt.n	8006e22 <_puts_r+0xb6>
 8006e14:	290a      	cmp	r1, #10
 8006e16:	d004      	beq.n	8006e22 <_puts_r+0xb6>
 8006e18:	6823      	ldr	r3, [r4, #0]
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	6022      	str	r2, [r4, #0]
 8006e1e:	7019      	strb	r1, [r3, #0]
 8006e20:	e7c5      	b.n	8006dae <_puts_r+0x42>
 8006e22:	4622      	mov	r2, r4
 8006e24:	4628      	mov	r0, r5
 8006e26:	f000 f817 	bl	8006e58 <__swbuf_r>
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	d1bf      	bne.n	8006dae <_puts_r+0x42>
 8006e2e:	e7df      	b.n	8006df0 <_puts_r+0x84>
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	250a      	movs	r5, #10
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	6022      	str	r2, [r4, #0]
 8006e38:	701d      	strb	r5, [r3, #0]
 8006e3a:	e7db      	b.n	8006df4 <_puts_r+0x88>
 8006e3c:	08007dcc 	.word	0x08007dcc
 8006e40:	08007dec 	.word	0x08007dec
 8006e44:	08007dac 	.word	0x08007dac

08006e48 <puts>:
 8006e48:	4b02      	ldr	r3, [pc, #8]	; (8006e54 <puts+0xc>)
 8006e4a:	4601      	mov	r1, r0
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	f7ff bf8d 	b.w	8006d6c <_puts_r>
 8006e52:	bf00      	nop
 8006e54:	24000010 	.word	0x24000010

08006e58 <__swbuf_r>:
 8006e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e5a:	460e      	mov	r6, r1
 8006e5c:	4614      	mov	r4, r2
 8006e5e:	4605      	mov	r5, r0
 8006e60:	b118      	cbz	r0, 8006e6a <__swbuf_r+0x12>
 8006e62:	6983      	ldr	r3, [r0, #24]
 8006e64:	b90b      	cbnz	r3, 8006e6a <__swbuf_r+0x12>
 8006e66:	f000 f9d1 	bl	800720c <__sinit>
 8006e6a:	4b21      	ldr	r3, [pc, #132]	; (8006ef0 <__swbuf_r+0x98>)
 8006e6c:	429c      	cmp	r4, r3
 8006e6e:	d12b      	bne.n	8006ec8 <__swbuf_r+0x70>
 8006e70:	686c      	ldr	r4, [r5, #4]
 8006e72:	69a3      	ldr	r3, [r4, #24]
 8006e74:	60a3      	str	r3, [r4, #8]
 8006e76:	89a3      	ldrh	r3, [r4, #12]
 8006e78:	071a      	lsls	r2, r3, #28
 8006e7a:	d52f      	bpl.n	8006edc <__swbuf_r+0x84>
 8006e7c:	6923      	ldr	r3, [r4, #16]
 8006e7e:	b36b      	cbz	r3, 8006edc <__swbuf_r+0x84>
 8006e80:	6923      	ldr	r3, [r4, #16]
 8006e82:	6820      	ldr	r0, [r4, #0]
 8006e84:	1ac0      	subs	r0, r0, r3
 8006e86:	6963      	ldr	r3, [r4, #20]
 8006e88:	b2f6      	uxtb	r6, r6
 8006e8a:	4283      	cmp	r3, r0
 8006e8c:	4637      	mov	r7, r6
 8006e8e:	dc04      	bgt.n	8006e9a <__swbuf_r+0x42>
 8006e90:	4621      	mov	r1, r4
 8006e92:	4628      	mov	r0, r5
 8006e94:	f000 f926 	bl	80070e4 <_fflush_r>
 8006e98:	bb30      	cbnz	r0, 8006ee8 <__swbuf_r+0x90>
 8006e9a:	68a3      	ldr	r3, [r4, #8]
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	60a3      	str	r3, [r4, #8]
 8006ea0:	6823      	ldr	r3, [r4, #0]
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	6022      	str	r2, [r4, #0]
 8006ea6:	701e      	strb	r6, [r3, #0]
 8006ea8:	6963      	ldr	r3, [r4, #20]
 8006eaa:	3001      	adds	r0, #1
 8006eac:	4283      	cmp	r3, r0
 8006eae:	d004      	beq.n	8006eba <__swbuf_r+0x62>
 8006eb0:	89a3      	ldrh	r3, [r4, #12]
 8006eb2:	07db      	lsls	r3, r3, #31
 8006eb4:	d506      	bpl.n	8006ec4 <__swbuf_r+0x6c>
 8006eb6:	2e0a      	cmp	r6, #10
 8006eb8:	d104      	bne.n	8006ec4 <__swbuf_r+0x6c>
 8006eba:	4621      	mov	r1, r4
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	f000 f911 	bl	80070e4 <_fflush_r>
 8006ec2:	b988      	cbnz	r0, 8006ee8 <__swbuf_r+0x90>
 8006ec4:	4638      	mov	r0, r7
 8006ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ec8:	4b0a      	ldr	r3, [pc, #40]	; (8006ef4 <__swbuf_r+0x9c>)
 8006eca:	429c      	cmp	r4, r3
 8006ecc:	d101      	bne.n	8006ed2 <__swbuf_r+0x7a>
 8006ece:	68ac      	ldr	r4, [r5, #8]
 8006ed0:	e7cf      	b.n	8006e72 <__swbuf_r+0x1a>
 8006ed2:	4b09      	ldr	r3, [pc, #36]	; (8006ef8 <__swbuf_r+0xa0>)
 8006ed4:	429c      	cmp	r4, r3
 8006ed6:	bf08      	it	eq
 8006ed8:	68ec      	ldreq	r4, [r5, #12]
 8006eda:	e7ca      	b.n	8006e72 <__swbuf_r+0x1a>
 8006edc:	4621      	mov	r1, r4
 8006ede:	4628      	mov	r0, r5
 8006ee0:	f000 f80c 	bl	8006efc <__swsetup_r>
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	d0cb      	beq.n	8006e80 <__swbuf_r+0x28>
 8006ee8:	f04f 37ff 	mov.w	r7, #4294967295
 8006eec:	e7ea      	b.n	8006ec4 <__swbuf_r+0x6c>
 8006eee:	bf00      	nop
 8006ef0:	08007dcc 	.word	0x08007dcc
 8006ef4:	08007dec 	.word	0x08007dec
 8006ef8:	08007dac 	.word	0x08007dac

08006efc <__swsetup_r>:
 8006efc:	4b32      	ldr	r3, [pc, #200]	; (8006fc8 <__swsetup_r+0xcc>)
 8006efe:	b570      	push	{r4, r5, r6, lr}
 8006f00:	681d      	ldr	r5, [r3, #0]
 8006f02:	4606      	mov	r6, r0
 8006f04:	460c      	mov	r4, r1
 8006f06:	b125      	cbz	r5, 8006f12 <__swsetup_r+0x16>
 8006f08:	69ab      	ldr	r3, [r5, #24]
 8006f0a:	b913      	cbnz	r3, 8006f12 <__swsetup_r+0x16>
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	f000 f97d 	bl	800720c <__sinit>
 8006f12:	4b2e      	ldr	r3, [pc, #184]	; (8006fcc <__swsetup_r+0xd0>)
 8006f14:	429c      	cmp	r4, r3
 8006f16:	d10f      	bne.n	8006f38 <__swsetup_r+0x3c>
 8006f18:	686c      	ldr	r4, [r5, #4]
 8006f1a:	89a3      	ldrh	r3, [r4, #12]
 8006f1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f20:	0719      	lsls	r1, r3, #28
 8006f22:	d42c      	bmi.n	8006f7e <__swsetup_r+0x82>
 8006f24:	06dd      	lsls	r5, r3, #27
 8006f26:	d411      	bmi.n	8006f4c <__swsetup_r+0x50>
 8006f28:	2309      	movs	r3, #9
 8006f2a:	6033      	str	r3, [r6, #0]
 8006f2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f30:	81a3      	strh	r3, [r4, #12]
 8006f32:	f04f 30ff 	mov.w	r0, #4294967295
 8006f36:	e03e      	b.n	8006fb6 <__swsetup_r+0xba>
 8006f38:	4b25      	ldr	r3, [pc, #148]	; (8006fd0 <__swsetup_r+0xd4>)
 8006f3a:	429c      	cmp	r4, r3
 8006f3c:	d101      	bne.n	8006f42 <__swsetup_r+0x46>
 8006f3e:	68ac      	ldr	r4, [r5, #8]
 8006f40:	e7eb      	b.n	8006f1a <__swsetup_r+0x1e>
 8006f42:	4b24      	ldr	r3, [pc, #144]	; (8006fd4 <__swsetup_r+0xd8>)
 8006f44:	429c      	cmp	r4, r3
 8006f46:	bf08      	it	eq
 8006f48:	68ec      	ldreq	r4, [r5, #12]
 8006f4a:	e7e6      	b.n	8006f1a <__swsetup_r+0x1e>
 8006f4c:	0758      	lsls	r0, r3, #29
 8006f4e:	d512      	bpl.n	8006f76 <__swsetup_r+0x7a>
 8006f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f52:	b141      	cbz	r1, 8006f66 <__swsetup_r+0x6a>
 8006f54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f58:	4299      	cmp	r1, r3
 8006f5a:	d002      	beq.n	8006f62 <__swsetup_r+0x66>
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	f000 fa5b 	bl	8007418 <_free_r>
 8006f62:	2300      	movs	r3, #0
 8006f64:	6363      	str	r3, [r4, #52]	; 0x34
 8006f66:	89a3      	ldrh	r3, [r4, #12]
 8006f68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f6c:	81a3      	strh	r3, [r4, #12]
 8006f6e:	2300      	movs	r3, #0
 8006f70:	6063      	str	r3, [r4, #4]
 8006f72:	6923      	ldr	r3, [r4, #16]
 8006f74:	6023      	str	r3, [r4, #0]
 8006f76:	89a3      	ldrh	r3, [r4, #12]
 8006f78:	f043 0308 	orr.w	r3, r3, #8
 8006f7c:	81a3      	strh	r3, [r4, #12]
 8006f7e:	6923      	ldr	r3, [r4, #16]
 8006f80:	b94b      	cbnz	r3, 8006f96 <__swsetup_r+0x9a>
 8006f82:	89a3      	ldrh	r3, [r4, #12]
 8006f84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f8c:	d003      	beq.n	8006f96 <__swsetup_r+0x9a>
 8006f8e:	4621      	mov	r1, r4
 8006f90:	4630      	mov	r0, r6
 8006f92:	f000 fa01 	bl	8007398 <__smakebuf_r>
 8006f96:	89a0      	ldrh	r0, [r4, #12]
 8006f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f9c:	f010 0301 	ands.w	r3, r0, #1
 8006fa0:	d00a      	beq.n	8006fb8 <__swsetup_r+0xbc>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	60a3      	str	r3, [r4, #8]
 8006fa6:	6963      	ldr	r3, [r4, #20]
 8006fa8:	425b      	negs	r3, r3
 8006faa:	61a3      	str	r3, [r4, #24]
 8006fac:	6923      	ldr	r3, [r4, #16]
 8006fae:	b943      	cbnz	r3, 8006fc2 <__swsetup_r+0xc6>
 8006fb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006fb4:	d1ba      	bne.n	8006f2c <__swsetup_r+0x30>
 8006fb6:	bd70      	pop	{r4, r5, r6, pc}
 8006fb8:	0781      	lsls	r1, r0, #30
 8006fba:	bf58      	it	pl
 8006fbc:	6963      	ldrpl	r3, [r4, #20]
 8006fbe:	60a3      	str	r3, [r4, #8]
 8006fc0:	e7f4      	b.n	8006fac <__swsetup_r+0xb0>
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	e7f7      	b.n	8006fb6 <__swsetup_r+0xba>
 8006fc6:	bf00      	nop
 8006fc8:	24000010 	.word	0x24000010
 8006fcc:	08007dcc 	.word	0x08007dcc
 8006fd0:	08007dec 	.word	0x08007dec
 8006fd4:	08007dac 	.word	0x08007dac

08006fd8 <__sflush_r>:
 8006fd8:	898a      	ldrh	r2, [r1, #12]
 8006fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fde:	4605      	mov	r5, r0
 8006fe0:	0710      	lsls	r0, r2, #28
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	d458      	bmi.n	8007098 <__sflush_r+0xc0>
 8006fe6:	684b      	ldr	r3, [r1, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	dc05      	bgt.n	8006ff8 <__sflush_r+0x20>
 8006fec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	dc02      	bgt.n	8006ff8 <__sflush_r+0x20>
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ffa:	2e00      	cmp	r6, #0
 8006ffc:	d0f9      	beq.n	8006ff2 <__sflush_r+0x1a>
 8006ffe:	2300      	movs	r3, #0
 8007000:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007004:	682f      	ldr	r7, [r5, #0]
 8007006:	602b      	str	r3, [r5, #0]
 8007008:	d032      	beq.n	8007070 <__sflush_r+0x98>
 800700a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800700c:	89a3      	ldrh	r3, [r4, #12]
 800700e:	075a      	lsls	r2, r3, #29
 8007010:	d505      	bpl.n	800701e <__sflush_r+0x46>
 8007012:	6863      	ldr	r3, [r4, #4]
 8007014:	1ac0      	subs	r0, r0, r3
 8007016:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007018:	b10b      	cbz	r3, 800701e <__sflush_r+0x46>
 800701a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800701c:	1ac0      	subs	r0, r0, r3
 800701e:	2300      	movs	r3, #0
 8007020:	4602      	mov	r2, r0
 8007022:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007024:	6a21      	ldr	r1, [r4, #32]
 8007026:	4628      	mov	r0, r5
 8007028:	47b0      	blx	r6
 800702a:	1c43      	adds	r3, r0, #1
 800702c:	89a3      	ldrh	r3, [r4, #12]
 800702e:	d106      	bne.n	800703e <__sflush_r+0x66>
 8007030:	6829      	ldr	r1, [r5, #0]
 8007032:	291d      	cmp	r1, #29
 8007034:	d82c      	bhi.n	8007090 <__sflush_r+0xb8>
 8007036:	4a2a      	ldr	r2, [pc, #168]	; (80070e0 <__sflush_r+0x108>)
 8007038:	40ca      	lsrs	r2, r1
 800703a:	07d6      	lsls	r6, r2, #31
 800703c:	d528      	bpl.n	8007090 <__sflush_r+0xb8>
 800703e:	2200      	movs	r2, #0
 8007040:	6062      	str	r2, [r4, #4]
 8007042:	04d9      	lsls	r1, r3, #19
 8007044:	6922      	ldr	r2, [r4, #16]
 8007046:	6022      	str	r2, [r4, #0]
 8007048:	d504      	bpl.n	8007054 <__sflush_r+0x7c>
 800704a:	1c42      	adds	r2, r0, #1
 800704c:	d101      	bne.n	8007052 <__sflush_r+0x7a>
 800704e:	682b      	ldr	r3, [r5, #0]
 8007050:	b903      	cbnz	r3, 8007054 <__sflush_r+0x7c>
 8007052:	6560      	str	r0, [r4, #84]	; 0x54
 8007054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007056:	602f      	str	r7, [r5, #0]
 8007058:	2900      	cmp	r1, #0
 800705a:	d0ca      	beq.n	8006ff2 <__sflush_r+0x1a>
 800705c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007060:	4299      	cmp	r1, r3
 8007062:	d002      	beq.n	800706a <__sflush_r+0x92>
 8007064:	4628      	mov	r0, r5
 8007066:	f000 f9d7 	bl	8007418 <_free_r>
 800706a:	2000      	movs	r0, #0
 800706c:	6360      	str	r0, [r4, #52]	; 0x34
 800706e:	e7c1      	b.n	8006ff4 <__sflush_r+0x1c>
 8007070:	6a21      	ldr	r1, [r4, #32]
 8007072:	2301      	movs	r3, #1
 8007074:	4628      	mov	r0, r5
 8007076:	47b0      	blx	r6
 8007078:	1c41      	adds	r1, r0, #1
 800707a:	d1c7      	bne.n	800700c <__sflush_r+0x34>
 800707c:	682b      	ldr	r3, [r5, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d0c4      	beq.n	800700c <__sflush_r+0x34>
 8007082:	2b1d      	cmp	r3, #29
 8007084:	d001      	beq.n	800708a <__sflush_r+0xb2>
 8007086:	2b16      	cmp	r3, #22
 8007088:	d101      	bne.n	800708e <__sflush_r+0xb6>
 800708a:	602f      	str	r7, [r5, #0]
 800708c:	e7b1      	b.n	8006ff2 <__sflush_r+0x1a>
 800708e:	89a3      	ldrh	r3, [r4, #12]
 8007090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007094:	81a3      	strh	r3, [r4, #12]
 8007096:	e7ad      	b.n	8006ff4 <__sflush_r+0x1c>
 8007098:	690f      	ldr	r7, [r1, #16]
 800709a:	2f00      	cmp	r7, #0
 800709c:	d0a9      	beq.n	8006ff2 <__sflush_r+0x1a>
 800709e:	0793      	lsls	r3, r2, #30
 80070a0:	680e      	ldr	r6, [r1, #0]
 80070a2:	bf08      	it	eq
 80070a4:	694b      	ldreq	r3, [r1, #20]
 80070a6:	600f      	str	r7, [r1, #0]
 80070a8:	bf18      	it	ne
 80070aa:	2300      	movne	r3, #0
 80070ac:	eba6 0807 	sub.w	r8, r6, r7
 80070b0:	608b      	str	r3, [r1, #8]
 80070b2:	f1b8 0f00 	cmp.w	r8, #0
 80070b6:	dd9c      	ble.n	8006ff2 <__sflush_r+0x1a>
 80070b8:	6a21      	ldr	r1, [r4, #32]
 80070ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070bc:	4643      	mov	r3, r8
 80070be:	463a      	mov	r2, r7
 80070c0:	4628      	mov	r0, r5
 80070c2:	47b0      	blx	r6
 80070c4:	2800      	cmp	r0, #0
 80070c6:	dc06      	bgt.n	80070d6 <__sflush_r+0xfe>
 80070c8:	89a3      	ldrh	r3, [r4, #12]
 80070ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ce:	81a3      	strh	r3, [r4, #12]
 80070d0:	f04f 30ff 	mov.w	r0, #4294967295
 80070d4:	e78e      	b.n	8006ff4 <__sflush_r+0x1c>
 80070d6:	4407      	add	r7, r0
 80070d8:	eba8 0800 	sub.w	r8, r8, r0
 80070dc:	e7e9      	b.n	80070b2 <__sflush_r+0xda>
 80070de:	bf00      	nop
 80070e0:	20400001 	.word	0x20400001

080070e4 <_fflush_r>:
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	690b      	ldr	r3, [r1, #16]
 80070e8:	4605      	mov	r5, r0
 80070ea:	460c      	mov	r4, r1
 80070ec:	b913      	cbnz	r3, 80070f4 <_fflush_r+0x10>
 80070ee:	2500      	movs	r5, #0
 80070f0:	4628      	mov	r0, r5
 80070f2:	bd38      	pop	{r3, r4, r5, pc}
 80070f4:	b118      	cbz	r0, 80070fe <_fflush_r+0x1a>
 80070f6:	6983      	ldr	r3, [r0, #24]
 80070f8:	b90b      	cbnz	r3, 80070fe <_fflush_r+0x1a>
 80070fa:	f000 f887 	bl	800720c <__sinit>
 80070fe:	4b14      	ldr	r3, [pc, #80]	; (8007150 <_fflush_r+0x6c>)
 8007100:	429c      	cmp	r4, r3
 8007102:	d11b      	bne.n	800713c <_fflush_r+0x58>
 8007104:	686c      	ldr	r4, [r5, #4]
 8007106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d0ef      	beq.n	80070ee <_fflush_r+0xa>
 800710e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007110:	07d0      	lsls	r0, r2, #31
 8007112:	d404      	bmi.n	800711e <_fflush_r+0x3a>
 8007114:	0599      	lsls	r1, r3, #22
 8007116:	d402      	bmi.n	800711e <_fflush_r+0x3a>
 8007118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800711a:	f000 f915 	bl	8007348 <__retarget_lock_acquire_recursive>
 800711e:	4628      	mov	r0, r5
 8007120:	4621      	mov	r1, r4
 8007122:	f7ff ff59 	bl	8006fd8 <__sflush_r>
 8007126:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007128:	07da      	lsls	r2, r3, #31
 800712a:	4605      	mov	r5, r0
 800712c:	d4e0      	bmi.n	80070f0 <_fflush_r+0xc>
 800712e:	89a3      	ldrh	r3, [r4, #12]
 8007130:	059b      	lsls	r3, r3, #22
 8007132:	d4dd      	bmi.n	80070f0 <_fflush_r+0xc>
 8007134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007136:	f000 f908 	bl	800734a <__retarget_lock_release_recursive>
 800713a:	e7d9      	b.n	80070f0 <_fflush_r+0xc>
 800713c:	4b05      	ldr	r3, [pc, #20]	; (8007154 <_fflush_r+0x70>)
 800713e:	429c      	cmp	r4, r3
 8007140:	d101      	bne.n	8007146 <_fflush_r+0x62>
 8007142:	68ac      	ldr	r4, [r5, #8]
 8007144:	e7df      	b.n	8007106 <_fflush_r+0x22>
 8007146:	4b04      	ldr	r3, [pc, #16]	; (8007158 <_fflush_r+0x74>)
 8007148:	429c      	cmp	r4, r3
 800714a:	bf08      	it	eq
 800714c:	68ec      	ldreq	r4, [r5, #12]
 800714e:	e7da      	b.n	8007106 <_fflush_r+0x22>
 8007150:	08007dcc 	.word	0x08007dcc
 8007154:	08007dec 	.word	0x08007dec
 8007158:	08007dac 	.word	0x08007dac

0800715c <std>:
 800715c:	2300      	movs	r3, #0
 800715e:	b510      	push	{r4, lr}
 8007160:	4604      	mov	r4, r0
 8007162:	e9c0 3300 	strd	r3, r3, [r0]
 8007166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800716a:	6083      	str	r3, [r0, #8]
 800716c:	8181      	strh	r1, [r0, #12]
 800716e:	6643      	str	r3, [r0, #100]	; 0x64
 8007170:	81c2      	strh	r2, [r0, #14]
 8007172:	6183      	str	r3, [r0, #24]
 8007174:	4619      	mov	r1, r3
 8007176:	2208      	movs	r2, #8
 8007178:	305c      	adds	r0, #92	; 0x5c
 800717a:	f7ff fdd7 	bl	8006d2c <memset>
 800717e:	4b05      	ldr	r3, [pc, #20]	; (8007194 <std+0x38>)
 8007180:	6263      	str	r3, [r4, #36]	; 0x24
 8007182:	4b05      	ldr	r3, [pc, #20]	; (8007198 <std+0x3c>)
 8007184:	62a3      	str	r3, [r4, #40]	; 0x28
 8007186:	4b05      	ldr	r3, [pc, #20]	; (800719c <std+0x40>)
 8007188:	62e3      	str	r3, [r4, #44]	; 0x2c
 800718a:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <std+0x44>)
 800718c:	6224      	str	r4, [r4, #32]
 800718e:	6323      	str	r3, [r4, #48]	; 0x30
 8007190:	bd10      	pop	{r4, pc}
 8007192:	bf00      	nop
 8007194:	08007bd5 	.word	0x08007bd5
 8007198:	08007bf7 	.word	0x08007bf7
 800719c:	08007c2f 	.word	0x08007c2f
 80071a0:	08007c53 	.word	0x08007c53

080071a4 <_cleanup_r>:
 80071a4:	4901      	ldr	r1, [pc, #4]	; (80071ac <_cleanup_r+0x8>)
 80071a6:	f000 b8af 	b.w	8007308 <_fwalk_reent>
 80071aa:	bf00      	nop
 80071ac:	080070e5 	.word	0x080070e5

080071b0 <__sfmoreglue>:
 80071b0:	b570      	push	{r4, r5, r6, lr}
 80071b2:	2268      	movs	r2, #104	; 0x68
 80071b4:	1e4d      	subs	r5, r1, #1
 80071b6:	4355      	muls	r5, r2
 80071b8:	460e      	mov	r6, r1
 80071ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80071be:	f000 f997 	bl	80074f0 <_malloc_r>
 80071c2:	4604      	mov	r4, r0
 80071c4:	b140      	cbz	r0, 80071d8 <__sfmoreglue+0x28>
 80071c6:	2100      	movs	r1, #0
 80071c8:	e9c0 1600 	strd	r1, r6, [r0]
 80071cc:	300c      	adds	r0, #12
 80071ce:	60a0      	str	r0, [r4, #8]
 80071d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80071d4:	f7ff fdaa 	bl	8006d2c <memset>
 80071d8:	4620      	mov	r0, r4
 80071da:	bd70      	pop	{r4, r5, r6, pc}

080071dc <__sfp_lock_acquire>:
 80071dc:	4801      	ldr	r0, [pc, #4]	; (80071e4 <__sfp_lock_acquire+0x8>)
 80071de:	f000 b8b3 	b.w	8007348 <__retarget_lock_acquire_recursive>
 80071e2:	bf00      	nop
 80071e4:	2400012d 	.word	0x2400012d

080071e8 <__sfp_lock_release>:
 80071e8:	4801      	ldr	r0, [pc, #4]	; (80071f0 <__sfp_lock_release+0x8>)
 80071ea:	f000 b8ae 	b.w	800734a <__retarget_lock_release_recursive>
 80071ee:	bf00      	nop
 80071f0:	2400012d 	.word	0x2400012d

080071f4 <__sinit_lock_acquire>:
 80071f4:	4801      	ldr	r0, [pc, #4]	; (80071fc <__sinit_lock_acquire+0x8>)
 80071f6:	f000 b8a7 	b.w	8007348 <__retarget_lock_acquire_recursive>
 80071fa:	bf00      	nop
 80071fc:	2400012e 	.word	0x2400012e

08007200 <__sinit_lock_release>:
 8007200:	4801      	ldr	r0, [pc, #4]	; (8007208 <__sinit_lock_release+0x8>)
 8007202:	f000 b8a2 	b.w	800734a <__retarget_lock_release_recursive>
 8007206:	bf00      	nop
 8007208:	2400012e 	.word	0x2400012e

0800720c <__sinit>:
 800720c:	b510      	push	{r4, lr}
 800720e:	4604      	mov	r4, r0
 8007210:	f7ff fff0 	bl	80071f4 <__sinit_lock_acquire>
 8007214:	69a3      	ldr	r3, [r4, #24]
 8007216:	b11b      	cbz	r3, 8007220 <__sinit+0x14>
 8007218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800721c:	f7ff bff0 	b.w	8007200 <__sinit_lock_release>
 8007220:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007224:	6523      	str	r3, [r4, #80]	; 0x50
 8007226:	4b13      	ldr	r3, [pc, #76]	; (8007274 <__sinit+0x68>)
 8007228:	4a13      	ldr	r2, [pc, #76]	; (8007278 <__sinit+0x6c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	62a2      	str	r2, [r4, #40]	; 0x28
 800722e:	42a3      	cmp	r3, r4
 8007230:	bf04      	itt	eq
 8007232:	2301      	moveq	r3, #1
 8007234:	61a3      	streq	r3, [r4, #24]
 8007236:	4620      	mov	r0, r4
 8007238:	f000 f820 	bl	800727c <__sfp>
 800723c:	6060      	str	r0, [r4, #4]
 800723e:	4620      	mov	r0, r4
 8007240:	f000 f81c 	bl	800727c <__sfp>
 8007244:	60a0      	str	r0, [r4, #8]
 8007246:	4620      	mov	r0, r4
 8007248:	f000 f818 	bl	800727c <__sfp>
 800724c:	2200      	movs	r2, #0
 800724e:	60e0      	str	r0, [r4, #12]
 8007250:	2104      	movs	r1, #4
 8007252:	6860      	ldr	r0, [r4, #4]
 8007254:	f7ff ff82 	bl	800715c <std>
 8007258:	68a0      	ldr	r0, [r4, #8]
 800725a:	2201      	movs	r2, #1
 800725c:	2109      	movs	r1, #9
 800725e:	f7ff ff7d 	bl	800715c <std>
 8007262:	68e0      	ldr	r0, [r4, #12]
 8007264:	2202      	movs	r2, #2
 8007266:	2112      	movs	r1, #18
 8007268:	f7ff ff78 	bl	800715c <std>
 800726c:	2301      	movs	r3, #1
 800726e:	61a3      	str	r3, [r4, #24]
 8007270:	e7d2      	b.n	8007218 <__sinit+0xc>
 8007272:	bf00      	nop
 8007274:	08007da8 	.word	0x08007da8
 8007278:	080071a5 	.word	0x080071a5

0800727c <__sfp>:
 800727c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727e:	4607      	mov	r7, r0
 8007280:	f7ff ffac 	bl	80071dc <__sfp_lock_acquire>
 8007284:	4b1e      	ldr	r3, [pc, #120]	; (8007300 <__sfp+0x84>)
 8007286:	681e      	ldr	r6, [r3, #0]
 8007288:	69b3      	ldr	r3, [r6, #24]
 800728a:	b913      	cbnz	r3, 8007292 <__sfp+0x16>
 800728c:	4630      	mov	r0, r6
 800728e:	f7ff ffbd 	bl	800720c <__sinit>
 8007292:	3648      	adds	r6, #72	; 0x48
 8007294:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007298:	3b01      	subs	r3, #1
 800729a:	d503      	bpl.n	80072a4 <__sfp+0x28>
 800729c:	6833      	ldr	r3, [r6, #0]
 800729e:	b30b      	cbz	r3, 80072e4 <__sfp+0x68>
 80072a0:	6836      	ldr	r6, [r6, #0]
 80072a2:	e7f7      	b.n	8007294 <__sfp+0x18>
 80072a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80072a8:	b9d5      	cbnz	r5, 80072e0 <__sfp+0x64>
 80072aa:	4b16      	ldr	r3, [pc, #88]	; (8007304 <__sfp+0x88>)
 80072ac:	60e3      	str	r3, [r4, #12]
 80072ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072b2:	6665      	str	r5, [r4, #100]	; 0x64
 80072b4:	f000 f847 	bl	8007346 <__retarget_lock_init_recursive>
 80072b8:	f7ff ff96 	bl	80071e8 <__sfp_lock_release>
 80072bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80072c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80072c4:	6025      	str	r5, [r4, #0]
 80072c6:	61a5      	str	r5, [r4, #24]
 80072c8:	2208      	movs	r2, #8
 80072ca:	4629      	mov	r1, r5
 80072cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80072d0:	f7ff fd2c 	bl	8006d2c <memset>
 80072d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80072d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80072dc:	4620      	mov	r0, r4
 80072de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072e0:	3468      	adds	r4, #104	; 0x68
 80072e2:	e7d9      	b.n	8007298 <__sfp+0x1c>
 80072e4:	2104      	movs	r1, #4
 80072e6:	4638      	mov	r0, r7
 80072e8:	f7ff ff62 	bl	80071b0 <__sfmoreglue>
 80072ec:	4604      	mov	r4, r0
 80072ee:	6030      	str	r0, [r6, #0]
 80072f0:	2800      	cmp	r0, #0
 80072f2:	d1d5      	bne.n	80072a0 <__sfp+0x24>
 80072f4:	f7ff ff78 	bl	80071e8 <__sfp_lock_release>
 80072f8:	230c      	movs	r3, #12
 80072fa:	603b      	str	r3, [r7, #0]
 80072fc:	e7ee      	b.n	80072dc <__sfp+0x60>
 80072fe:	bf00      	nop
 8007300:	08007da8 	.word	0x08007da8
 8007304:	ffff0001 	.word	0xffff0001

08007308 <_fwalk_reent>:
 8007308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800730c:	4606      	mov	r6, r0
 800730e:	4688      	mov	r8, r1
 8007310:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007314:	2700      	movs	r7, #0
 8007316:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800731a:	f1b9 0901 	subs.w	r9, r9, #1
 800731e:	d505      	bpl.n	800732c <_fwalk_reent+0x24>
 8007320:	6824      	ldr	r4, [r4, #0]
 8007322:	2c00      	cmp	r4, #0
 8007324:	d1f7      	bne.n	8007316 <_fwalk_reent+0xe>
 8007326:	4638      	mov	r0, r7
 8007328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800732c:	89ab      	ldrh	r3, [r5, #12]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d907      	bls.n	8007342 <_fwalk_reent+0x3a>
 8007332:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007336:	3301      	adds	r3, #1
 8007338:	d003      	beq.n	8007342 <_fwalk_reent+0x3a>
 800733a:	4629      	mov	r1, r5
 800733c:	4630      	mov	r0, r6
 800733e:	47c0      	blx	r8
 8007340:	4307      	orrs	r7, r0
 8007342:	3568      	adds	r5, #104	; 0x68
 8007344:	e7e9      	b.n	800731a <_fwalk_reent+0x12>

08007346 <__retarget_lock_init_recursive>:
 8007346:	4770      	bx	lr

08007348 <__retarget_lock_acquire_recursive>:
 8007348:	4770      	bx	lr

0800734a <__retarget_lock_release_recursive>:
 800734a:	4770      	bx	lr

0800734c <__swhatbuf_r>:
 800734c:	b570      	push	{r4, r5, r6, lr}
 800734e:	460e      	mov	r6, r1
 8007350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007354:	2900      	cmp	r1, #0
 8007356:	b096      	sub	sp, #88	; 0x58
 8007358:	4614      	mov	r4, r2
 800735a:	461d      	mov	r5, r3
 800735c:	da08      	bge.n	8007370 <__swhatbuf_r+0x24>
 800735e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	602a      	str	r2, [r5, #0]
 8007366:	061a      	lsls	r2, r3, #24
 8007368:	d410      	bmi.n	800738c <__swhatbuf_r+0x40>
 800736a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800736e:	e00e      	b.n	800738e <__swhatbuf_r+0x42>
 8007370:	466a      	mov	r2, sp
 8007372:	f000 fc95 	bl	8007ca0 <_fstat_r>
 8007376:	2800      	cmp	r0, #0
 8007378:	dbf1      	blt.n	800735e <__swhatbuf_r+0x12>
 800737a:	9a01      	ldr	r2, [sp, #4]
 800737c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007380:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007384:	425a      	negs	r2, r3
 8007386:	415a      	adcs	r2, r3
 8007388:	602a      	str	r2, [r5, #0]
 800738a:	e7ee      	b.n	800736a <__swhatbuf_r+0x1e>
 800738c:	2340      	movs	r3, #64	; 0x40
 800738e:	2000      	movs	r0, #0
 8007390:	6023      	str	r3, [r4, #0]
 8007392:	b016      	add	sp, #88	; 0x58
 8007394:	bd70      	pop	{r4, r5, r6, pc}
	...

08007398 <__smakebuf_r>:
 8007398:	898b      	ldrh	r3, [r1, #12]
 800739a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800739c:	079d      	lsls	r5, r3, #30
 800739e:	4606      	mov	r6, r0
 80073a0:	460c      	mov	r4, r1
 80073a2:	d507      	bpl.n	80073b4 <__smakebuf_r+0x1c>
 80073a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80073a8:	6023      	str	r3, [r4, #0]
 80073aa:	6123      	str	r3, [r4, #16]
 80073ac:	2301      	movs	r3, #1
 80073ae:	6163      	str	r3, [r4, #20]
 80073b0:	b002      	add	sp, #8
 80073b2:	bd70      	pop	{r4, r5, r6, pc}
 80073b4:	ab01      	add	r3, sp, #4
 80073b6:	466a      	mov	r2, sp
 80073b8:	f7ff ffc8 	bl	800734c <__swhatbuf_r>
 80073bc:	9900      	ldr	r1, [sp, #0]
 80073be:	4605      	mov	r5, r0
 80073c0:	4630      	mov	r0, r6
 80073c2:	f000 f895 	bl	80074f0 <_malloc_r>
 80073c6:	b948      	cbnz	r0, 80073dc <__smakebuf_r+0x44>
 80073c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073cc:	059a      	lsls	r2, r3, #22
 80073ce:	d4ef      	bmi.n	80073b0 <__smakebuf_r+0x18>
 80073d0:	f023 0303 	bic.w	r3, r3, #3
 80073d4:	f043 0302 	orr.w	r3, r3, #2
 80073d8:	81a3      	strh	r3, [r4, #12]
 80073da:	e7e3      	b.n	80073a4 <__smakebuf_r+0xc>
 80073dc:	4b0d      	ldr	r3, [pc, #52]	; (8007414 <__smakebuf_r+0x7c>)
 80073de:	62b3      	str	r3, [r6, #40]	; 0x28
 80073e0:	89a3      	ldrh	r3, [r4, #12]
 80073e2:	6020      	str	r0, [r4, #0]
 80073e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073e8:	81a3      	strh	r3, [r4, #12]
 80073ea:	9b00      	ldr	r3, [sp, #0]
 80073ec:	6163      	str	r3, [r4, #20]
 80073ee:	9b01      	ldr	r3, [sp, #4]
 80073f0:	6120      	str	r0, [r4, #16]
 80073f2:	b15b      	cbz	r3, 800740c <__smakebuf_r+0x74>
 80073f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073f8:	4630      	mov	r0, r6
 80073fa:	f000 fc63 	bl	8007cc4 <_isatty_r>
 80073fe:	b128      	cbz	r0, 800740c <__smakebuf_r+0x74>
 8007400:	89a3      	ldrh	r3, [r4, #12]
 8007402:	f023 0303 	bic.w	r3, r3, #3
 8007406:	f043 0301 	orr.w	r3, r3, #1
 800740a:	81a3      	strh	r3, [r4, #12]
 800740c:	89a0      	ldrh	r0, [r4, #12]
 800740e:	4305      	orrs	r5, r0
 8007410:	81a5      	strh	r5, [r4, #12]
 8007412:	e7cd      	b.n	80073b0 <__smakebuf_r+0x18>
 8007414:	080071a5 	.word	0x080071a5

08007418 <_free_r>:
 8007418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800741a:	2900      	cmp	r1, #0
 800741c:	d044      	beq.n	80074a8 <_free_r+0x90>
 800741e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007422:	9001      	str	r0, [sp, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	f1a1 0404 	sub.w	r4, r1, #4
 800742a:	bfb8      	it	lt
 800742c:	18e4      	addlt	r4, r4, r3
 800742e:	f000 fc6b 	bl	8007d08 <__malloc_lock>
 8007432:	4a1e      	ldr	r2, [pc, #120]	; (80074ac <_free_r+0x94>)
 8007434:	9801      	ldr	r0, [sp, #4]
 8007436:	6813      	ldr	r3, [r2, #0]
 8007438:	b933      	cbnz	r3, 8007448 <_free_r+0x30>
 800743a:	6063      	str	r3, [r4, #4]
 800743c:	6014      	str	r4, [r2, #0]
 800743e:	b003      	add	sp, #12
 8007440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007444:	f000 bc66 	b.w	8007d14 <__malloc_unlock>
 8007448:	42a3      	cmp	r3, r4
 800744a:	d908      	bls.n	800745e <_free_r+0x46>
 800744c:	6825      	ldr	r5, [r4, #0]
 800744e:	1961      	adds	r1, r4, r5
 8007450:	428b      	cmp	r3, r1
 8007452:	bf01      	itttt	eq
 8007454:	6819      	ldreq	r1, [r3, #0]
 8007456:	685b      	ldreq	r3, [r3, #4]
 8007458:	1949      	addeq	r1, r1, r5
 800745a:	6021      	streq	r1, [r4, #0]
 800745c:	e7ed      	b.n	800743a <_free_r+0x22>
 800745e:	461a      	mov	r2, r3
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	b10b      	cbz	r3, 8007468 <_free_r+0x50>
 8007464:	42a3      	cmp	r3, r4
 8007466:	d9fa      	bls.n	800745e <_free_r+0x46>
 8007468:	6811      	ldr	r1, [r2, #0]
 800746a:	1855      	adds	r5, r2, r1
 800746c:	42a5      	cmp	r5, r4
 800746e:	d10b      	bne.n	8007488 <_free_r+0x70>
 8007470:	6824      	ldr	r4, [r4, #0]
 8007472:	4421      	add	r1, r4
 8007474:	1854      	adds	r4, r2, r1
 8007476:	42a3      	cmp	r3, r4
 8007478:	6011      	str	r1, [r2, #0]
 800747a:	d1e0      	bne.n	800743e <_free_r+0x26>
 800747c:	681c      	ldr	r4, [r3, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	6053      	str	r3, [r2, #4]
 8007482:	4421      	add	r1, r4
 8007484:	6011      	str	r1, [r2, #0]
 8007486:	e7da      	b.n	800743e <_free_r+0x26>
 8007488:	d902      	bls.n	8007490 <_free_r+0x78>
 800748a:	230c      	movs	r3, #12
 800748c:	6003      	str	r3, [r0, #0]
 800748e:	e7d6      	b.n	800743e <_free_r+0x26>
 8007490:	6825      	ldr	r5, [r4, #0]
 8007492:	1961      	adds	r1, r4, r5
 8007494:	428b      	cmp	r3, r1
 8007496:	bf04      	itt	eq
 8007498:	6819      	ldreq	r1, [r3, #0]
 800749a:	685b      	ldreq	r3, [r3, #4]
 800749c:	6063      	str	r3, [r4, #4]
 800749e:	bf04      	itt	eq
 80074a0:	1949      	addeq	r1, r1, r5
 80074a2:	6021      	streq	r1, [r4, #0]
 80074a4:	6054      	str	r4, [r2, #4]
 80074a6:	e7ca      	b.n	800743e <_free_r+0x26>
 80074a8:	b003      	add	sp, #12
 80074aa:	bd30      	pop	{r4, r5, pc}
 80074ac:	24000130 	.word	0x24000130

080074b0 <sbrk_aligned>:
 80074b0:	b570      	push	{r4, r5, r6, lr}
 80074b2:	4e0e      	ldr	r6, [pc, #56]	; (80074ec <sbrk_aligned+0x3c>)
 80074b4:	460c      	mov	r4, r1
 80074b6:	6831      	ldr	r1, [r6, #0]
 80074b8:	4605      	mov	r5, r0
 80074ba:	b911      	cbnz	r1, 80074c2 <sbrk_aligned+0x12>
 80074bc:	f000 fb7a 	bl	8007bb4 <_sbrk_r>
 80074c0:	6030      	str	r0, [r6, #0]
 80074c2:	4621      	mov	r1, r4
 80074c4:	4628      	mov	r0, r5
 80074c6:	f000 fb75 	bl	8007bb4 <_sbrk_r>
 80074ca:	1c43      	adds	r3, r0, #1
 80074cc:	d00a      	beq.n	80074e4 <sbrk_aligned+0x34>
 80074ce:	1cc4      	adds	r4, r0, #3
 80074d0:	f024 0403 	bic.w	r4, r4, #3
 80074d4:	42a0      	cmp	r0, r4
 80074d6:	d007      	beq.n	80074e8 <sbrk_aligned+0x38>
 80074d8:	1a21      	subs	r1, r4, r0
 80074da:	4628      	mov	r0, r5
 80074dc:	f000 fb6a 	bl	8007bb4 <_sbrk_r>
 80074e0:	3001      	adds	r0, #1
 80074e2:	d101      	bne.n	80074e8 <sbrk_aligned+0x38>
 80074e4:	f04f 34ff 	mov.w	r4, #4294967295
 80074e8:	4620      	mov	r0, r4
 80074ea:	bd70      	pop	{r4, r5, r6, pc}
 80074ec:	24000134 	.word	0x24000134

080074f0 <_malloc_r>:
 80074f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074f4:	1ccd      	adds	r5, r1, #3
 80074f6:	f025 0503 	bic.w	r5, r5, #3
 80074fa:	3508      	adds	r5, #8
 80074fc:	2d0c      	cmp	r5, #12
 80074fe:	bf38      	it	cc
 8007500:	250c      	movcc	r5, #12
 8007502:	2d00      	cmp	r5, #0
 8007504:	4607      	mov	r7, r0
 8007506:	db01      	blt.n	800750c <_malloc_r+0x1c>
 8007508:	42a9      	cmp	r1, r5
 800750a:	d905      	bls.n	8007518 <_malloc_r+0x28>
 800750c:	230c      	movs	r3, #12
 800750e:	603b      	str	r3, [r7, #0]
 8007510:	2600      	movs	r6, #0
 8007512:	4630      	mov	r0, r6
 8007514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007518:	4e2e      	ldr	r6, [pc, #184]	; (80075d4 <_malloc_r+0xe4>)
 800751a:	f000 fbf5 	bl	8007d08 <__malloc_lock>
 800751e:	6833      	ldr	r3, [r6, #0]
 8007520:	461c      	mov	r4, r3
 8007522:	bb34      	cbnz	r4, 8007572 <_malloc_r+0x82>
 8007524:	4629      	mov	r1, r5
 8007526:	4638      	mov	r0, r7
 8007528:	f7ff ffc2 	bl	80074b0 <sbrk_aligned>
 800752c:	1c43      	adds	r3, r0, #1
 800752e:	4604      	mov	r4, r0
 8007530:	d14d      	bne.n	80075ce <_malloc_r+0xde>
 8007532:	6834      	ldr	r4, [r6, #0]
 8007534:	4626      	mov	r6, r4
 8007536:	2e00      	cmp	r6, #0
 8007538:	d140      	bne.n	80075bc <_malloc_r+0xcc>
 800753a:	6823      	ldr	r3, [r4, #0]
 800753c:	4631      	mov	r1, r6
 800753e:	4638      	mov	r0, r7
 8007540:	eb04 0803 	add.w	r8, r4, r3
 8007544:	f000 fb36 	bl	8007bb4 <_sbrk_r>
 8007548:	4580      	cmp	r8, r0
 800754a:	d13a      	bne.n	80075c2 <_malloc_r+0xd2>
 800754c:	6821      	ldr	r1, [r4, #0]
 800754e:	3503      	adds	r5, #3
 8007550:	1a6d      	subs	r5, r5, r1
 8007552:	f025 0503 	bic.w	r5, r5, #3
 8007556:	3508      	adds	r5, #8
 8007558:	2d0c      	cmp	r5, #12
 800755a:	bf38      	it	cc
 800755c:	250c      	movcc	r5, #12
 800755e:	4629      	mov	r1, r5
 8007560:	4638      	mov	r0, r7
 8007562:	f7ff ffa5 	bl	80074b0 <sbrk_aligned>
 8007566:	3001      	adds	r0, #1
 8007568:	d02b      	beq.n	80075c2 <_malloc_r+0xd2>
 800756a:	6823      	ldr	r3, [r4, #0]
 800756c:	442b      	add	r3, r5
 800756e:	6023      	str	r3, [r4, #0]
 8007570:	e00e      	b.n	8007590 <_malloc_r+0xa0>
 8007572:	6822      	ldr	r2, [r4, #0]
 8007574:	1b52      	subs	r2, r2, r5
 8007576:	d41e      	bmi.n	80075b6 <_malloc_r+0xc6>
 8007578:	2a0b      	cmp	r2, #11
 800757a:	d916      	bls.n	80075aa <_malloc_r+0xba>
 800757c:	1961      	adds	r1, r4, r5
 800757e:	42a3      	cmp	r3, r4
 8007580:	6025      	str	r5, [r4, #0]
 8007582:	bf18      	it	ne
 8007584:	6059      	strne	r1, [r3, #4]
 8007586:	6863      	ldr	r3, [r4, #4]
 8007588:	bf08      	it	eq
 800758a:	6031      	streq	r1, [r6, #0]
 800758c:	5162      	str	r2, [r4, r5]
 800758e:	604b      	str	r3, [r1, #4]
 8007590:	4638      	mov	r0, r7
 8007592:	f104 060b 	add.w	r6, r4, #11
 8007596:	f000 fbbd 	bl	8007d14 <__malloc_unlock>
 800759a:	f026 0607 	bic.w	r6, r6, #7
 800759e:	1d23      	adds	r3, r4, #4
 80075a0:	1af2      	subs	r2, r6, r3
 80075a2:	d0b6      	beq.n	8007512 <_malloc_r+0x22>
 80075a4:	1b9b      	subs	r3, r3, r6
 80075a6:	50a3      	str	r3, [r4, r2]
 80075a8:	e7b3      	b.n	8007512 <_malloc_r+0x22>
 80075aa:	6862      	ldr	r2, [r4, #4]
 80075ac:	42a3      	cmp	r3, r4
 80075ae:	bf0c      	ite	eq
 80075b0:	6032      	streq	r2, [r6, #0]
 80075b2:	605a      	strne	r2, [r3, #4]
 80075b4:	e7ec      	b.n	8007590 <_malloc_r+0xa0>
 80075b6:	4623      	mov	r3, r4
 80075b8:	6864      	ldr	r4, [r4, #4]
 80075ba:	e7b2      	b.n	8007522 <_malloc_r+0x32>
 80075bc:	4634      	mov	r4, r6
 80075be:	6876      	ldr	r6, [r6, #4]
 80075c0:	e7b9      	b.n	8007536 <_malloc_r+0x46>
 80075c2:	230c      	movs	r3, #12
 80075c4:	603b      	str	r3, [r7, #0]
 80075c6:	4638      	mov	r0, r7
 80075c8:	f000 fba4 	bl	8007d14 <__malloc_unlock>
 80075cc:	e7a1      	b.n	8007512 <_malloc_r+0x22>
 80075ce:	6025      	str	r5, [r4, #0]
 80075d0:	e7de      	b.n	8007590 <_malloc_r+0xa0>
 80075d2:	bf00      	nop
 80075d4:	24000130 	.word	0x24000130

080075d8 <__sfputc_r>:
 80075d8:	6893      	ldr	r3, [r2, #8]
 80075da:	3b01      	subs	r3, #1
 80075dc:	2b00      	cmp	r3, #0
 80075de:	b410      	push	{r4}
 80075e0:	6093      	str	r3, [r2, #8]
 80075e2:	da08      	bge.n	80075f6 <__sfputc_r+0x1e>
 80075e4:	6994      	ldr	r4, [r2, #24]
 80075e6:	42a3      	cmp	r3, r4
 80075e8:	db01      	blt.n	80075ee <__sfputc_r+0x16>
 80075ea:	290a      	cmp	r1, #10
 80075ec:	d103      	bne.n	80075f6 <__sfputc_r+0x1e>
 80075ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075f2:	f7ff bc31 	b.w	8006e58 <__swbuf_r>
 80075f6:	6813      	ldr	r3, [r2, #0]
 80075f8:	1c58      	adds	r0, r3, #1
 80075fa:	6010      	str	r0, [r2, #0]
 80075fc:	7019      	strb	r1, [r3, #0]
 80075fe:	4608      	mov	r0, r1
 8007600:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007604:	4770      	bx	lr

08007606 <__sfputs_r>:
 8007606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007608:	4606      	mov	r6, r0
 800760a:	460f      	mov	r7, r1
 800760c:	4614      	mov	r4, r2
 800760e:	18d5      	adds	r5, r2, r3
 8007610:	42ac      	cmp	r4, r5
 8007612:	d101      	bne.n	8007618 <__sfputs_r+0x12>
 8007614:	2000      	movs	r0, #0
 8007616:	e007      	b.n	8007628 <__sfputs_r+0x22>
 8007618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800761c:	463a      	mov	r2, r7
 800761e:	4630      	mov	r0, r6
 8007620:	f7ff ffda 	bl	80075d8 <__sfputc_r>
 8007624:	1c43      	adds	r3, r0, #1
 8007626:	d1f3      	bne.n	8007610 <__sfputs_r+0xa>
 8007628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800762c <_vfiprintf_r>:
 800762c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007630:	460d      	mov	r5, r1
 8007632:	b09d      	sub	sp, #116	; 0x74
 8007634:	4614      	mov	r4, r2
 8007636:	4698      	mov	r8, r3
 8007638:	4606      	mov	r6, r0
 800763a:	b118      	cbz	r0, 8007644 <_vfiprintf_r+0x18>
 800763c:	6983      	ldr	r3, [r0, #24]
 800763e:	b90b      	cbnz	r3, 8007644 <_vfiprintf_r+0x18>
 8007640:	f7ff fde4 	bl	800720c <__sinit>
 8007644:	4b89      	ldr	r3, [pc, #548]	; (800786c <_vfiprintf_r+0x240>)
 8007646:	429d      	cmp	r5, r3
 8007648:	d11b      	bne.n	8007682 <_vfiprintf_r+0x56>
 800764a:	6875      	ldr	r5, [r6, #4]
 800764c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800764e:	07d9      	lsls	r1, r3, #31
 8007650:	d405      	bmi.n	800765e <_vfiprintf_r+0x32>
 8007652:	89ab      	ldrh	r3, [r5, #12]
 8007654:	059a      	lsls	r2, r3, #22
 8007656:	d402      	bmi.n	800765e <_vfiprintf_r+0x32>
 8007658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800765a:	f7ff fe75 	bl	8007348 <__retarget_lock_acquire_recursive>
 800765e:	89ab      	ldrh	r3, [r5, #12]
 8007660:	071b      	lsls	r3, r3, #28
 8007662:	d501      	bpl.n	8007668 <_vfiprintf_r+0x3c>
 8007664:	692b      	ldr	r3, [r5, #16]
 8007666:	b9eb      	cbnz	r3, 80076a4 <_vfiprintf_r+0x78>
 8007668:	4629      	mov	r1, r5
 800766a:	4630      	mov	r0, r6
 800766c:	f7ff fc46 	bl	8006efc <__swsetup_r>
 8007670:	b1c0      	cbz	r0, 80076a4 <_vfiprintf_r+0x78>
 8007672:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007674:	07dc      	lsls	r4, r3, #31
 8007676:	d50e      	bpl.n	8007696 <_vfiprintf_r+0x6a>
 8007678:	f04f 30ff 	mov.w	r0, #4294967295
 800767c:	b01d      	add	sp, #116	; 0x74
 800767e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007682:	4b7b      	ldr	r3, [pc, #492]	; (8007870 <_vfiprintf_r+0x244>)
 8007684:	429d      	cmp	r5, r3
 8007686:	d101      	bne.n	800768c <_vfiprintf_r+0x60>
 8007688:	68b5      	ldr	r5, [r6, #8]
 800768a:	e7df      	b.n	800764c <_vfiprintf_r+0x20>
 800768c:	4b79      	ldr	r3, [pc, #484]	; (8007874 <_vfiprintf_r+0x248>)
 800768e:	429d      	cmp	r5, r3
 8007690:	bf08      	it	eq
 8007692:	68f5      	ldreq	r5, [r6, #12]
 8007694:	e7da      	b.n	800764c <_vfiprintf_r+0x20>
 8007696:	89ab      	ldrh	r3, [r5, #12]
 8007698:	0598      	lsls	r0, r3, #22
 800769a:	d4ed      	bmi.n	8007678 <_vfiprintf_r+0x4c>
 800769c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800769e:	f7ff fe54 	bl	800734a <__retarget_lock_release_recursive>
 80076a2:	e7e9      	b.n	8007678 <_vfiprintf_r+0x4c>
 80076a4:	2300      	movs	r3, #0
 80076a6:	9309      	str	r3, [sp, #36]	; 0x24
 80076a8:	2320      	movs	r3, #32
 80076aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80076b2:	2330      	movs	r3, #48	; 0x30
 80076b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007878 <_vfiprintf_r+0x24c>
 80076b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076bc:	f04f 0901 	mov.w	r9, #1
 80076c0:	4623      	mov	r3, r4
 80076c2:	469a      	mov	sl, r3
 80076c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076c8:	b10a      	cbz	r2, 80076ce <_vfiprintf_r+0xa2>
 80076ca:	2a25      	cmp	r2, #37	; 0x25
 80076cc:	d1f9      	bne.n	80076c2 <_vfiprintf_r+0x96>
 80076ce:	ebba 0b04 	subs.w	fp, sl, r4
 80076d2:	d00b      	beq.n	80076ec <_vfiprintf_r+0xc0>
 80076d4:	465b      	mov	r3, fp
 80076d6:	4622      	mov	r2, r4
 80076d8:	4629      	mov	r1, r5
 80076da:	4630      	mov	r0, r6
 80076dc:	f7ff ff93 	bl	8007606 <__sfputs_r>
 80076e0:	3001      	adds	r0, #1
 80076e2:	f000 80aa 	beq.w	800783a <_vfiprintf_r+0x20e>
 80076e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076e8:	445a      	add	r2, fp
 80076ea:	9209      	str	r2, [sp, #36]	; 0x24
 80076ec:	f89a 3000 	ldrb.w	r3, [sl]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 80a2 	beq.w	800783a <_vfiprintf_r+0x20e>
 80076f6:	2300      	movs	r3, #0
 80076f8:	f04f 32ff 	mov.w	r2, #4294967295
 80076fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007700:	f10a 0a01 	add.w	sl, sl, #1
 8007704:	9304      	str	r3, [sp, #16]
 8007706:	9307      	str	r3, [sp, #28]
 8007708:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800770c:	931a      	str	r3, [sp, #104]	; 0x68
 800770e:	4654      	mov	r4, sl
 8007710:	2205      	movs	r2, #5
 8007712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007716:	4858      	ldr	r0, [pc, #352]	; (8007878 <_vfiprintf_r+0x24c>)
 8007718:	f7f8 fde2 	bl	80002e0 <memchr>
 800771c:	9a04      	ldr	r2, [sp, #16]
 800771e:	b9d8      	cbnz	r0, 8007758 <_vfiprintf_r+0x12c>
 8007720:	06d1      	lsls	r1, r2, #27
 8007722:	bf44      	itt	mi
 8007724:	2320      	movmi	r3, #32
 8007726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800772a:	0713      	lsls	r3, r2, #28
 800772c:	bf44      	itt	mi
 800772e:	232b      	movmi	r3, #43	; 0x2b
 8007730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007734:	f89a 3000 	ldrb.w	r3, [sl]
 8007738:	2b2a      	cmp	r3, #42	; 0x2a
 800773a:	d015      	beq.n	8007768 <_vfiprintf_r+0x13c>
 800773c:	9a07      	ldr	r2, [sp, #28]
 800773e:	4654      	mov	r4, sl
 8007740:	2000      	movs	r0, #0
 8007742:	f04f 0c0a 	mov.w	ip, #10
 8007746:	4621      	mov	r1, r4
 8007748:	f811 3b01 	ldrb.w	r3, [r1], #1
 800774c:	3b30      	subs	r3, #48	; 0x30
 800774e:	2b09      	cmp	r3, #9
 8007750:	d94e      	bls.n	80077f0 <_vfiprintf_r+0x1c4>
 8007752:	b1b0      	cbz	r0, 8007782 <_vfiprintf_r+0x156>
 8007754:	9207      	str	r2, [sp, #28]
 8007756:	e014      	b.n	8007782 <_vfiprintf_r+0x156>
 8007758:	eba0 0308 	sub.w	r3, r0, r8
 800775c:	fa09 f303 	lsl.w	r3, r9, r3
 8007760:	4313      	orrs	r3, r2
 8007762:	9304      	str	r3, [sp, #16]
 8007764:	46a2      	mov	sl, r4
 8007766:	e7d2      	b.n	800770e <_vfiprintf_r+0xe2>
 8007768:	9b03      	ldr	r3, [sp, #12]
 800776a:	1d19      	adds	r1, r3, #4
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	9103      	str	r1, [sp, #12]
 8007770:	2b00      	cmp	r3, #0
 8007772:	bfbb      	ittet	lt
 8007774:	425b      	neglt	r3, r3
 8007776:	f042 0202 	orrlt.w	r2, r2, #2
 800777a:	9307      	strge	r3, [sp, #28]
 800777c:	9307      	strlt	r3, [sp, #28]
 800777e:	bfb8      	it	lt
 8007780:	9204      	strlt	r2, [sp, #16]
 8007782:	7823      	ldrb	r3, [r4, #0]
 8007784:	2b2e      	cmp	r3, #46	; 0x2e
 8007786:	d10c      	bne.n	80077a2 <_vfiprintf_r+0x176>
 8007788:	7863      	ldrb	r3, [r4, #1]
 800778a:	2b2a      	cmp	r3, #42	; 0x2a
 800778c:	d135      	bne.n	80077fa <_vfiprintf_r+0x1ce>
 800778e:	9b03      	ldr	r3, [sp, #12]
 8007790:	1d1a      	adds	r2, r3, #4
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	9203      	str	r2, [sp, #12]
 8007796:	2b00      	cmp	r3, #0
 8007798:	bfb8      	it	lt
 800779a:	f04f 33ff 	movlt.w	r3, #4294967295
 800779e:	3402      	adds	r4, #2
 80077a0:	9305      	str	r3, [sp, #20]
 80077a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007888 <_vfiprintf_r+0x25c>
 80077a6:	7821      	ldrb	r1, [r4, #0]
 80077a8:	2203      	movs	r2, #3
 80077aa:	4650      	mov	r0, sl
 80077ac:	f7f8 fd98 	bl	80002e0 <memchr>
 80077b0:	b140      	cbz	r0, 80077c4 <_vfiprintf_r+0x198>
 80077b2:	2340      	movs	r3, #64	; 0x40
 80077b4:	eba0 000a 	sub.w	r0, r0, sl
 80077b8:	fa03 f000 	lsl.w	r0, r3, r0
 80077bc:	9b04      	ldr	r3, [sp, #16]
 80077be:	4303      	orrs	r3, r0
 80077c0:	3401      	adds	r4, #1
 80077c2:	9304      	str	r3, [sp, #16]
 80077c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077c8:	482c      	ldr	r0, [pc, #176]	; (800787c <_vfiprintf_r+0x250>)
 80077ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077ce:	2206      	movs	r2, #6
 80077d0:	f7f8 fd86 	bl	80002e0 <memchr>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	d03f      	beq.n	8007858 <_vfiprintf_r+0x22c>
 80077d8:	4b29      	ldr	r3, [pc, #164]	; (8007880 <_vfiprintf_r+0x254>)
 80077da:	bb1b      	cbnz	r3, 8007824 <_vfiprintf_r+0x1f8>
 80077dc:	9b03      	ldr	r3, [sp, #12]
 80077de:	3307      	adds	r3, #7
 80077e0:	f023 0307 	bic.w	r3, r3, #7
 80077e4:	3308      	adds	r3, #8
 80077e6:	9303      	str	r3, [sp, #12]
 80077e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ea:	443b      	add	r3, r7
 80077ec:	9309      	str	r3, [sp, #36]	; 0x24
 80077ee:	e767      	b.n	80076c0 <_vfiprintf_r+0x94>
 80077f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80077f4:	460c      	mov	r4, r1
 80077f6:	2001      	movs	r0, #1
 80077f8:	e7a5      	b.n	8007746 <_vfiprintf_r+0x11a>
 80077fa:	2300      	movs	r3, #0
 80077fc:	3401      	adds	r4, #1
 80077fe:	9305      	str	r3, [sp, #20]
 8007800:	4619      	mov	r1, r3
 8007802:	f04f 0c0a 	mov.w	ip, #10
 8007806:	4620      	mov	r0, r4
 8007808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800780c:	3a30      	subs	r2, #48	; 0x30
 800780e:	2a09      	cmp	r2, #9
 8007810:	d903      	bls.n	800781a <_vfiprintf_r+0x1ee>
 8007812:	2b00      	cmp	r3, #0
 8007814:	d0c5      	beq.n	80077a2 <_vfiprintf_r+0x176>
 8007816:	9105      	str	r1, [sp, #20]
 8007818:	e7c3      	b.n	80077a2 <_vfiprintf_r+0x176>
 800781a:	fb0c 2101 	mla	r1, ip, r1, r2
 800781e:	4604      	mov	r4, r0
 8007820:	2301      	movs	r3, #1
 8007822:	e7f0      	b.n	8007806 <_vfiprintf_r+0x1da>
 8007824:	ab03      	add	r3, sp, #12
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	462a      	mov	r2, r5
 800782a:	4b16      	ldr	r3, [pc, #88]	; (8007884 <_vfiprintf_r+0x258>)
 800782c:	a904      	add	r1, sp, #16
 800782e:	4630      	mov	r0, r6
 8007830:	f3af 8000 	nop.w
 8007834:	4607      	mov	r7, r0
 8007836:	1c78      	adds	r0, r7, #1
 8007838:	d1d6      	bne.n	80077e8 <_vfiprintf_r+0x1bc>
 800783a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800783c:	07d9      	lsls	r1, r3, #31
 800783e:	d405      	bmi.n	800784c <_vfiprintf_r+0x220>
 8007840:	89ab      	ldrh	r3, [r5, #12]
 8007842:	059a      	lsls	r2, r3, #22
 8007844:	d402      	bmi.n	800784c <_vfiprintf_r+0x220>
 8007846:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007848:	f7ff fd7f 	bl	800734a <__retarget_lock_release_recursive>
 800784c:	89ab      	ldrh	r3, [r5, #12]
 800784e:	065b      	lsls	r3, r3, #25
 8007850:	f53f af12 	bmi.w	8007678 <_vfiprintf_r+0x4c>
 8007854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007856:	e711      	b.n	800767c <_vfiprintf_r+0x50>
 8007858:	ab03      	add	r3, sp, #12
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	462a      	mov	r2, r5
 800785e:	4b09      	ldr	r3, [pc, #36]	; (8007884 <_vfiprintf_r+0x258>)
 8007860:	a904      	add	r1, sp, #16
 8007862:	4630      	mov	r0, r6
 8007864:	f000 f880 	bl	8007968 <_printf_i>
 8007868:	e7e4      	b.n	8007834 <_vfiprintf_r+0x208>
 800786a:	bf00      	nop
 800786c:	08007dcc 	.word	0x08007dcc
 8007870:	08007dec 	.word	0x08007dec
 8007874:	08007dac 	.word	0x08007dac
 8007878:	08007e0c 	.word	0x08007e0c
 800787c:	08007e16 	.word	0x08007e16
 8007880:	00000000 	.word	0x00000000
 8007884:	08007607 	.word	0x08007607
 8007888:	08007e12 	.word	0x08007e12

0800788c <_printf_common>:
 800788c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007890:	4616      	mov	r6, r2
 8007892:	4699      	mov	r9, r3
 8007894:	688a      	ldr	r2, [r1, #8]
 8007896:	690b      	ldr	r3, [r1, #16]
 8007898:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800789c:	4293      	cmp	r3, r2
 800789e:	bfb8      	it	lt
 80078a0:	4613      	movlt	r3, r2
 80078a2:	6033      	str	r3, [r6, #0]
 80078a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078a8:	4607      	mov	r7, r0
 80078aa:	460c      	mov	r4, r1
 80078ac:	b10a      	cbz	r2, 80078b2 <_printf_common+0x26>
 80078ae:	3301      	adds	r3, #1
 80078b0:	6033      	str	r3, [r6, #0]
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	0699      	lsls	r1, r3, #26
 80078b6:	bf42      	ittt	mi
 80078b8:	6833      	ldrmi	r3, [r6, #0]
 80078ba:	3302      	addmi	r3, #2
 80078bc:	6033      	strmi	r3, [r6, #0]
 80078be:	6825      	ldr	r5, [r4, #0]
 80078c0:	f015 0506 	ands.w	r5, r5, #6
 80078c4:	d106      	bne.n	80078d4 <_printf_common+0x48>
 80078c6:	f104 0a19 	add.w	sl, r4, #25
 80078ca:	68e3      	ldr	r3, [r4, #12]
 80078cc:	6832      	ldr	r2, [r6, #0]
 80078ce:	1a9b      	subs	r3, r3, r2
 80078d0:	42ab      	cmp	r3, r5
 80078d2:	dc26      	bgt.n	8007922 <_printf_common+0x96>
 80078d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078d8:	1e13      	subs	r3, r2, #0
 80078da:	6822      	ldr	r2, [r4, #0]
 80078dc:	bf18      	it	ne
 80078de:	2301      	movne	r3, #1
 80078e0:	0692      	lsls	r2, r2, #26
 80078e2:	d42b      	bmi.n	800793c <_printf_common+0xb0>
 80078e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078e8:	4649      	mov	r1, r9
 80078ea:	4638      	mov	r0, r7
 80078ec:	47c0      	blx	r8
 80078ee:	3001      	adds	r0, #1
 80078f0:	d01e      	beq.n	8007930 <_printf_common+0xa4>
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	68e5      	ldr	r5, [r4, #12]
 80078f6:	6832      	ldr	r2, [r6, #0]
 80078f8:	f003 0306 	and.w	r3, r3, #6
 80078fc:	2b04      	cmp	r3, #4
 80078fe:	bf08      	it	eq
 8007900:	1aad      	subeq	r5, r5, r2
 8007902:	68a3      	ldr	r3, [r4, #8]
 8007904:	6922      	ldr	r2, [r4, #16]
 8007906:	bf0c      	ite	eq
 8007908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800790c:	2500      	movne	r5, #0
 800790e:	4293      	cmp	r3, r2
 8007910:	bfc4      	itt	gt
 8007912:	1a9b      	subgt	r3, r3, r2
 8007914:	18ed      	addgt	r5, r5, r3
 8007916:	2600      	movs	r6, #0
 8007918:	341a      	adds	r4, #26
 800791a:	42b5      	cmp	r5, r6
 800791c:	d11a      	bne.n	8007954 <_printf_common+0xc8>
 800791e:	2000      	movs	r0, #0
 8007920:	e008      	b.n	8007934 <_printf_common+0xa8>
 8007922:	2301      	movs	r3, #1
 8007924:	4652      	mov	r2, sl
 8007926:	4649      	mov	r1, r9
 8007928:	4638      	mov	r0, r7
 800792a:	47c0      	blx	r8
 800792c:	3001      	adds	r0, #1
 800792e:	d103      	bne.n	8007938 <_printf_common+0xac>
 8007930:	f04f 30ff 	mov.w	r0, #4294967295
 8007934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007938:	3501      	adds	r5, #1
 800793a:	e7c6      	b.n	80078ca <_printf_common+0x3e>
 800793c:	18e1      	adds	r1, r4, r3
 800793e:	1c5a      	adds	r2, r3, #1
 8007940:	2030      	movs	r0, #48	; 0x30
 8007942:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007946:	4422      	add	r2, r4
 8007948:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800794c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007950:	3302      	adds	r3, #2
 8007952:	e7c7      	b.n	80078e4 <_printf_common+0x58>
 8007954:	2301      	movs	r3, #1
 8007956:	4622      	mov	r2, r4
 8007958:	4649      	mov	r1, r9
 800795a:	4638      	mov	r0, r7
 800795c:	47c0      	blx	r8
 800795e:	3001      	adds	r0, #1
 8007960:	d0e6      	beq.n	8007930 <_printf_common+0xa4>
 8007962:	3601      	adds	r6, #1
 8007964:	e7d9      	b.n	800791a <_printf_common+0x8e>
	...

08007968 <_printf_i>:
 8007968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800796c:	7e0f      	ldrb	r7, [r1, #24]
 800796e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007970:	2f78      	cmp	r7, #120	; 0x78
 8007972:	4691      	mov	r9, r2
 8007974:	4680      	mov	r8, r0
 8007976:	460c      	mov	r4, r1
 8007978:	469a      	mov	sl, r3
 800797a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800797e:	d807      	bhi.n	8007990 <_printf_i+0x28>
 8007980:	2f62      	cmp	r7, #98	; 0x62
 8007982:	d80a      	bhi.n	800799a <_printf_i+0x32>
 8007984:	2f00      	cmp	r7, #0
 8007986:	f000 80d8 	beq.w	8007b3a <_printf_i+0x1d2>
 800798a:	2f58      	cmp	r7, #88	; 0x58
 800798c:	f000 80a3 	beq.w	8007ad6 <_printf_i+0x16e>
 8007990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007994:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007998:	e03a      	b.n	8007a10 <_printf_i+0xa8>
 800799a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800799e:	2b15      	cmp	r3, #21
 80079a0:	d8f6      	bhi.n	8007990 <_printf_i+0x28>
 80079a2:	a101      	add	r1, pc, #4	; (adr r1, 80079a8 <_printf_i+0x40>)
 80079a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079a8:	08007a01 	.word	0x08007a01
 80079ac:	08007a15 	.word	0x08007a15
 80079b0:	08007991 	.word	0x08007991
 80079b4:	08007991 	.word	0x08007991
 80079b8:	08007991 	.word	0x08007991
 80079bc:	08007991 	.word	0x08007991
 80079c0:	08007a15 	.word	0x08007a15
 80079c4:	08007991 	.word	0x08007991
 80079c8:	08007991 	.word	0x08007991
 80079cc:	08007991 	.word	0x08007991
 80079d0:	08007991 	.word	0x08007991
 80079d4:	08007b21 	.word	0x08007b21
 80079d8:	08007a45 	.word	0x08007a45
 80079dc:	08007b03 	.word	0x08007b03
 80079e0:	08007991 	.word	0x08007991
 80079e4:	08007991 	.word	0x08007991
 80079e8:	08007b43 	.word	0x08007b43
 80079ec:	08007991 	.word	0x08007991
 80079f0:	08007a45 	.word	0x08007a45
 80079f4:	08007991 	.word	0x08007991
 80079f8:	08007991 	.word	0x08007991
 80079fc:	08007b0b 	.word	0x08007b0b
 8007a00:	682b      	ldr	r3, [r5, #0]
 8007a02:	1d1a      	adds	r2, r3, #4
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	602a      	str	r2, [r5, #0]
 8007a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a10:	2301      	movs	r3, #1
 8007a12:	e0a3      	b.n	8007b5c <_printf_i+0x1f4>
 8007a14:	6820      	ldr	r0, [r4, #0]
 8007a16:	6829      	ldr	r1, [r5, #0]
 8007a18:	0606      	lsls	r6, r0, #24
 8007a1a:	f101 0304 	add.w	r3, r1, #4
 8007a1e:	d50a      	bpl.n	8007a36 <_printf_i+0xce>
 8007a20:	680e      	ldr	r6, [r1, #0]
 8007a22:	602b      	str	r3, [r5, #0]
 8007a24:	2e00      	cmp	r6, #0
 8007a26:	da03      	bge.n	8007a30 <_printf_i+0xc8>
 8007a28:	232d      	movs	r3, #45	; 0x2d
 8007a2a:	4276      	negs	r6, r6
 8007a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a30:	485e      	ldr	r0, [pc, #376]	; (8007bac <_printf_i+0x244>)
 8007a32:	230a      	movs	r3, #10
 8007a34:	e019      	b.n	8007a6a <_printf_i+0x102>
 8007a36:	680e      	ldr	r6, [r1, #0]
 8007a38:	602b      	str	r3, [r5, #0]
 8007a3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a3e:	bf18      	it	ne
 8007a40:	b236      	sxthne	r6, r6
 8007a42:	e7ef      	b.n	8007a24 <_printf_i+0xbc>
 8007a44:	682b      	ldr	r3, [r5, #0]
 8007a46:	6820      	ldr	r0, [r4, #0]
 8007a48:	1d19      	adds	r1, r3, #4
 8007a4a:	6029      	str	r1, [r5, #0]
 8007a4c:	0601      	lsls	r1, r0, #24
 8007a4e:	d501      	bpl.n	8007a54 <_printf_i+0xec>
 8007a50:	681e      	ldr	r6, [r3, #0]
 8007a52:	e002      	b.n	8007a5a <_printf_i+0xf2>
 8007a54:	0646      	lsls	r6, r0, #25
 8007a56:	d5fb      	bpl.n	8007a50 <_printf_i+0xe8>
 8007a58:	881e      	ldrh	r6, [r3, #0]
 8007a5a:	4854      	ldr	r0, [pc, #336]	; (8007bac <_printf_i+0x244>)
 8007a5c:	2f6f      	cmp	r7, #111	; 0x6f
 8007a5e:	bf0c      	ite	eq
 8007a60:	2308      	moveq	r3, #8
 8007a62:	230a      	movne	r3, #10
 8007a64:	2100      	movs	r1, #0
 8007a66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a6a:	6865      	ldr	r5, [r4, #4]
 8007a6c:	60a5      	str	r5, [r4, #8]
 8007a6e:	2d00      	cmp	r5, #0
 8007a70:	bfa2      	ittt	ge
 8007a72:	6821      	ldrge	r1, [r4, #0]
 8007a74:	f021 0104 	bicge.w	r1, r1, #4
 8007a78:	6021      	strge	r1, [r4, #0]
 8007a7a:	b90e      	cbnz	r6, 8007a80 <_printf_i+0x118>
 8007a7c:	2d00      	cmp	r5, #0
 8007a7e:	d04d      	beq.n	8007b1c <_printf_i+0x1b4>
 8007a80:	4615      	mov	r5, r2
 8007a82:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a86:	fb03 6711 	mls	r7, r3, r1, r6
 8007a8a:	5dc7      	ldrb	r7, [r0, r7]
 8007a8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a90:	4637      	mov	r7, r6
 8007a92:	42bb      	cmp	r3, r7
 8007a94:	460e      	mov	r6, r1
 8007a96:	d9f4      	bls.n	8007a82 <_printf_i+0x11a>
 8007a98:	2b08      	cmp	r3, #8
 8007a9a:	d10b      	bne.n	8007ab4 <_printf_i+0x14c>
 8007a9c:	6823      	ldr	r3, [r4, #0]
 8007a9e:	07de      	lsls	r6, r3, #31
 8007aa0:	d508      	bpl.n	8007ab4 <_printf_i+0x14c>
 8007aa2:	6923      	ldr	r3, [r4, #16]
 8007aa4:	6861      	ldr	r1, [r4, #4]
 8007aa6:	4299      	cmp	r1, r3
 8007aa8:	bfde      	ittt	le
 8007aaa:	2330      	movle	r3, #48	; 0x30
 8007aac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ab0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ab4:	1b52      	subs	r2, r2, r5
 8007ab6:	6122      	str	r2, [r4, #16]
 8007ab8:	f8cd a000 	str.w	sl, [sp]
 8007abc:	464b      	mov	r3, r9
 8007abe:	aa03      	add	r2, sp, #12
 8007ac0:	4621      	mov	r1, r4
 8007ac2:	4640      	mov	r0, r8
 8007ac4:	f7ff fee2 	bl	800788c <_printf_common>
 8007ac8:	3001      	adds	r0, #1
 8007aca:	d14c      	bne.n	8007b66 <_printf_i+0x1fe>
 8007acc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad0:	b004      	add	sp, #16
 8007ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad6:	4835      	ldr	r0, [pc, #212]	; (8007bac <_printf_i+0x244>)
 8007ad8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007adc:	6829      	ldr	r1, [r5, #0]
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ae4:	6029      	str	r1, [r5, #0]
 8007ae6:	061d      	lsls	r5, r3, #24
 8007ae8:	d514      	bpl.n	8007b14 <_printf_i+0x1ac>
 8007aea:	07df      	lsls	r7, r3, #31
 8007aec:	bf44      	itt	mi
 8007aee:	f043 0320 	orrmi.w	r3, r3, #32
 8007af2:	6023      	strmi	r3, [r4, #0]
 8007af4:	b91e      	cbnz	r6, 8007afe <_printf_i+0x196>
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	f023 0320 	bic.w	r3, r3, #32
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	2310      	movs	r3, #16
 8007b00:	e7b0      	b.n	8007a64 <_printf_i+0xfc>
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	f043 0320 	orr.w	r3, r3, #32
 8007b08:	6023      	str	r3, [r4, #0]
 8007b0a:	2378      	movs	r3, #120	; 0x78
 8007b0c:	4828      	ldr	r0, [pc, #160]	; (8007bb0 <_printf_i+0x248>)
 8007b0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b12:	e7e3      	b.n	8007adc <_printf_i+0x174>
 8007b14:	0659      	lsls	r1, r3, #25
 8007b16:	bf48      	it	mi
 8007b18:	b2b6      	uxthmi	r6, r6
 8007b1a:	e7e6      	b.n	8007aea <_printf_i+0x182>
 8007b1c:	4615      	mov	r5, r2
 8007b1e:	e7bb      	b.n	8007a98 <_printf_i+0x130>
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	6826      	ldr	r6, [r4, #0]
 8007b24:	6961      	ldr	r1, [r4, #20]
 8007b26:	1d18      	adds	r0, r3, #4
 8007b28:	6028      	str	r0, [r5, #0]
 8007b2a:	0635      	lsls	r5, r6, #24
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	d501      	bpl.n	8007b34 <_printf_i+0x1cc>
 8007b30:	6019      	str	r1, [r3, #0]
 8007b32:	e002      	b.n	8007b3a <_printf_i+0x1d2>
 8007b34:	0670      	lsls	r0, r6, #25
 8007b36:	d5fb      	bpl.n	8007b30 <_printf_i+0x1c8>
 8007b38:	8019      	strh	r1, [r3, #0]
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	6123      	str	r3, [r4, #16]
 8007b3e:	4615      	mov	r5, r2
 8007b40:	e7ba      	b.n	8007ab8 <_printf_i+0x150>
 8007b42:	682b      	ldr	r3, [r5, #0]
 8007b44:	1d1a      	adds	r2, r3, #4
 8007b46:	602a      	str	r2, [r5, #0]
 8007b48:	681d      	ldr	r5, [r3, #0]
 8007b4a:	6862      	ldr	r2, [r4, #4]
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f7f8 fbc6 	bl	80002e0 <memchr>
 8007b54:	b108      	cbz	r0, 8007b5a <_printf_i+0x1f2>
 8007b56:	1b40      	subs	r0, r0, r5
 8007b58:	6060      	str	r0, [r4, #4]
 8007b5a:	6863      	ldr	r3, [r4, #4]
 8007b5c:	6123      	str	r3, [r4, #16]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b64:	e7a8      	b.n	8007ab8 <_printf_i+0x150>
 8007b66:	6923      	ldr	r3, [r4, #16]
 8007b68:	462a      	mov	r2, r5
 8007b6a:	4649      	mov	r1, r9
 8007b6c:	4640      	mov	r0, r8
 8007b6e:	47d0      	blx	sl
 8007b70:	3001      	adds	r0, #1
 8007b72:	d0ab      	beq.n	8007acc <_printf_i+0x164>
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	079b      	lsls	r3, r3, #30
 8007b78:	d413      	bmi.n	8007ba2 <_printf_i+0x23a>
 8007b7a:	68e0      	ldr	r0, [r4, #12]
 8007b7c:	9b03      	ldr	r3, [sp, #12]
 8007b7e:	4298      	cmp	r0, r3
 8007b80:	bfb8      	it	lt
 8007b82:	4618      	movlt	r0, r3
 8007b84:	e7a4      	b.n	8007ad0 <_printf_i+0x168>
 8007b86:	2301      	movs	r3, #1
 8007b88:	4632      	mov	r2, r6
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	4640      	mov	r0, r8
 8007b8e:	47d0      	blx	sl
 8007b90:	3001      	adds	r0, #1
 8007b92:	d09b      	beq.n	8007acc <_printf_i+0x164>
 8007b94:	3501      	adds	r5, #1
 8007b96:	68e3      	ldr	r3, [r4, #12]
 8007b98:	9903      	ldr	r1, [sp, #12]
 8007b9a:	1a5b      	subs	r3, r3, r1
 8007b9c:	42ab      	cmp	r3, r5
 8007b9e:	dcf2      	bgt.n	8007b86 <_printf_i+0x21e>
 8007ba0:	e7eb      	b.n	8007b7a <_printf_i+0x212>
 8007ba2:	2500      	movs	r5, #0
 8007ba4:	f104 0619 	add.w	r6, r4, #25
 8007ba8:	e7f5      	b.n	8007b96 <_printf_i+0x22e>
 8007baa:	bf00      	nop
 8007bac:	08007e1d 	.word	0x08007e1d
 8007bb0:	08007e2e 	.word	0x08007e2e

08007bb4 <_sbrk_r>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	4d06      	ldr	r5, [pc, #24]	; (8007bd0 <_sbrk_r+0x1c>)
 8007bb8:	2300      	movs	r3, #0
 8007bba:	4604      	mov	r4, r0
 8007bbc:	4608      	mov	r0, r1
 8007bbe:	602b      	str	r3, [r5, #0]
 8007bc0:	f7f8 ff0a 	bl	80009d8 <_sbrk>
 8007bc4:	1c43      	adds	r3, r0, #1
 8007bc6:	d102      	bne.n	8007bce <_sbrk_r+0x1a>
 8007bc8:	682b      	ldr	r3, [r5, #0]
 8007bca:	b103      	cbz	r3, 8007bce <_sbrk_r+0x1a>
 8007bcc:	6023      	str	r3, [r4, #0]
 8007bce:	bd38      	pop	{r3, r4, r5, pc}
 8007bd0:	24000138 	.word	0x24000138

08007bd4 <__sread>:
 8007bd4:	b510      	push	{r4, lr}
 8007bd6:	460c      	mov	r4, r1
 8007bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bdc:	f000 f8a0 	bl	8007d20 <_read_r>
 8007be0:	2800      	cmp	r0, #0
 8007be2:	bfab      	itete	ge
 8007be4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007be6:	89a3      	ldrhlt	r3, [r4, #12]
 8007be8:	181b      	addge	r3, r3, r0
 8007bea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007bee:	bfac      	ite	ge
 8007bf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007bf2:	81a3      	strhlt	r3, [r4, #12]
 8007bf4:	bd10      	pop	{r4, pc}

08007bf6 <__swrite>:
 8007bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfa:	461f      	mov	r7, r3
 8007bfc:	898b      	ldrh	r3, [r1, #12]
 8007bfe:	05db      	lsls	r3, r3, #23
 8007c00:	4605      	mov	r5, r0
 8007c02:	460c      	mov	r4, r1
 8007c04:	4616      	mov	r6, r2
 8007c06:	d505      	bpl.n	8007c14 <__swrite+0x1e>
 8007c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f000 f868 	bl	8007ce4 <_lseek_r>
 8007c14:	89a3      	ldrh	r3, [r4, #12]
 8007c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c1e:	81a3      	strh	r3, [r4, #12]
 8007c20:	4632      	mov	r2, r6
 8007c22:	463b      	mov	r3, r7
 8007c24:	4628      	mov	r0, r5
 8007c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c2a:	f000 b817 	b.w	8007c5c <_write_r>

08007c2e <__sseek>:
 8007c2e:	b510      	push	{r4, lr}
 8007c30:	460c      	mov	r4, r1
 8007c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c36:	f000 f855 	bl	8007ce4 <_lseek_r>
 8007c3a:	1c43      	adds	r3, r0, #1
 8007c3c:	89a3      	ldrh	r3, [r4, #12]
 8007c3e:	bf15      	itete	ne
 8007c40:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c4a:	81a3      	strheq	r3, [r4, #12]
 8007c4c:	bf18      	it	ne
 8007c4e:	81a3      	strhne	r3, [r4, #12]
 8007c50:	bd10      	pop	{r4, pc}

08007c52 <__sclose>:
 8007c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c56:	f000 b813 	b.w	8007c80 <_close_r>
	...

08007c5c <_write_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	4d07      	ldr	r5, [pc, #28]	; (8007c7c <_write_r+0x20>)
 8007c60:	4604      	mov	r4, r0
 8007c62:	4608      	mov	r0, r1
 8007c64:	4611      	mov	r1, r2
 8007c66:	2200      	movs	r2, #0
 8007c68:	602a      	str	r2, [r5, #0]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f7f8 fe63 	bl	8000936 <_write>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	d102      	bne.n	8007c7a <_write_r+0x1e>
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	b103      	cbz	r3, 8007c7a <_write_r+0x1e>
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	24000138 	.word	0x24000138

08007c80 <_close_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4d06      	ldr	r5, [pc, #24]	; (8007c9c <_close_r+0x1c>)
 8007c84:	2300      	movs	r3, #0
 8007c86:	4604      	mov	r4, r0
 8007c88:	4608      	mov	r0, r1
 8007c8a:	602b      	str	r3, [r5, #0]
 8007c8c:	f7f8 fe6f 	bl	800096e <_close>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d102      	bne.n	8007c9a <_close_r+0x1a>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	b103      	cbz	r3, 8007c9a <_close_r+0x1a>
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	24000138 	.word	0x24000138

08007ca0 <_fstat_r>:
 8007ca0:	b538      	push	{r3, r4, r5, lr}
 8007ca2:	4d07      	ldr	r5, [pc, #28]	; (8007cc0 <_fstat_r+0x20>)
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	4608      	mov	r0, r1
 8007caa:	4611      	mov	r1, r2
 8007cac:	602b      	str	r3, [r5, #0]
 8007cae:	f7f8 fe6a 	bl	8000986 <_fstat>
 8007cb2:	1c43      	adds	r3, r0, #1
 8007cb4:	d102      	bne.n	8007cbc <_fstat_r+0x1c>
 8007cb6:	682b      	ldr	r3, [r5, #0]
 8007cb8:	b103      	cbz	r3, 8007cbc <_fstat_r+0x1c>
 8007cba:	6023      	str	r3, [r4, #0]
 8007cbc:	bd38      	pop	{r3, r4, r5, pc}
 8007cbe:	bf00      	nop
 8007cc0:	24000138 	.word	0x24000138

08007cc4 <_isatty_r>:
 8007cc4:	b538      	push	{r3, r4, r5, lr}
 8007cc6:	4d06      	ldr	r5, [pc, #24]	; (8007ce0 <_isatty_r+0x1c>)
 8007cc8:	2300      	movs	r3, #0
 8007cca:	4604      	mov	r4, r0
 8007ccc:	4608      	mov	r0, r1
 8007cce:	602b      	str	r3, [r5, #0]
 8007cd0:	f7f8 fe69 	bl	80009a6 <_isatty>
 8007cd4:	1c43      	adds	r3, r0, #1
 8007cd6:	d102      	bne.n	8007cde <_isatty_r+0x1a>
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	b103      	cbz	r3, 8007cde <_isatty_r+0x1a>
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	bd38      	pop	{r3, r4, r5, pc}
 8007ce0:	24000138 	.word	0x24000138

08007ce4 <_lseek_r>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	4d07      	ldr	r5, [pc, #28]	; (8007d04 <_lseek_r+0x20>)
 8007ce8:	4604      	mov	r4, r0
 8007cea:	4608      	mov	r0, r1
 8007cec:	4611      	mov	r1, r2
 8007cee:	2200      	movs	r2, #0
 8007cf0:	602a      	str	r2, [r5, #0]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f7f8 fe62 	bl	80009bc <_lseek>
 8007cf8:	1c43      	adds	r3, r0, #1
 8007cfa:	d102      	bne.n	8007d02 <_lseek_r+0x1e>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	b103      	cbz	r3, 8007d02 <_lseek_r+0x1e>
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	bd38      	pop	{r3, r4, r5, pc}
 8007d04:	24000138 	.word	0x24000138

08007d08 <__malloc_lock>:
 8007d08:	4801      	ldr	r0, [pc, #4]	; (8007d10 <__malloc_lock+0x8>)
 8007d0a:	f7ff bb1d 	b.w	8007348 <__retarget_lock_acquire_recursive>
 8007d0e:	bf00      	nop
 8007d10:	2400012c 	.word	0x2400012c

08007d14 <__malloc_unlock>:
 8007d14:	4801      	ldr	r0, [pc, #4]	; (8007d1c <__malloc_unlock+0x8>)
 8007d16:	f7ff bb18 	b.w	800734a <__retarget_lock_release_recursive>
 8007d1a:	bf00      	nop
 8007d1c:	2400012c 	.word	0x2400012c

08007d20 <_read_r>:
 8007d20:	b538      	push	{r3, r4, r5, lr}
 8007d22:	4d07      	ldr	r5, [pc, #28]	; (8007d40 <_read_r+0x20>)
 8007d24:	4604      	mov	r4, r0
 8007d26:	4608      	mov	r0, r1
 8007d28:	4611      	mov	r1, r2
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	602a      	str	r2, [r5, #0]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	f7f8 fde4 	bl	80008fc <_read>
 8007d34:	1c43      	adds	r3, r0, #1
 8007d36:	d102      	bne.n	8007d3e <_read_r+0x1e>
 8007d38:	682b      	ldr	r3, [r5, #0]
 8007d3a:	b103      	cbz	r3, 8007d3e <_read_r+0x1e>
 8007d3c:	6023      	str	r3, [r4, #0]
 8007d3e:	bd38      	pop	{r3, r4, r5, pc}
 8007d40:	24000138 	.word	0x24000138

08007d44 <_init>:
 8007d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d46:	bf00      	nop
 8007d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d4a:	bc08      	pop	{r3}
 8007d4c:	469e      	mov	lr, r3
 8007d4e:	4770      	bx	lr

08007d50 <_fini>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	bf00      	nop
 8007d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d56:	bc08      	pop	{r3}
 8007d58:	469e      	mov	lr, r3
 8007d5a:	4770      	bx	lr
